<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++学习笔记</title>
    <url>/2021/11/25/C-Learning-blog/</url>
    <content><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="一、开始"><a href="#一、开始" class="headerlink" title="一、开始"></a>一、开始</h2><h4 id="1-编译指令"><a href="#1-编译指令" class="headerlink" title="1. 编译指令"></a>1. 编译指令</h4><ul>
<li><p><code>#include</code> 编译指令<br>将指定的文件插入到代码中指令所在的位置</p>
</li>
<li><p><code>#define</code> 预处理指令</p>
<p>常用于定义常数值或者宏</p>
</li>
<li><p><code>#ifdef [key]``#ifndef [key]</code>, <code>#endif</code></p>
<p>经常被用来防止循环包含</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyHeader_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyHeader_H</span></span><br><span class="line"><span class="comment">// ... 内容</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li><p><code>#pragma [xyz]</code></p>
<p>预处理期间会收到警告或者错误信息</p>
</li>
</ul>
<h4 id="2-输入与输出流"><a href="#2-输入与输出流" class="headerlink" title="2. 输入与输出流"></a>2. 输入与输出流</h4><h4 id="3-名称空间"><a href="#3-名称空间" class="headerlink" title="3. 名称空间"></a>3. 名称空间</h4><ul>
<li><p><code>namespace</code> 命名空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ama &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AmaObject</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">testFunction</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>示例内容</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ama;</span><br><span class="line">AmaObject *object = <span class="keyword">new</span> <span class="built_in">AmaObject</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ama::AmaObject;</span><br><span class="line">AmaObject *object = <span class="keyword">new</span> <span class="built_in">AmaObject</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-类型"><a href="#4-类型" class="headerlink" title="4. 类型"></a>4. 类型</h4><ul>
<li><p>枚举类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通枚举</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  kPieceTypeKing,</span><br><span class="line">  kPieceTypeQueen,</span><br><span class="line">  kPieceTypeRook,</span><br><span class="line">  kPieceTypePawn</span><br><span class="line">&#125; PieceT;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 强类型枚举</span></span><br><span class="line"><span class="comment">// 默认类型是整型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">MyEnum</span> &#123;</span></span><br><span class="line">  EnumValue1,</span><br><span class="line">  EnumValue2 = <span class="number">10</span>,</span><br><span class="line">  EnumValue3</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以提供继承类型</span></span><br><span class="line"><span class="keyword">enum</span> class MyEnum: <span class="keyword">unsigned</span> <span class="keyword">long</span> &#123;</span><br><span class="line">  EnumValueLong1,</span><br><span class="line">  EnumValueLong2 = <span class="number">10</span>,</span><br><span class="line">  EnumValueLong3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> firstInitial;</span><br><span class="line">  <span class="keyword">char</span> middleInitial;</span><br><span class="line">  <span class="keyword">char</span> lastInitial;</span><br><span class="line">  <span class="keyword">int</span> employeeNumber;</span><br><span class="line">  <span class="keyword">int</span> salary;</span><br><span class="line">&#125; EmployeeT;</span><br></pre></td></tr></table></figure></li>
<li><p>数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : arr) &#123;</span><br><span class="line">  i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化一个10个元素的数组并将每个元素设为0，只有设置为0的时候有效</span></span><br><span class="line"><span class="keyword">int</span> myArray[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-指针以及动态内存"><a href="#5-指针以及动态内存" class="headerlink" title="5. 指针以及动态内存"></a>5. 指针以及动态内存</h4><ul>
<li><p>堆栈和堆</p>
<p><em>每个函数都有独立的内存空间（堆栈帧）</em></p>
<p><em>堆是与当前函数或者堆栈帧完全没有关系的内存区域，如果想要函数调用结束后仍然保存其中声明的变量，可以将变量放到堆中</em></p>
</li>
<li><p>动态分配的数组</p>
<p>使用堆内存初始化指针，可以使用<code>new</code>命令</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arraySize = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span>* myVariableSizedArray;</span><br><span class="line">myVariableSizedArray = <span class="keyword">new</span> <span class="keyword">int</span>[arraySize];</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/C-Learning-blog/heap_and_stack.jpg" class="" title="动态数组的内存分配">

<p><em>由上图可看出指针变量仍然在堆栈中，但动态创建的数组在堆中</em></p>
<p><em><code>new</code>或者<code>new[]</code>必须使用<code>delete</code>或者<code>delete[]</code>来释放内存，对应的<code>malloc()</code>对应使用<code>free()</code></em></p>
<p><em>智能指针 <code>unique_ptr&lt;int[]&gt;</code></em></p>
</li>
<li><p>使用指针</p>
<p><code>int* myIntegerPointer = new int;</code></p>
<p><em>指针只是一个指向整数值的地址，访问这个值需要对指针解除引用</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Employee *e = <span class="built_in">getEmployee</span>();</span><br><span class="line">cout &lt;&lt; (*e).salary &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p><em><code>-&gt;</code>运算符允许在一步之内对指针解除引用并访问字段，例如：<code>e-&gt;salary;</code></em></p>
</li>
</ul>
<h4 id="6-C-中的字符串"><a href="#6-C-中的字符串" class="headerlink" title="6.C++中的字符串"></a>6.C++中的字符串</h4><ul>
<li><p>C 风格字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> arrayString[<span class="number">20</span>] = <span class="string">&quot;Hello, World&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* pointerString = <span class="string">&quot;Hello, World&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>C++字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line">string myString = <span class="string">&quot;Hello, World&quot;</span>;</span><br><span class="line"></span><br><span class="line">string str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">string str2 = <span class="string">&quot;, &quot;</span>;</span><br><span class="line">string str3 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">string result = str1 + str2 + str3;  </span><br></pre></td></tr></table></figure>
<h4 id="7-引用"><a href="#7-引用" class="headerlink" title="7. 引用"></a>7. 引用</h4></li>
<li><p>右值引用（解决传递常量引起的问题）</p>
</li>
</ul>
<h4 id="8-异常"><a href="#8-异常" class="headerlink" title="8. 异常"></a>8. 异常</h4><ul>
<li><p><code>throw</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">divideNumbers</span><span class="params">(<span class="keyword">double</span> inNumerator, <span class="keyword">double</span> inDenominator)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inDenominator == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inNumerator / inDenominator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">divideNumbers</span>(<span class="number">2.5</span>, <span class="number">0.5</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">divideNumbers</span>(<span class="number">2.3</span>, <span class="number">0</span>) &lt;&lt; endl;</span><br><span class="line">  &#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> exception&amp; exception) &#123;</span><br><span class="line">    count &lt;&lt; <span class="string">&quot;An exception was caught&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-const-的多种用法"><a href="#9-const-的多种用法" class="headerlink" title="9. const 的多种用法"></a>9. const 的多种用法</h4><ul>
<li><p>定义常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> kVersionNumber = <span class="number">2.0f</span>;</span><br><span class="line"><span class="keyword">const</span> string kProductName = <span class="string">&quot;Super Hyper Net Modulator&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>使用const保护参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mysteryFunction</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* myString)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span>* myString = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">  myString[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">  myString[<span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="built_in">mysteryFunction</span>(myString);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mysteryFunction</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* myString)</span> </span>&#123;</span><br><span class="line">  myString[<span class="number">0</span>] = <span class="string">&#x27;b&#x27;</span>; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>const 引用</p>
<p><em>主要用于提高效率，使用引用就不会拷贝新对象出来直接使用指向原始数据的指针（对象可能会比较庞大，拷贝可能会需要很大的代价）</em></p>
</li>
</ul>
<h2 id="二、面向对象"><a href="#二、面向对象" class="headerlink" title="二、面向对象"></a>二、面向对象</h2><h4 id="1-声明类"><a href="#1-声明类" class="headerlink" title="1. 声明类"></a>1. 声明类</h4><ul>
<li><p>头文件中声明</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirlineTicket</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">AirlineTicket</span>(); <span class="comment">// 构造函数</span></span><br><span class="line">      ~<span class="built_in">AirlineTicket</span>(); <span class="comment">// 析构函数</span></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">calculatePriceInDollars</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">getPassengerName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setPassengerName</span><span class="params">(std::string inName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Employee 类 和 DataBase 类</p>
<p><em>见代码</em></p>
</li>
</ul>
<h4 id="2-标准库"><a href="#2-标准库" class="headerlink" title="2. 标准库"></a>2. 标准库</h4><ul>
<li><p><code>vector</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  vector&lt;string&gt; myVector = &#123;<span class="string">&quot;A first string&quot;</span>, <span class="string">&quot;A second string&quot;</span>&#125;;</span><br><span class="line">  myVector.<span class="built_in">push_back</span>(<span class="string">&quot;A third string&quot;</span>);</span><br><span class="line">  myVector.<span class="built_in">push_back</span>(<span class="string">&quot;The last string in the vector&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> iterator = myVector.<span class="built_in">cbegin</span>(); iterator != myVector.<span class="built_in">cend</span>(); ++iterator) &#123;</span><br><span class="line">    cout &lt;&lt; *iterator &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> str : myVector) &#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-C-的设计特点"><a href="#3-C-的设计特点" class="headerlink" title="3. C++的设计特点"></a>3. C++的设计特点</h4><ul>
<li>庞大的功能集</li>
<li>面向对象</li>
<li>有许多设计通用、可重复使用的工具</li>
<li>有用的标准库</li>
</ul>
<h4 id="4-C-设计的两个原则"><a href="#4-C-设计的两个原则" class="headerlink" title="4. C++设计的两个原则"></a>4. C++设计的两个原则</h4><ul>
<li>抽象</li>
<li>重用</li>
</ul>
<h4 id="5-对象之间的关系"><a href="#5-对象之间的关系" class="headerlink" title="5. 对象之间的关系"></a>5. 对象之间的关系</h4><ul>
<li><code>has-a</code> 有一个</li>
<li><code>is-a</code> 继承(是一个)</li>
<li><code>Not-a</code> 不是一个</li>
<li>多态性</li>
<li>多重继承</li>
<li>混入类（mix-in）</li>
</ul>
<h2 id="三、设计可重用代码"><a href="#三、设计可重用代码" class="headerlink" title="三、设计可重用代码"></a>三、设计可重用代码</h2><h4 id="1-为什么要重用？"><a href="#1-为什么要重用？" class="headerlink" title="1. 为什么要重用？"></a>1. 为什么要重用？</h4><ul>
<li>代码不大可能只在一个程序中使用</li>
<li>重用设计可以节约时间和金钱</li>
<li>团队中其他程序猿可以使用你编写的代码</li>
<li>自己是主要受益人<h4 id="2-如何设计重用"><a href="#2-如何设计重用" class="headerlink" title="2. 如何设计重用"></a>2. 如何设计重用</h4></li>
<li>避免组合不相干的概念或者逻辑上独立的概念</li>
<li>将程序分为逻辑子系统</li>
<li>用类层次结构分离逻辑概念</li>
<li>用聚合分离逻辑概念</li>
<li>消除用户接口的依赖性</li>
<li>对泛型数据结构以及算法使用模版</li>
</ul>
<h4 id="3-模版优于其他泛型程序设计技术的原因"><a href="#3-模版优于其他泛型程序设计技术的原因" class="headerlink" title="3. 模版优于其他泛型程序设计技术的原因"></a>3. 模版优于其他泛型程序设计技术的原因</h4><ul>
<li>可以通过存储<code>void*</code>指针来编写泛型数据结构（类型不安全）</li>
<li>为特定的类编写数据结构</li>
</ul>
<h4 id="4-设计有用的接口"><a href="#4-设计有用的接口" class="headerlink" title="4. 设计有用的接口"></a>4. 设计有用的接口</h4><ul>
<li>设计容易使用的接口</li>
<li>不要省略必须的功能</li>
<li>提供整洁的接口</li>
<li>提供文档和注释</li>
</ul>
<h4 id="5-设计通用的接口"><a href="#5-设计通用的接口" class="headerlink" title="5. 设计通用的接口"></a>5. 设计通用的接口</h4><ul>
<li><p>提供执行相同功能的多种方法</p>
</li>
<li><p>提供定制</p>
<p><em>基本前提是向每个客户提供相同的基本功能，但是给用户轻微调整的能力</em></p>
</li>
</ul>
<h2 id="四、对象和类"><a href="#四、对象和类" class="headerlink" title="四、对象和类"></a>四、对象和类</h2><h4 id="1-如何编写具有方法和数据成员的类"><a href="#1-如何编写具有方法和数据成员的类" class="headerlink" title="1. 如何编写具有方法和数据成员的类"></a>1. 如何编写具有方法和数据成员的类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">double</span> inValue)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getValue</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setString</span><span class="params">(string inString)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">getString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">double</span> mValue;</span><br><span class="line">    <span class="function">string <span class="title">doubleToString</span><span class="params">(<span class="keyword">double</span> inValue)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">stringToDouble</span><span class="params">(string inString)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    string mString;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2-如何控制方法和数据成员的访问"><a href="#2-如何控制方法和数据成员的访问" class="headerlink" title="2. 如何控制方法和数据成员的访问"></a>2. 如何控制方法和数据成员的访问</h4><ul>
<li><p>访问控制</p>
<p><code>public</code>, <code>private</code>, <code>protected</code></p>
<p>C++中类的默认访问控制是<code>private</code>, 而<code>struct</code> 或者 <code>union</code>的默认值是<code>public</code></p>
</li>
<li><p><code>::</code> 被称为作用域解析运算符</p>
</li>
</ul>
<h4 id="3-如何在堆栈以及堆中使用对象"><a href="#3-如何在堆栈以及堆中使用对象" class="headerlink" title="3. 如何在堆栈以及堆中使用对象"></a>3. 如何在堆栈以及堆中使用对象</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">SpreadsheetCell myCell, anotherCell; <span class="comment">// 堆栈中创建并使用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">SpreadsheetCell* myCellP = <span class="keyword">new</span> <span class="built_in">SpreadsheetCell</span>(); <span class="comment">// 动态分配对象在堆中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般方式创建并释放内存</span></span><br><span class="line">SpreadsheetCell* cellP = <span class="keyword">new</span> <span class="built_in">SpreadsheetCell</span>();</span><br><span class="line">(*cellP).<span class="built_in">setValue</span>(<span class="number">3.7</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;cell 1: &quot;</span> &lt;&lt; (*cellP).<span class="built_in">getValue</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (*cellP).<span class="built_in">getString</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> cellP;</span><br><span class="line">cellP = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 智能指针创建，不需要手动释放，内存会自动释放</span></span><br><span class="line"><span class="function">shared_ptr&lt;SpreadsheetCell&gt; <span class="title">cellP</span><span class="params">(<span class="keyword">new</span> SpreadsheetCell())</span></span>;</span><br><span class="line">cellP-&gt;<span class="built_in">setValue</span>(<span class="number">3.7</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;cell 1: &quot;</span> &lt;&lt; cellP-&gt;<span class="built_in">getValue</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cellP-&gt;<span class="built_in">getString</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p><em>如果使用<code>new</code>为对象分配了内存，结束时要用<code>delete</code>销毁对象，或者使用智能指针自动管理内存</em></p>
<p><em>如果没有使用智能指针，使用<code>delete</code>销毁了对象时，最好将指针置为<code>null</code>，这样做可以防止删除对象后意外使用了这个指针，使得调试更加容易</em></p>
<h4 id="4-什么是对象的生命周期"><a href="#4-什么是对象的生命周期" class="headerlink" title="4. 什么是对象的生命周期"></a>4. 什么是对象的生命周期</h4><ul>
<li><p>创建、销毁以及赋值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">      std::string mName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyClass obj;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编写构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">SpreadsheetCell</span>(<span class="keyword">double</span> initialValue);</span><br><span class="line">      <span class="built_in">SpreadsheetCell</span>(string initialValue); <span class="comment">// 多个构造函数</span></span><br><span class="line">&#125;</span><br><span class="line">SpreadsheetCell::<span class="built_in">SpreadsheetCell</span>(<span class="keyword">double</span> initialValue) &#123;</span><br><span class="line">  <span class="built_in">setValue</span>(initialValue);</span><br><span class="line">&#125;</span><br><span class="line">SpreadsheetCell::<span class="built_in">SpreadsheetCell</span>(string initialValue) &#123;</span><br><span class="line">  <span class="built_in">setString</span>(initialValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在构造函数中使用另外一个构造函数，是错误的，实际上是新建了一个同样类型的临时未命名对象，而不是初始化对象</span></span><br><span class="line"><span class="comment">//SpreadsheetCell::SpreadsheetCell(string initialValue) &#123;</span></span><br><span class="line"><span class="comment">//  SpreadsheetCell(stringToDouble(initialValue));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造函数</span></span><br><span class="line"><span class="comment">// 堆栈中使用构造函数</span></span><br><span class="line"><span class="function">SpreadsheetCell <span class="title">myCell</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="function">SpreadsheetCell <span class="title">myCell</span><span class="params">(<span class="string">&quot;test&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// 堆中使用构造函数</span></span><br><span class="line">SpreadsheetCell* myCellP = <span class="keyword">new</span> <span class="built_in">SpreadsheetCell</span>(<span class="number">5</span>);</span><br><span class="line">SpreadsheetCell* myCellP = <span class="keyword">new</span> <span class="built_in">SpreadsheetCell</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="function">shared_ptr&lt;SpreadsheetCell&gt; <span class="title">myCellP</span><span class="params">(<span class="keyword">new</span> SpreadsheetCell(<span class="number">5</span>))</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;SpreadsheetCell&gt; <span class="title">myCellP</span><span class="params">(<span class="keyword">new</span> SpreadsheetCell(<span class="string">&quot;test&quot;</span>))</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>默认构造函数（零参构造函数）</p>
<p>创建对象数组时，首先要为所有对象分配连续的内存空间，再为每个对象调用默认的构造函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">SpreadsheetCell cells[<span class="number">3</span>]; <span class="comment">// 如果没有默认构造函数这句代码会报错</span></span><br><span class="line">SpreadsheetCell* myCellP = <span class="keyword">new</span> SpreadsheetCell[<span class="number">10</span>]; <span class="comment">// 一样会报错</span></span><br><span class="line">SpreadsheetCell cells[<span class="number">3</span>] = &#123;</span><br><span class="line">      <span class="built_in">SpreadsheetCell</span>(<span class="number">0</span>),</span><br><span class="line">    <span class="built_in">SpreadsheetCell</span>(<span class="number">1</span>),</span><br><span class="line">    <span class="built_in">SpreadsheetCell</span>(<span class="number">2</span>)</span><br><span class="line">&#125;; <span class="comment">// 手动为每个对象调用构造函数，能绕过调用默认构造函数的限制 </span></span><br></pre></td></tr></table></figure>

<p><em>所以如果要创建某个类的对象数组，最好还是定义类的默认构造函数</em></p>
<p><em>在堆栈中调用默认构造函数时不需要使用圆括号</em></p>
</li>
<li><p>构造函数初始化器</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">SpreadsheetCell::<span class="built_in">SpreadsheetCell</span>() : <span class="built_in">value</span>(<span class="number">0</span>), <span class="built_in">mString</span>(<span class="string">&quot;&quot;</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>显示删除构造函数</p>
<p>如果你想定义一个没有任何构造函数的类，也不想让编译器生成默认的构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">MyClass</span>() = <span class="keyword">delete</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>ctor-initializer</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">SpreadsheetCell</span>(<span class="keyword">double</span> d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">SomeClass</span>();</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">      SpreadsheetCell mCell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SomeClass::<span class="built_in">SomeClass</span>() : <span class="built_in">mCell</span>(<span class="number">5.0f</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>const数据成员，当const变量创建之后无法对其正确赋值，必须在创建的时候提供值。</p>
</li>
<li><p>引用数据成员，如果不是指向一个量，引用将无法存在。</p>
</li>
<li><p>没有默认后遭函数的对象数据成员，C++会尝试用默认构造函数初始化成员对象，如果不存在就无法初始化这个对象。</p>
</li>
<li><p>没有默认构造函数的超类（父类）待定</p>
</li>
<li><p><code>ctor-initializer</code>需要注意的是：初始化数据成员的顺序是按照在类中定义的顺序</p>
</li>
<li><p>复制构造函数(<code>copy constructor</code>)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">SpreadsheetCell</span>(<span class="keyword">const</span> SpreadsheetCell&amp; src);</span><br><span class="line">&#125;</span><br><span class="line">SpreadsheetCell::<span class="built_in">SpreadsheetCell</span>(<span class="keyword">const</span> SpreadsheetCell&amp; src): <span class="built_in">mValue</span>(src.mValue), <span class="built_in">mString</span>(src.mString) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SpreadsheetCell <span class="title">myCell</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="function">SpreadsheetCell <span class="title">myCell1</span><span class="params">(myCell)</span></span>; <span class="comment">// 显示地调用赋值构造函数</span></span><br></pre></td></tr></table></figure></li>
<li><p>按引用传递对象</p>
<p>为了避免复制对象，可以让函数或者方法采用对象的引用作为参数，按引用传递对象比按值传递对象效率更高，因为只需要复制对象的地址而不需要复制对象的全部内容</p>
<p>另外按引用传递可以避免对象动态内存分配的问题</p>
</li>
<li><p>类内成员初始化器</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++11才能定义的时候直接初始化成员变量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">      <span class="keyword">int</span> mInt = <span class="number">1</span>;</span><br><span class="line">      std::string mStr = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C++11之前只有 ctor-initializer 或者 static const整型成员变量才能在类定义中初始化</span></span><br></pre></td></tr></table></figure></li>
<li><p>委托构造函数（C++11）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="built_in">MyClass</span>(<span class="keyword">char</span> c) : <span class="built_in">MyClass</span>(<span class="number">1.2</span>) &#123;&#125;</span><br><span class="line">  <span class="built_in">MyClass</span>(<span class="keyword">double</span> d) : <span class="built_in">MyClass</span>(<span class="string">&#x27;m&#x27;</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>编译器生成构造函数的总结</p>
<table>
<thead>
<tr>
<th align="center">如果定义了…</th>
<th align="center">那么编译器会生成…</th>
<th>然后可以创建一个对象</th>
</tr>
</thead>
<tbody><tr>
<td align="center">没有定义构造函数</td>
<td align="center">一个零参构造函数，一个复制构造函数</td>
<td>使用零参构造函数：<br /><code>SpreadsheetCell cell;</code><br />作为另一个对象的副本：<br /><code>SpreadsheetCell myCell(cell);</code></td>
</tr>
<tr>
<td align="center">只定义了零参构造函数</td>
<td align="center">复制构造函数</td>
<td>同上；</td>
</tr>
<tr>
<td align="center">只定义了复制构造函数</td>
<td align="center">不会生成构造函数</td>
<td>理论上可以复制其他对象，实际上无法创建任何对象；</td>
</tr>
<tr>
<td align="center">只定义一个构造函数（不是复制构造函数），该构造函数具有一个或者多个参数</td>
<td align="center">复制构造函数</td>
<td>使用带参数的构造函数：<br /><code>SpreadsheetCell mCell(6);</code><br />作为另一个对象的副本：<br /><code>SpreadsheetCell mCell(cell);</code></td>
</tr>
<tr>
<td align="center">一个零参构造函数，以及一个具有但个参数或者多个参数的构造函数（不是复制构造函数）</td>
<td align="center">复制构造函数</td>
<td>使用零参构造函数：<br /><code>SpreadsheetCell cell;</code><br />使用带有参数的构造函数：<br /><code>SpreadsheetCell cell(6);</code><br />作为另一个对象的副本：<br /><code>SpreadsheetCell anotherCell(cell);</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="5-如何编写在创建或者销毁对象时执行的代码"><a href="#5-如何编写在创建或者销毁对象时执行的代码" class="headerlink" title="5. 如何编写在创建或者销毁对象时执行的代码"></a>5. 如何编写在创建或者销毁对象时执行的代码</h4><ul>
<li><p>销毁对象时：对象的析构函数被调用，释放对象占用的内存。</p>
</li>
<li><p>当堆栈中的对象超出作用域时，意味着当前的函数、方法或者其他执行的代码块结束，对象会被销毁</p>
</li>
<li><p>堆栈上对象销毁的顺序与声明顺序相反</p>
</li>
<li><p>堆中分配的对象不会自动销毁，必须使用<code>delete</code>删除对象指针，从而调用析构函数并释放内存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function">SpreadsheetCell <span class="title">mCell</span><span class="params">(<span class="number">5</span>)</span></span>; <span class="comment">// 堆栈中的对象作用域结束后自动释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 堆中的对象需要手动销毁对象 new 对应 delete，new[] 对应 delete[]</span></span><br><span class="line">  SpreadsheetCell* cell = <span class="keyword">new</span> <span class="built_in">SpreadsheetCell</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">delete</span> cell;</span><br><span class="line">  cell = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 智能指针在作用结束后自动释放</span></span><br><span class="line">  <span class="function">shared_ptr&lt;SpreadsheetCell&gt; <span class="title">cell</span><span class="params">(<span class="keyword">new</span> SpreadsheetCell(<span class="number">5</span>))</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-如何编写复制对象或者给对象赋值的代码"><a href="#6-如何编写复制对象或者给对象赋值的代码" class="headerlink" title="6. 如何编写复制对象或者给对象赋值的代码"></a>6. 如何编写复制对象或者给对象赋值的代码</h4><ul>
<li><p>复制与赋值（复制构造函数只用在创建对象时，如果已经具有值的对象被改写被称为赋值）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 赋值运算符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      SpreadsheetCell&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SpreadsheetCell&amp; rhs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">SpreadsheetCell <span class="title">mCell</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">SpreadsheetCell anotherCell = <span class="built_in">SpreadsheetCell</span>(mCell); <span class="comment">// 调用复制构造函数</span></span><br><span class="line">SpreadsheetCell thirdCell = mCell; <span class="comment">// 依然调用的复制构造函数，因为thirdCell并未初始化且不具有值</span></span><br><span class="line">thirdCell = anotherCell; <span class="comment">// 调用operator= 赋值函数</span></span><br></pre></td></tr></table></figure></li>
<li><p>对象赋值运算的作为返回值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">SpreadsheetCell <span class="title">mCell</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">string s1;</span><br><span class="line">s1 = mCell.<span class="built_in">getString</span>();</span><br></pre></td></tr></table></figure>

<p><em>当<code>getString()</code>返回<code>mString</code>时，编译器实际上调用了<code>string</code>的复制构造函数创建了一个未命名的临时String对象，当结果赋值给s1时，会调用s1的赋值运算符，这个临时的<code>string</code>作为参数，然后这个临时的<code>string</code>对象被销毁</em></p>
</li>
</ul>
<h2 id="五、对象与类（高级）"><a href="#五、对象与类（高级）" class="headerlink" title="五、对象与类（高级）"></a>五、对象与类（高级）</h2><h4 id="1-如何为对象动态分配内存"><a href="#1-如何为对象动态分配内存" class="headerlink" title="1. 如何为对象动态分配内存"></a>1. 如何为对象动态分配内存</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Spreadsheet</span>(<span class="keyword">int</span> inWidth, <span class="keyword">int</span> inHeight);</span><br><span class="line">    ~<span class="built_in">Spreadsheet</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCellAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">const</span> SpreadsheetCell&amp; cell)</span></span>;</span><br><span class="line">    <span class="function">SpreadsheetCell <span class="title">getCellAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">inRange</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> upper)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> mWidth, mHeight;</span><br><span class="line">    SpreadsheetCell** mCells; <span class="comment">// 指定宽度和高度的动态分配二维数组</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用析构函数释放内存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Spreadsheet::~<span class="built_in">Spreadsheet</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] mCells[i]; <span class="comment">// 删除数组中的指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] mCells; <span class="comment">// 删除指针</span></span><br><span class="line">    mCells = <span class="literal">nullptr</span>; <span class="comment">// 指针置为nullptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>悬垂指针（<code>dangling pointer</code>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSpreadsheet</span><span class="params">(Spreadsheet s)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Spreadsheet <span class="title">s1</span><span class="params">(<span class="number">4</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">  <span class="built_in">printSpreadsheet</span>(s1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>调用<code>printSpreadsheet</code>函数时，会将s1的mCells指针复制一份副本出来，但是并没有复制底层的数据，造成s1和s都有一个指向同一个内存数据的指针，而在<code>printSpreadsheet</code>函数执行结束时会调用s的析构函数将数据释放掉，而s的mCells指针与s1的mCells的指针指向同一块内存，就会造成s1的mCells指针所指的内存被释放掉不再有效，而s1的mCells指针则称为悬垂指针</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Spreadsheet <span class="title">s1</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span>, <span class="title">s2</span><span class="params">(<span class="number">4</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">s1 = s2;</span><br></pre></td></tr></table></figure>

<p><em>而在赋值操作时会更糟糕</em></p>
<img src="/2021/11/25/C-Learning-blog/assign_warning_pre.jpg" class="" title="赋值之前的内存分配">

<img src="/2021/11/25/C-Learning-blog/assign_warning_after.jpg" class="" title="赋值之后的内存分配">

<p><em>赋值之后s1的mCells和s2的mCells指针指向同一块内存，而s1之前的mCells指针指向的内存则被遗弃</em></p>
<p><font size=5><strong>注：赋值运算符中首先要先释放左边引用的内存然后在进行深层复制</strong></font></p>
</li>
<li><p>复制和赋值的优化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编写复制构造函数</span></span><br><span class="line">Spreadsheet::<span class="built_in">Spreadsheet</span>(<span class="keyword">const</span> Spreadsheet&amp; src) &#123;</span><br><span class="line">    mWidth = src.mWidth;</span><br><span class="line">    mHeight = src.mHeight;</span><br><span class="line">    mCells = <span class="keyword">new</span> SpreadsheetCell* [mWidth]; <span class="comment">// 手动为mCells指针动态分配内存，防止指针指向同一块内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        mCells[i] = <span class="keyword">new</span> SpreadsheetCell[mHeight];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mHeight; j++) &#123;</span><br><span class="line">            mCells[i][j] = src.mCells[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写赋值运算函数</span></span><br><span class="line">Spreadsheet&amp; Spreadsheet::<span class="keyword">operator</span>=(<span class="keyword">const</span> Spreadsheet&amp; rhs) &#123;</span><br><span class="line">  	<span class="comment">// 检测自赋值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">// 先释放之前的指针指向的内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] mCells[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] mCells;</span><br><span class="line">    mCells = <span class="literal">nullptr</span>;</span><br><span class="line">    mWidth = rhs.mWidth;</span><br><span class="line">    mHeight = rhs.mHeight;</span><br><span class="line">    mCells = <span class="keyword">new</span> SpreadsheetCell* [mWidth]; <span class="comment">// 重新为mCells指针分配内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        mCells[i] = <span class="keyword">new</span> SpreadsheetCell[mHeight];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mHeight; j++) &#123;</span><br><span class="line">            mCells[i][j] = rhs.mCells[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size=5><strong>只要类动态分配了内存，就应该编写析构函数、复制构造函数以及赋值运算符</strong></font></p>
</li>
<li><p>禁止赋值以及按值传递</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  	<span class="built_in">Spreadsheet</span>(<span class="keyword">const</span> Spreadsheet&amp; src);</span><br><span class="line">  	Spreadsheet&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Spreadsheet&amp; rhs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>并且不需要提供实现</em></p>
</li>
</ul>
<h4 id="2-可以使用的数据成员类型"><a href="#2-可以使用的数据成员类型" class="headerlink" title="2. 可以使用的数据成员类型"></a>2. 可以使用的数据成员类型</h4><ul>
<li><p>静态数据成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="keyword">static</span> <span class="keyword">int</span> sCounter = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++ 11 之前在原文件中为静态数据成员分配空间并初始化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Spreadsheet.h&quot;</span></span></span><br><span class="line"><span class="keyword">int</span> Spreadsheet::sCounter = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><em>C++11可以在定义静态数据时给初始值并分配内存，C++11之前不仅要在类定义中列出static类成员并且要在原文件中为其分配内存</em></p>
</li>
<li><p>在方法外访问静态数据成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c = Spreadsheet::sCounter;</span><br></pre></td></tr></table></figure>

<p><em>但是不建议直接访问公有的数据成员，如果要访问请提供<code>get/set</code>方法进行访问</em></p>
</li>
<li><p>常量数据成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kMaxHeight = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kMaxWidth = <span class="number">100</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>引用数据成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetApplication</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	SpreadsheetApplication&amp; mTheApp; <span class="comment">// 引用数据成员</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数初始化引用数据成员</span></span><br><span class="line">Spreadsheet::<span class="built_in">Spreadsheet</span>(<span class="keyword">int</span> inWidth, <span class="keyword">int</span> inHeight, SpreadsheetApplication&amp; theApp):</span><br><span class="line">    <span class="built_in">mWidth</span>(inWidth &lt; kMaxWidth ? inWidth : kMaxWidth),</span><br><span class="line">    <span class="built_in">mHeight</span>(inHeight &lt; kMaxHeight ? inHeight : kMaxHeight),</span><br><span class="line">    <span class="built_in">mTheApp</span>(theApp) &#123;</span><br><span class="line">        mId = sCounter++;</span><br><span class="line">        mCells = <span class="keyword">new</span> SpreadsheetCell* [mWidth];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">            mCells[i] = <span class="keyword">new</span> SpreadsheetCell[mHeight];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制构造函数初始化引用成员</span></span><br><span class="line">Spreadsheet::<span class="built_in">Spreadsheet</span>(<span class="keyword">const</span> Spreadsheet&amp; src) : <span class="built_in">mTheApp</span>(src.mTheApp) &#123;</span><br><span class="line">    mId = sCounter++;</span><br><span class="line">    <span class="built_in">copyFrom</span>(src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>常量引用成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Spreadsheet</span>(<span class="keyword">int</span> inWidth, <span class="keyword">int</span> inHeight, <span class="keyword">const</span> SpreadsheetApplication&amp; theApp);</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="keyword">const</span> SpreadsheetApplication&amp; mTheApp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>常量引用成员只能用于调用成员对象上的常量方法，如果调用非常量方法，编译器会报错</em></p>
</li>
</ul>
<h4 id="3-可以实现的方法的类型"><a href="#3-可以实现的方法的类型" class="headerlink" title="3. 可以实现的方法的类型"></a>3. 可以实现的方法的类型</h4><ul>
<li><p>静态方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">static</span> string <span class="title">doubleToString</span><span class="params">(<span class="keyword">double</span> val)</span></span>; <span class="comment">// 不允许将静态方法声明为const</span></span><br><span class="line">  	<span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">stringToDouble</span><span class="params">(<span class="keyword">const</span> string&amp; str)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现静态方法在方法前面不需要加static关键字，只需要在定义时加就行</span></span><br><span class="line"><span class="function">string <span class="title">SpreadsheetCell::doubleToString</span><span class="params">(<span class="keyword">double</span> val)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">SpreadsheetCell::stringToDouble</span><span class="params">(<span class="keyword">const</span> string&amp; str)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><em>静态方法不属于特定的对象，因此没有<code>this</code>指针，且静态方法内不能访问非静态数据成员</em></p>
</li>
<li><p><code>const</code>方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">double</span> <span class="title">getValue</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  	<span class="function">string <span class="title">getString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em><code>const</code> 方法内不能改变对象内部的值，<code>const</code>对象只能调用<code>const</code>方法，非<code>const</code>对象可以调用<code>const</code>方法以及非<code>const</code>方法</em></p>
<p><strong>mutable数据成员</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="keyword">mutable</span> <span class="keyword">int</span> mNumAccess = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源文件中</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">SpreadsheetCell::getValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  mNumAccess++;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">SpreadsheetCell::getString</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  mNumAccess++;</span><br><span class="line">  <span class="keyword">return</span> mString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><code>mutable</code>修饰的数据成员可以在<code>const</code>方法中修改，<code>const</code>对象也可以修改</em></p>
</li>
</ul>
<h4 id="4-方法重载的细节"><a href="#4-方法重载的细节" class="headerlink" title="4. 方法重载的细节"></a>4. 方法重载的细节</h4><ul>
<li><p>方法重载的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">double</span> inValue)</span></span>;</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> string&amp; inString)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>C++允许根据传递的参数不同进行方法重载，但是不能根据返回值来重载方法</em></p>
<p><em>也可以根据<code>const</code>来重载方法</em></p>
</li>
<li><p>类型隐式转换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyClass obj;</span><br><span class="line">obj.<span class="built_in">foo</span>(<span class="number">1</span>);</span><br><span class="line">obj.<span class="built_in">foo</span>(<span class="number">1.25</span>); <span class="comment">// 1.25被隐式转换成整数1，然后调用foo函数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span> </span>= <span class="keyword">delete</span>; <span class="comment">// 显示删除double类型参数的foo()，可以阻止上述隐式转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-如何使用默认参数"><a href="#5-如何使用默认参数" class="headerlink" title="5. 如何使用默认参数"></a>5. 如何使用默认参数</h4><ul>
<li><p>默认参数的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Spreadsheet</span>(<span class="keyword">int</span> inWidth = kMaxWidth, <span class="keyword">int</span> inHeight = kMaxHeight, <span class="keyword">const</span> SpreadsheetApplication&amp; theApp);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>在类方法声明中指定默认参数，而不能在实现中指定默认参数，在实现中指定默认参数无作用</em></p>
</li>
</ul>
<h4 id="6-内联方法"><a href="#6-内联方法" class="headerlink" title="6. 内联方法"></a>6. 内联方法</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">double</span> <span class="title">SpreadsheetCell::getvalue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  mNumAccess++;</span><br><span class="line">  <span class="keyword">return</span> mValue;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>编译器会将方法体或者函数体插入到调用方法或者函数的位置，<strong>内联比使用<code>#define</code>安全</strong>，调用一个内联函数时，编译器像处理普通函数一样首先做类型安全检查和自动类型转换，如果检查通过，内联函数的代码就会直接替换函数调用，就像宏展开一样。而C语言的宏定义在预处理时只会盲目地做宏展开，不会检查类型安全</em></p>
<p><em>inline关键字应该和实现放在一起而不是和声明放在一起</em></p>
<p><em>由于inline函数相当于宏定义，因此通常将inline函数的实现直接放在头文件中，不写声明</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 另一种内联方式</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">double</span> <span class="title">getValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; mNumAccess++; <span class="keyword">return</span> value; &#125;</span><br><span class="line">  	<span class="function">string <span class="title">getString</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; mNumAccess++; <span class="keyword">return</span> mString; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="7-如何使用嵌套类"><a href="#7-如何使用嵌套类" class="headerlink" title="7. 如何使用嵌套类"></a>7. 如何使用嵌套类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">      <span class="keyword">public</span>:</span><br><span class="line">      	<span class="built_in">SpreadsheetCell</span>();</span><br><span class="line">      	<span class="built_in">SpreadsheetCell</span>(<span class="keyword">double</span> initialValue);</span><br><span class="line">      <span class="keyword">protected</span>:</span><br><span class="line">      	<span class="keyword">double</span> mValue;</span><br><span class="line">      	string mString;</span><br><span class="line">      	<span class="keyword">mutable</span> <span class="keyword">int</span> mNumAccess;</span><br><span class="line">    &#125;;</span><br><span class="line">  	<span class="built_in">Spreadsheet</span>(<span class="keyword">const</span> SpreadsheetApplication&amp; theApp, <span class="keyword">int</span> inWidth = kMaxWidth, <span class="keyword">int</span> inHeight = kMaxHeight);</span><br><span class="line">  	<span class="built_in">Spreadsheet</span>(<span class="keyword">const</span> Spreadsheet&amp; src);</span><br><span class="line">  	~<span class="built_in">Spreadsheet</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套类的构造函数</span></span><br><span class="line">Spreadsheet::SpreadsheetCell::<span class="built_in">SpreadsheetCell</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 嵌套类的赋值运算符</span></span><br><span class="line">Spreadsheet::SpreadsheetCell&amp; Spreadsheet::SpreadsheetCell::<span class="keyword">operator</span>=(<span class="keyword">const</span> SpreadsheetCell&amp; rhs) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 外层类函数的实现</span></span><br><span class="line">Spread::SpreadsheetCell Spreadsheet::<span class="built_in">getCellAt</span>(<span class="keyword">int</span> x, <span class="keyword">int</span> y) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><em>这种语法很冗长，笨拙，可以使用<code>typedef Spreadsheet::SpreadsheetCell SCell</code>重命名为容易管理的名称</em></p>
<h4 id="8-类内的枚举类型"><a href="#8-类内的枚举类型" class="headerlink" title="8. 类内的枚举类型"></a>8. 类内的枚举类型</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span> Red = <span class="number">1</span>, Green, Blue, Yellow &#125; Colors; <span class="comment">// 枚举定义</span></span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">setColor</span><span class="params">(Colors color)</span></span>;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	Colors mColor = Red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="9-如何编写其他类的友元"><a href="#9-如何编写其他类的友元" class="headerlink" title="9. 如何编写其他类的友元"></a>9. 如何编写其他类的友元</h4><ul>
<li><p>友元<code>friend class</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span>;</span> <span class="comment">// 设置 Spreadsheet为 SpreadsheetCell的友元</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>此种设置方式可以让<code>Spreadsheet</code>中使用<code>SpreadsheetCell</code>的<code>private</code>或者<code>protected</code>方法或者成员变量</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="comment">// 设置某一个函数为该类的友元</span></span><br><span class="line">  	<span class="function"><span class="keyword">friend</span> <span class="keyword">void</span> <span class="title">Spreadsheet::setCellAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">const</span> SpreadsheetCell&amp; cell)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>_此种设置方式可以让该函数内部能够使用<code>SpreadsheetCell</code>的<code>private</code>或者<code>protected</code>中的函数或者成员变量 _</p>
</li>
</ul>
<h4 id="10-什么是运算符重载"><a href="#10-什么是运算符重载" class="headerlink" title="10. 什么是运算符重载"></a>10. 什么是运算符重载</h4><ul>
<li>运算符重载的实现</li>
</ul>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="keyword">const</span> SpreadsheetCell <span class="keyword">operator</span>+(<span class="keyword">const</span> SpreadsheetCell&amp; cell) <span class="keyword">const</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> SpreadsheetCell SpreadsheetCell::<span class="keyword">operator</span>+(<span class="keyword">const</span> SpreadsheetCell&amp; cell) <span class="keyword">const</span> &#123;</span><br><span class="line">      SpreadsheetCell newCell;</span><br><span class="line">      newCell.<span class="built_in">set</span>(mValue + cell.mValue);</span><br><span class="line">      <span class="keyword">return</span> newCell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>隐式转换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">SpreadsheetCell newCell = oldCell + <span class="number">5.6f</span>;</span><br></pre></td></tr></table></figure>

<p><em>该示例将<code>5.6f</code>隐式地使用构造函数转换成了<code>SpreadsheetCell</code>对象，再使用<code>operator+</code>运算符运算</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">explicit</span> <span class="title">SpreadsheetCell</span><span class="params">(<span class="keyword">double</span> initialValue)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em><code>explicit</code>关键字表明构造函数不允许隐式转换</em></p>
<p><em>隐式转换只适用于只有一个参数的构造函数</em></p>
</li>
<li><p>运算符左右是什么不影响程序</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 全局运算符重载</span></span><br><span class="line"><span class="keyword">const</span> SpreadsheetCell <span class="keyword">operator</span>+(<span class="keyword">const</span> SpreadsheetCell&amp; lhs, <span class="keyword">const</span> SpreadsheetCell&amp; rhs) &#123;</span><br><span class="line">  SpreadsheetCell newCell;</span><br><span class="line">  newCell.<span class="built_in">set</span>(lhs.value + rhs.value);</span><br><span class="line">  <span class="keyword">return</span> newCell;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>创建具有运算符重载的类型</p>
<p>基本算数运算符、简写算数运算符、比较运算符</p>
</li>
</ul>
<h4 id="11-如何将类的接口与实现分离"><a href="#11-如何将类的接口与实现分离" class="headerlink" title="11. 如何将类的接口与实现分离"></a>11. 如何将类的接口与实现分离</h4><ul>
<li><p>分离接口与实现</p>
<p><em>应该将所有的数据成员设置为<code>protected</code>或者<code>private</code>，并且提供相应的<code>getter/setter</code>方法</em></p>
</li>
<li><p>使用接口类和实现类（接口与实现分离）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetImpl</span> &#123;</span></span><br><span class="line">  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接口类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	SpreadsheetImpl* mImpl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="六、继承技术"><a href="#六、继承技术" class="headerlink" title="六、继承技术"></a>六、继承技术</h2><h4 id="1-如何通过继承扩展类"><a href="#1-如何通过继承扩展类" class="headerlink" title="1. 如何通过继承扩展类"></a>1. 如何通过继承扩展类</h4><ul>
<li><p>扩展类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Super</span>();</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="keyword">int</span> mProtectedInt;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  	<span class="keyword">int</span> mPrivateInt;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Sub</span>();</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">someOtherMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Sub mySub;</span><br><span class="line">sub.<span class="built_in">someMethod</span>();</span><br><span class="line">sub.<span class="built_in">someOtherMethod</span>();</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/C-Learning-blog/inhirit_relationship.jpg" class="" title="继承关系">

<p><em>指向某个对象的指针或者引用可以指向声明类的对象，也可以指向其任意子类的对象</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Super *superPoint = <span class="keyword">new</span> <span class="built_in">Sub</span>(); <span class="comment">// 可以使用子类创建父类对象</span></span><br><span class="line">superPointer-&gt;<span class="built_in">someOtherMethod</span>(); <span class="comment">// 这行代码无法运行，因为对象被编译器看作是Super类型的对象</span></span><br></pre></td></tr></table></figure></li>
<li><p>从子类的角度分析继承</p>
<p><em>子类可以访问在超类中声明的<code>public</code>、<code>protected</code>的方法以及数据成员，不能访问<code>private</code>方法以及数据成员</em></p>
</li>
<li><p>禁用继承（<code>final</code>关键字）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> <span class="keyword">final</span> &#123;</span>&#125;; <span class="comment">// 声明为final 则不允许继承</span></span><br></pre></td></tr></table></figure></li>
<li><p>重写方法（<code>virtual</code>关键字）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Super</span>();</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="keyword">int</span> mProtectedInt;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  	<span class="keyword">int</span> mPrivateInt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>一旦将方法或者析构函数标记为<code>virtual</code>，它们所在的子类就一直是<code>virtual</code>，即使在子类中删除了<code>virtual</code>关键字也同样如此。</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Sub</span>();</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>; <span class="comment">// 依然是重写Super的someMethod()方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>如果指针或者引用指向某个累的对象或者子类的对象，对象本身“知道”自己的所属类，因此只要这个方法声明为<code>virtual</code>，就会自动调用对应的方法。</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Sub mySub;</span><br><span class="line">Super&amp; ref = mySub;</span><br><span class="line">ref.<span class="built_in">someMethod</span>(); <span class="comment">// 这个会调用Sub的someMethod方法</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Sub mySub;</span><br><span class="line">Super&amp; ref = mySub;</span><br><span class="line">mySub.<span class="built_in">someOtherMethod</span>(); <span class="comment">// 这句代码是可以调用的</span></span><br><span class="line">ref.<span class="built_in">someOtherMethod</span>(); <span class="comment">// 这句代码会造成编译失败, 因为Super的引用中没有someOtherMethod()方法</span></span><br></pre></td></tr></table></figure>

<p><em>非指针非引用的对象无法处理子类的特征信息，如果将<code>Sub</code>转换为了<code>Super</code>， 或者将<code>Sub</code>赋值给<code>Super</code>，则这个对象会丢失<code>Sub</code>的所有信息</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Sub mySub;</span><br><span class="line">Super assignedObject = mySub;</span><br><span class="line">assignedObject.<span class="built_in">someMethod</span>();  <span class="comment">// 调用Super&#x27;s version 的someMethod </span></span><br></pre></td></tr></table></figure>

<p><em>超类的指针或者引用指向子类对象时，子类保留其重写方法，但是如果通过类型转换将子类对象转换为超类对象时，此时会丢失其特征，重写方法以及子类数据的丢失就是所谓的截断</em></p>
</li>
<li><p>禁用重写</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Super</span>();</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span> <span class="keyword">final</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-如何使用继承重用代码"><a href="#2-如何使用继承重用代码" class="headerlink" title="2. 如何使用继承重用代码"></a>2. 如何使用继承重用代码</h4><ul>
<li><p>示例</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherPrediction</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setCurrentTempFahrenheit</span><span class="params">(<span class="keyword">int</span> inTemp)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setPositionOfJupiter</span><span class="params">(<span class="keyword">int</span> inDistanceFromMars)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getTomorrowTempFahrenheit</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getChanceOfRain</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">showResult</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> std::string <span class="title">getTemperature</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">int</span> mCurrentTempFahrenheit;</span><br><span class="line">    <span class="keyword">int</span> mDistanceFromMars;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWeatherPrediction</span>:</span> <span class="keyword">public</span> WeatherPrediction &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">setCurrentTempCelsius</span><span class="params">(<span class="keyword">int</span> inTemp)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getTomorrowTempCelsius</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">showResult</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">convertCelsiusToFahrenheight</span><span class="params">(<span class="keyword">int</span> inCelsius)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">convertFahrenheitToCelsius</span><span class="params">(<span class="keyword">int</span> inFahrenheit)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>父类子类的联系</p>
<p>（1）构造函数</p>
<ul>
<li><p>如果某个类具有基类，先执行基类的构造函数</p>
</li>
<li><p>类的非静态数据成员按照声明的顺序创建</p>
</li>
<li><p>执行该类的构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Something</span>() &#123; cout &lt;&lt; <span class="string">&quot;2&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Parent</span>() &#123; cout &lt;&lt; <span class="string">&quot;1&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>:</span> <span class="keyword">public</span> Parent &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Child</span>() &#123; cout &lt;&lt; <span class="string">&quot;3&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Child myChild;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>先调用<code>Parent</code>构造函数打印出<code>1</code>，然后初始化非静态的数据成员<code>Something</code>构造函数打印出<code>2</code>，最后调用<code>Child</code>的构造函数打印出<code>3</code></em></p>
</li>
</ul>
<p> （2）如果父类没有默认构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Super</span>(<span class="keyword">int</span> i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Sub</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sub::<span class="built_in">Sub</span>(): <span class="built_in">Super</span>(<span class="number">7</span>) &#123;&#125; <span class="comment">// 显示地调用父类构造函数</span></span><br></pre></td></tr></table></figure>

<p><em>在父类没有默认构造函数的情况下，要显示地告诉编译器如何调用父类的构造函数（即在子类的构造函数中像初始化数据成员那样链接父类的构造函数），否则代码无法编译</em></p>
<p><em>从子类向父类传递构造函数的参数很正常，但是无法传递子类数据成员，因为子类数据成员在父类的构造函数执行完成之后才会进行初始化，如果这个时候传递了子类的数据成员，会造成不可预知的错误</em></p>
<p>（3）析构函数</p>
<ul>
<li><p>调用类的析构函数</p>
</li>
<li><p>销毁类的数据成员，与创建顺序相反</p>
</li>
<li><p>如果有父类，则再调用父类的析构函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Something</span>() &#123; cout &lt;&lt; <span class="string">&quot;2&quot;</span>; &#125;</span><br><span class="line">  	<span class="keyword">virtual</span> ~<span class="built_in">Something</span>() &#123; cout &lt;&lt; <span class="string">&quot;2&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Parent</span>() &#123; cout &lt;&lt; <span class="string">&quot;1&quot;</span>; &#125;</span><br><span class="line">  	<span class="keyword">virtual</span> ~<span class="built_in">Parent</span>() &#123; cout &lt;&lt; <span class="string">&quot;1&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>:</span> <span class="keyword">public</span> Parent &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Child</span>() &#123; cout &lt;&lt; <span class="string">&quot;3&quot;</span>; &#125;</span><br><span class="line">  	<span class="keyword">virtual</span> ~<span class="built_in">Child</span>() &#123; cout &lt;&lt; <span class="string">&quot;3&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Child myChild;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><strong>注意：所有的析构函数都应该是<code>virtual</code>，如果前面的析构函数没有声明为<code>virtual</code>，代码也可以继续运行，但是如果代码使用<code>delete</code>删除一个实际指向子类的超类指针，析构函数的调用链将被破坏</strong></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Something</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Something</span>() &#123; cout &lt;&lt; <span class="string">&quot;2&quot;</span>; &#125;</span><br><span class="line">  	~<span class="built_in">Something</span>() &#123; cout &lt;&lt; <span class="string">&quot;2&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Parent</span>() &#123; cout &lt;&lt; <span class="string">&quot;1&quot;</span>; &#125;</span><br><span class="line">  	~<span class="built_in">Parent</span>() &#123; cout &lt;&lt; <span class="string">&quot;1&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span>:</span> <span class="keyword">public</span> Parent &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Child</span>() &#123; cout &lt;&lt; <span class="string">&quot;3&quot;</span>; &#125;</span><br><span class="line">  	~<span class="built_in">Child</span>() &#123; cout &lt;&lt; <span class="string">&quot;3&quot;</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Parent* ptr = <span class="keyword">new</span> <span class="built_in">Child</span>();</span><br><span class="line">  <span class="keyword">delete</span> ptr;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>该案例中<code>delete ptr</code>只调用了<code>Parent</code>的析构函数，因为析构函数没有声明为<code>virtual</code>，结果<code>Child</code>的析构函数没有被调用，并且其数据成员的析构函数也没有被调用</em></p>
<h4 id="3-超类以及子类如何交互"><a href="#3-超类以及子类如何交互" class="headerlink" title="3. 超类以及子类如何交互"></a>3. 超类以及子类如何交互</h4></li>
</ul>
</li>
<li><p>使用父类方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeatherPrediction</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> std::string <span class="title">getTemperature</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyWeatherPrediction</span>:</span> <span class="keyword">public</span> WeatherPrediction &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> std::string <span class="title">getTemperature</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">std::string <span class="title">MyWeatherPrediction::getTemperature</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> WeatherPrediction::<span class="built_in">getTemperature</span>() + <span class="string">&quot;F&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>可以使用作用域解析符<code>::</code>来显示地调用父类的相同方法，达到调用父类方法的目的</em></p>
<p><em>在<code>Microsoft Visual C++</code>中支持使用<code>__super</code>关键字，则可被改写为<code>return __super::getTemperature() + &quot;F&quot;</code></em></p>
</li>
<li><p>向上转型和向下转型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Super mySuper = mySub; <span class="comment">// 子类对象赋值给父类对象，产生截断</span></span><br><span class="line">Super&amp; mySuper = mySub; <span class="comment">// 子类对象对父类的引用或者指针赋值，不会产生截断，这种通过父类使用子类的正确途径称为向上转型</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Sub* mySub = static_cast&lt;Sub*&gt;(inSuper); // 强制将父类对象转换为子类，成为向下转型</span></span><br><span class="line">Sub* mySub = <span class="keyword">dynamic_cast</span>&lt;Sub*&gt;(inSuper); <span class="comment">// 向下转型 建议使用 dynamic_cast</span></span><br><span class="line"><span class="keyword">if</span> (mySub != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">  <span class="comment">// 判断是否转型失败为空，再进行操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-如何使用继承实现多态性"><a href="#4-如何使用继承实现多态性" class="headerlink" title="4. 如何使用继承实现多态性"></a>4. 如何使用继承实现多态性</h4><ul>
<li><p>多个类继承</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Baz</span>:</span> <span class="keyword">public</span> Foo, <span class="keyword">public</span> Bar &#123;&#125;;</span><br></pre></td></tr></table></figure>

<p>(1) <code>Baz</code>对象将支持<code>Foo</code> 以及 <code>Bar</code> 的<code>public</code>方法，并包含这两个类的数据成员</p>
<p>(2) <code>Baz</code>类的方法有权访问<code>Foo</code>以及<code>Bar</code>的<code>protected</code>数据成员以及方法</p>
<p>(3) <code>Baz</code>对象可以向上转型为<code>Foo</code>或者<code>Bar</code></p>
<p>(4) 创建新的<code>Baz</code>对象将自动调用<code>Foo</code>以及<code>Bar</code>的默认构造函数，会按照类定义中列出的类顺序进行</p>
<p>(5) 删除<code>Baz</code>对象将自动调用<code>Foo</code>以及<code>Bar</code>类的析构函数，调用顺序与类在类定义中的顺序相反</p>
<img src="/2021/11/25/C-Learning-blog/multiple_inhirit.jpg" class="" title="多重继承示例"></li>
<li><p>名称冲突以及歧义基类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogBird</span>:</span> <span class="keyword">public</span> Dog, <span class="keyword">public</span> Bird &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DogBird myConfusedAnimal;</span><br><span class="line">  <span class="comment">// myConfusedAnimal.eat(); // BUG!!! 歧义，不知道调用哪个 eat 方法</span></span><br><span class="line">  <span class="keyword">static_cast</span>&lt;Dog&gt;(myConfusedAnimal).<span class="built_in">eat</span>();</span><br><span class="line">  myConfusedAnimal.Dog::<span class="built_in">eat</span>(); <span class="comment">// 这两种都可以使用，消除歧义</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DogBird::eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Dog::<span class="built_in">eat</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>歧义基类</p>
<img src="/2021/11/25/C-Learning-blog/ambigous_class.jpg" class="" title="歧义基类">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span> <span class="comment">// 抽象类，所有的方法都设置为纯虚方法</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Woof!&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;The dog has eaten.&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span> <span class="keyword">public</span> Animal &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">chirp</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Chirp!&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;The bird has eaten.&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogBird</span>:</span> <span class="keyword">public</span> Dog, <span class="keyword">public</span> Bird &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123; Dog::<span class="built_in">eat</span>(); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>**<font size=5>虚基类</font>**是处理菱形层次结构顶部类的更好办法</em></p>
</li>
</ul>
<h4 id="5-如何使用多重继承"><a href="#5-如何使用多重继承" class="headerlink" title="5. 如何使用多重继承"></a>5. 如何使用多重继承</h4><ul>
<li><p>如果原始的返回是某个类的指针或者引用。重写的方法可以将返回值改变为子类的指针或者引用，这就是所谓的协变返回类型（<code>covariant return type</code>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cherry</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> Cherry* <span class="title">pick</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BingCherry</span>:</span> <span class="keyword">public</span> Cherry &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> Cherry* <span class="title">pick</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Cherry* <span class="title">BingCherryTree::pick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BingCherry* theCherry = <span class="keyword">new</span> <span class="built_in">BingCherry</span>();</span><br><span class="line">  theCherry-&gt;<span class="built_in">polish</span>();</span><br><span class="line">  <span class="keyword">return</span> theCherry;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可修改为</span></span><br><span class="line"><span class="function">BingCherry* <span class="title">BingCherry::pick</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  BingCherry* theCherry = <span class="keyword">new</span> <span class="built_in">BingCherry</span>();</span><br><span class="line">  theCherry-&gt;<span class="built_in">polish</span>();</span><br><span class="line">  <span class="keyword">return</span> theCherry;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>如果子类声明了一个同样名称的函数并且有一个参数，这个同样名称的函数为新增的函数（不是重写），并且会覆盖掉父类同样名称的函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">(<span class="keyword">int</span> i)</span></span>; <span class="comment">// 此方法会覆盖父类的同名方法</span></span><br><span class="line">  	<span class="keyword">using</span> Super::someMethod; <span class="comment">// 显示的让子类包含这个父类的同名方法可以解决覆盖问题</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>在子类需要重写的方法后面加上关键字<code>override</code>，编译器将会帮你检测是否会有相关错误</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">(<span class="keyword">double</span> inValue)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">(<span class="keyword">double</span> inValue)</span> <span class="keyword">override</span></span>; <span class="comment">// 正确</span></span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">someMethod</span><span class="params">(<span class="keyword">int</span> inValue)</span> <span class="keyword">override</span></span>; <span class="comment">// 错误 编译器会报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>因为加了<code>override</code>关键字代表了子类将要重写父类的函数，但是父类中的函数的传参为<code>double</code>类型，然而子类的函数传参为<code>int</code>类型，则编译器会报错</em></p>
</li>
<li><p>继承构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Super</span>(<span class="keyword">const</span> std::string&amp; str);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Sub</span>(<span class="keyword">int</span> i);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>此时<code>Sub</code>不能使用字符串来创建</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="keyword">using</span> Super::Super;</span><br><span class="line">  	<span class="built_in">Sub</span>(<span class="keyword">int</span> i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sub <span class="title">sub</span><span class="params">(<span class="string">&quot;test&quot;</span>)</span></span>; <span class="comment">// 可以用此方式创建对象</span></span><br></pre></td></tr></table></figure>

<p><em>此时<code>Sub</code>可以使用字符串来创建对象</em></p>
<p><em><code>Sub</code>的构造函数优先级高于继承的构造函数，例如：</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Super</span>(<span class="keyword">const</span> std::string&amp; str);</span><br><span class="line">  	<span class="built_in">Super</span>(<span class="keyword">float</span> f);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="keyword">using</span> Super::Super;</span><br><span class="line">  	<span class="built_in">Sub</span>(<span class="keyword">float</span> f); <span class="comment">// 这个构造函数优先级高于继承Super的同样的构造函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">Sub <span class="title">sub0</span><span class="params">(<span class="string">&quot;test&quot;</span>)</span> <span class="comment">// 执行的是继承Super的构造函数</span></span></span><br><span class="line"><span class="function">Sub <span class="title">sub1</span><span class="params">(<span class="number">1.25</span>)</span></span>; <span class="comment">// 执行的是Sub的构造函数</span></span><br></pre></td></tr></table></figure>

<p><em>使用<code>using</code>从父类继承构造函数有一些限制：一是会继承父类的所有构造函数，二是如果子类有两个父类，而这两个父类有相同的构造函数且具有相同的参数列表，此时不能从父类继承构造函数，因为会造成歧义，解决这个歧义问题可在子类显示的声明冲突的构造函数</em></p>
</li>
<li><p>静态父类方法</p>
<p><em>C++中无法重写静态方法</em></p>
<p><em>静态方法属于定义它的类名称，而不属于特定的对象，当类中的方法调用静态方法时，所调用的版本是通过正常的名称解析来决定的。当使用对象调用时，对象实际上并不涉及调用，只是用来判断类型的。</em></p>
</li>
<li><p>父类方法被重载</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">overload</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Super&#x27;s overload()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">overload</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Super&#x27;s overload(int i)&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">overload</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Sub&#x27;s overload()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>此时如果直接使用<code>Sub</code> 调用<code>overload(int i)</code>方法，就会报错，因为<code>Sub</code>没有显示的重写这个方法，但是使用<code>Sub</code>指向<code>Super</code>对象的指针或者引用是可行的</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="keyword">using</span> Super::overload;</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">overload</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Sub&#x27;s overload()&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>此时显示的声明<code>using Super::overload</code>避免了重载该方法的所有版本，就可以直接使用<code>Sub</code>调用<code>overload(int i)</code>方法，但是使用<code>using</code>有一定风险，如果在<code>Super</code>中添加了第三个<code>overload</code>方法，并且本来应该在<code>Sub</code>中重写这个方法，使用了<code>using</code>之后，在<code>Sub</code>中没有重写这个方法就不会被当作是错误，<code>Sub</code>类显式地说明将接受父类其他所有重载方法</em></p>
</li>
<li><p><code>private</code>或者<code>protected</code>父类方法<br>重写<code>private</code>或者<code>protected</code>方法没有问题，子类无法调用父类的<code>private</code>方法但是可以重写<code>private</code>方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MilesEstimator</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getMilesLeft</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">getMilesPerGallon</span>() * <span class="built_in">getGallonsLeft</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">getGallonsLeft</span><span class="params">(<span class="keyword">int</span> inValue)</span> </span>&#123; mGallonsLeft = inValue; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getGallonsLeft</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mGallonsLeft; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">int</span> mGallonsLeft;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getMilesPerGallon</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">20</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EfficientCarMilesEstimator</span>:</span> <span class="keyword">public</span> MilesEstimator &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getMilesPerGallon</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">35</span>; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>当使用子类<code>EfficientCarMilesEstimator</code>调用<code>getMilesPerGallong()</code>方法时会自动调用重写过后的版本</em></p>
</li>
<li><p>父类方法具有默认参数</p>
<p>子类与父类可以具有不同的默认参数，但使用的参数取决于声明的变量类型，而不是底层的对象</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> i = <span class="number">2</span>)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Super&#x27;s go with i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">(<span class="keyword">int</span> i = <span class="number">7</span>)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Sub&#x27;s go with i = &quot;</span> &lt;&lt; i &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>如果实际指向<code>Sub</code>对象的<code>Super</code>指针或者引用调用<code>go()</code>则将调用<code>Super</code>版本的<code>go()</code>，C++根据描述对象的表达式类型绑定默认参数，而不是根据实际对象的类型绑定参数</em></p>
</li>
<li><p>子类方法具有不同的访问级别</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Gregarious</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Gregarious says hi!&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shy</span>:</span> <span class="keyword">public</span> Gregarious &#123;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">talk</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Shy reluctantly says hello.&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>此时使用<code>Shy</code>调用<code>talk()</code>会报错，因为重写过后的<code>tals()</code>属于<code>protected</code></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Secret</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dontTell</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I&#x27;ll never tell.&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blabber</span>:</span> <span class="keyword">public</span> Secret &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">tell</span><span class="params">()</span> </span>&#123; <span class="built_in">dontTell</span>(); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>使用<code>public</code>方法调用父类的<code>dontTell()</code>方法</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Secret</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dontTell</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I&#x27;ll never tell.&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Blabber</span>:</span> <span class="keyword">public</span> Secret &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">dontTell</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;I&#x27;ll tell all!&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>直接重写<code>protected</code>方法为<code>public</code>方法，子类可以直接调用，父类或者父类的引用都不能调用</em></p>
</li>
<li><p>子类的复制构造函数以及赋值运算符</p>
<p><em>子类中的复制构造函数需要显示地链接到父类的复制构造函数，赋值运算函数需要调用父类的<code>operator=</code></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Super</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Super</span>();</span><br><span class="line">  	<span class="built_in">Super</span>(<span class="keyword">const</span> Super&amp; inSuper);</span><br><span class="line">  	Super&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Super&amp; inSuper);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sub</span>:</span> <span class="keyword">public</span> Super &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Sub</span>();</span><br><span class="line">  	<span class="built_in">Sub</span>(<span class="keyword">const</span> Sub&amp; inSub);</span><br><span class="line">  	Sub&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Sub&amp; inSub);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Sub::<span class="built_in">Sub</span>(<span class="keyword">const</span> Sub&amp; inSub) : <span class="built_in">Super</span>(inSub) &#123;&#125;</span><br><span class="line">Sub&amp; Sub::<span class="keyword">operator</span>=(<span class="keyword">const</span> Sub&amp; inSub) &#123;</span><br><span class="line">  <span class="keyword">if</span> (&amp;inSub == <span class="keyword">this</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  Super::<span class="keyword">operator</span>=(inSub);</span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>virtual</code>的真相</p>
<p><em>C++编译类的时候，会创建一个包含类所有数据成员以及方法的二进制对象</em></p>
<p><em>在非虚的情况下，将控制交给正确的方法的代码是硬编码，此时会根据编译时类型调用方法</em></p>
<p><em>如果方法被声明为虚的，会使用名为虚表（<code>vtable</code>）的特定内存区域调用正确的实现，每个具有一个或者多个虚方法的类都有一张虚表（<code>vtable</code>），虚表中包含了指向虚方法实现的指针，通过这种方法，当使用某个对象调用方法的时候，指针也进入虚表（<code>vtable</code>）然后根据实际的对象类型执行正确版本的方法</em></p>
<img src="/2021/11/25/C-Learning-blog/virtual_table.jpg" class="" title="虚表的高级视图"></li>
<li><p>使用<code>virtual</code>的理由</p>
<p><em>建议将所有的方法都声明为<code>virtual</code></em></p>
<p><em>析构函数应该都声明为<code>virtual</code></em></p>
</li>
<li><p>非<code>public</code>继承</p>
<p><em>如果是<code>protected</code>继承，则父类的所有数据成员以及方法都是<code>protected</code>或者是<code>private</code></em></p>
<p><em>如果是<code>private</code>继承，则父类所有的数据成员以及方法都是<code>private</code></em></p>
</li>
<li><p>虚基类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Dog</span>:</span> <span class="keyword">public</span> <span class="keyword">virtual</span> Animal &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">bark</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;woof!&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;The dog has eaten.&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bird</span>:</span> <span class="keyword">public</span> <span class="keyword">virtual</span> Animal &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">chirp</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;Chirp!&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;The bird has eaten.&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DogBird</span>:</span> <span class="keyword">public</span> Dog, <span class="keyword">public</span> Bird &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123; Dog::<span class="built_in">eat</span>(); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  DogBird myConfusedAnimal;</span><br><span class="line">  myConfusedAnimal.<span class="built_in">sleep</span>(); <span class="comment">// 不会造成歧义，因为Animal是虚基类</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="七、C-的灵活性"><a href="#七、C-的灵活性" class="headerlink" title="七、C++的灵活性"></a>七、C++的灵活性</h2><h4 id="1-引用"><a href="#1-引用" class="headerlink" title="1. 引用"></a>1. 引用</h4><ul>
<li><p>引用变量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; xRef = x; <span class="comment">// 当xRef修改时，x也会被修改</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp; emptyRef; <span class="comment">// 错误❌，无法在类外面声明一个引用而不初始化</span></span><br></pre></td></tr></table></figure></li>
<li><p>修改引用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>, y = <span class="number">4</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; xRef = x;</span><br><span class="line">xRef = y; <span class="comment">// 这句代码是修改xRef和x的值为y的值</span></span><br><span class="line">xRef = &amp;y; <span class="comment">// 错误❌，无法编译，引用本身无法被修改</span></span><br></pre></td></tr></table></figure></li>
<li><p>指针的引用以及指向引用的指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* intP;</span><br><span class="line"><span class="keyword">int</span>*&amp; ptrRef = intP; <span class="comment">// ptrRef就是指向指针的引用</span></span><br><span class="line">preRef = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line">*ptrRef = <span class="number">5</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; xRef = x;</span><br><span class="line"><span class="keyword">int</span> * xPtr = &amp;xRef; <span class="comment">// 对引用取地址的结果与对被引用变量取地址的结果相同</span></span><br><span class="line">*xPtr = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="string">&quot;x: &quot;</span> &lt;&lt; x &lt;&lt; <span class="string">&quot; address: &quot;</span> &lt;&lt; &amp;x &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;xRef&quot;</span> &lt;&lt; xRef &lt;&lt; <span class="string">&quot; address: &quot;</span> &lt;&lt; &amp;xRef &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;xPtr: &quot;</span> &lt;&lt; *xPtr &lt;&lt; <span class="string">&quot; address: &quot;</span> &lt;&lt; xPtr &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">打印出来的结果是：</span><br><span class="line">x:    <span class="number">100</span> address: <span class="number">0x7ff7bfeff34c</span></span><br><span class="line">xRef: <span class="number">100</span> address: <span class="number">0x7ff7bfeff34c</span></span><br><span class="line">xPtr: <span class="number">100</span> address: <span class="number">0x7ff7bfeff34c</span></span><br></pre></td></tr></table></figure>

<p><em>C++中无法声明引用的引用，或者指向引用的指针</em></p>
</li>
<li><p>引用数据成员</p>
<p><em>在类中的引用数据成员必须在构造函数中初始化</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">MyClass</span>(<span class="keyword">int</span>&amp; ref) : <span class="built_in">mRef</span>(ref) &#123;&#125;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="keyword">int</span>&amp; mRef;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>引用参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">swap</span><span class="params">(<span class="keyword">int</span>&amp; first, <span class="keyword">int</span>&amp; second)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> tem = first;</span><br><span class="line">  firt = second;</span><br><span class="line">  second = temp;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>, y = <span class="number">6</span>;</span><br><span class="line"><span class="built_in">swap</span>(x, y);</span><br><span class="line"><span class="built_in">swap</span>(<span class="number">3</span>, <span class="number">4</span>); <span class="comment">// 错误❌，不能将文本作为参数传递给按引用传递参数的函数</span></span><br></pre></td></tr></table></figure></li>
<li><p>指针转换为引用</p>
<p><em>可以使用<code>*</code>对指针解除引用，从而将指针“转换”为引用</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> x = <span class="number">5</span>, y = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> *xp = &amp;x, *yp = &amp;y;</span><br><span class="line"><span class="built_in">swap</span>(*xp, *yp);</span><br></pre></td></tr></table></figure></li>
<li><p>按引用传递与按值传递</p>
<p>(1) 效率对比：复制较大的对象或者结构需要较长的时间，按引用传递只是把指向对象或者结构的指针传递给函数</p>
<p>(2) 正确性对比：并非所有的对象都允许按值传递，即使允许按值传递的对象也不支持正确的深度复制（为了支持深度复制，具有随机分配内存的对象必须提供自定义的复制构造函数）</p>
<p><em>只有参数是简单的内建类型（例如<code>int</code>或者<code>double</code>）并且不需要修改参数的情况下，才应该使用按值传递，其他所有情况都应该使用按引用传递</em></p>
</li>
<li><p>使用指针还是引用</p>
<p><em>考虑谁拥有内存，如果接受变量的代码负责释放内存，则需要使用对象的指针，反之则使用引用</em></p>
<p><em>如果不需要改变所指的地址，则使用引用，反之使用指针</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个常规的例子</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seperateOddsAndEvens</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> arr[], <span class="keyword">int</span> size, <span class="keyword">int</span>** odds, <span class="keyword">int</span>* numOdds, <span class="keyword">int</span>** evens, <span class="keyword">int</span>* numEvens)</span> </span>&#123;</span><br><span class="line">  *numOdds = *numEvens = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">      (*numOdds)++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      (*numEvens)++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  *odds = <span class="keyword">new</span> <span class="keyword">int</span>[*numOdds];</span><br><span class="line">  *evens = <span class="keyword">new</span> <span class="keyword">int</span>[*numEvens];</span><br><span class="line">  <span class="keyword">int</span> oddsPos = <span class="number">0</span>, evensPos = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">      (*odds)[oddsPos++] = arr[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      (*evens)[evensPos++] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 此函数的后面四个参数其实应该是“引用”参数，如果使用指针的话则在函数体内必需使用*解除引用，这样就很难看，现修改函数元英如下</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seperateOddsAndEvens</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> arr[], <span class="keyword">int</span> size, <span class="keyword">int</span>*&amp; odds, <span class="keyword">int</span>&amp; numOdds, <span class="keyword">int</span>*&amp; evens, <span class="keyword">int</span>&amp; numEvens)</span> </span>&#123;</span><br><span class="line">  numOdds = numEvens = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">      numOdds++;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      numEvens++;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  odds = <span class="keyword">new</span> <span class="keyword">int</span>[numOdds];</span><br><span class="line">  evens = <span class="keyword">new</span> <span class="keyword">int</span>[numEvens];</span><br><span class="line">  <span class="keyword">int</span> oddsPos = <span class="number">0</span>, evensPos = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">      odds[oddsPos++] = arr[i];</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      evens[evensPos++] = arr[i];</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者使用STL向量容器</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">seperateOddsAndEvens</span><span class="params">(<span class="keyword">const</span> vector&lt;<span class="keyword">int</span>&gt;&amp; arr, vector&lt;<span class="keyword">int</span>&gt;&amp; odds, vector&lt;<span class="keyword">int</span>&gt;&amp; evens)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : arr) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span>) &#123;</span><br><span class="line">      odds.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      evens.<span class="built_in">push_back</span>(i);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>右值引用</p>
<p><em>右值引用的目的是提供一些涉及临时对象时可以选用的特定方法（主要是复制构造函数以及<code>operator=</code>，但并不局限于此）。由于知道临时对象会被销毁，通过右值引用，某些涉及复制大量值的操作可以通过简单地复制指向这些值的指针实现</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp; i = <span class="number">2</span>; <span class="comment">// 不合法</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>&amp; j = a + b; <span class="comment">// 不合法</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>&amp;&amp; i = <span class="number">2</span>; <span class="comment">// 合法</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">2</span>, b = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span>&amp;&amp; j = a + b; <span class="comment">// 合法</span></span><br></pre></td></tr></table></figure></li>
<li><p>移动语义（<code>move semantics</code>）</p>
<p><em>移动构造函数和移动赋值运算符</em></p>
<p><em>如果第二个对象是在复制或者赋值结束后被销毁的对象，编译器就会使用这两个方法，移动构造函数以及移动赋值运算符将成员变量从源对象复制到新对象，然后将源对象变量的值设置为空值。这样做实际上将内存所有权从一个对象移到另一个对象，这两个方法基本上只对成员变量进行表层复制（<code>shallow copy</code>），然后转换已分配内存的所有权，从而阻止悬挂指针以及内存泄漏</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Spreadsheet</span>(Spreadsheet&amp;&amp; src); <span class="comment">// 移动构造函数</span></span><br><span class="line">  	Spreadsheet&amp; <span class="keyword">operator</span>=(Spreadsheet&amp;&amp; rhs); <span class="comment">// 移动赋值运算符</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Spreadsheet::<span class="built_in">Spreadsheet</span>(Spraedsheet&amp;&amp; src) &#123;</span><br><span class="line">  mWidth = src.mWidth;</span><br><span class="line">  mHeight = src.mHeight;</span><br><span class="line">  mCells = src.mCells;</span><br><span class="line">  src.mWidth = <span class="number">0</span>;</span><br><span class="line">  stc.mHeight = <span class="number">0</span>;</span><br><span class="line">  src.mCells = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Spreadsheet&amp; Spreadsheet::<span class="keyword">operator</span>=(Spreadsheet&amp;&amp; rhs) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">    <span class="keyword">delete</span>[] mCells[i];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span>[] mCells;</span><br><span class="line">  mCells = <span class="literal">nullptr</span>;</span><br><span class="line">  mWidth = rhs.mWidth;</span><br><span class="line">  mHeight = rhs.mHeight;</span><br><span class="line">  mCells = rhs.mCells;</span><br><span class="line">  rhs.mWidth = <span class="number">0</span>;</span><br><span class="line">  rhs.mHeight = <span class="number">0</span>;</span><br><span class="line">  rhs.mCells = <span class="literal">nullptr</span>; <span class="comment">// 将源对象的mCells指针设置为空指针，防止源对象析构函数释放这块内存，因为新的对象现在拥有了这块内存</span></span><br><span class="line">  <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>从这两个移动构造函数和移动赋值运算符的实现可以看出这两个函数内部不需要任何内存分配，如果<code>Spreadsheet</code>对象拥有10000（100 * 100）个元素，复制构造函数和赋值运算符需要101次的内存分配，所以某些情况下使用移动语义可以大幅提高性能</em></p>
</li>
</ul>
<h4 id="2-关键字"><a href="#2-关键字" class="headerlink" title="2. 关键字"></a>2. 关键字</h4><ul>
<li><p><code>const</code>关键字</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> * <span class="keyword">const</span> ip = <span class="literal">nullptr</span>;</span><br><span class="line"><span class="keyword">int</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span>&amp; ip = x;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getValue</span><span class="params">()</span> <span class="keyword">const</span></span>; <span class="comment">// 禁止函数体内修改类的任何非可变数据成员</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>constexpr</code>关键字</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">int</span> <span class="title">getArraySize</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">32</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> mArray[<span class="built_in">getArraySize</span>()]; <span class="comment">// 这是不合法的语句</span></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用 constexpr</span></span><br><span class="line"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="built_in">getArraySize</span>() &#123; <span class="keyword">return</span> <span class="number">32</span>; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> myArraySize[<span class="built_in">getArraySize</span>()];</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><code>constexpr</code>好处是在编译器编译过程中可以更好的优化代码</em></p>
<p><em>但是函数声明为<code>constexpr</code>对函数的行为施加了一些限制：</em></p>
<p><em>1. 如果<code>constexpr</code>函数是类的一个成员，这个函数就不能是虚函数</em></p>
<p><em>2. 函数的返回类型应该是文本类型或者文本类型的引用，返回值不能是<code>void</code></em></p>
<p><em>3. 函数的所有参数都应该是文本类型或者文本类型的引用</em></p>
<p><em>4. 函数体的形式应该是<code>&#123; return expression; &#125;</code>，当参数替换之后，<code>expression</code>是一个文本表达式，允许<code>expresion</code>调用其他的<code>constexpr</code>函数</em></p>
<p><em>5. 在编译单元(<code>translation unit</code>)中定义了<code>constexpr</code>函数之后，才能调用这个函数，因为编译器需要知道完整的定义</em></p>
<p><em>通过<code>constexpr</code>定义构造函数，应该满足以下要求：</em></p>
<p><em>1. 构造函数的所有参数都应该是文本类型或者文本类型的引用</em></p>
<p><em>2. 构造函数体不应该是<code>function-try-block</code></em></p>
<p><em>3. 构造函数体应该是空的</em></p>
<p><em>4. 所有数据成员都应该用文本表达式初始化</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">constexpr</span> <span class="title">Rect</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span> : mWidth(width), mHeight(height) &#123;</span>&#125;</span><br><span class="line">  	<span class="function"><span class="keyword">constexpr</span> <span class="keyword">int</span> <span class="title">getArea</span><span class="params">()</span> cosnt </span>&#123; <span class="keyword">return</span> mWidth * mHeight; &#125;</span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  	<span class="keyword">int</span> mWidth, mHeight;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用这个类声明的`constexpr`对象相当直接</span></span><br><span class="line"><span class="function"><span class="keyword">constexpr</span> Rect <span class="title">r</span><span class="params">(<span class="number">8</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> myArray[r.<span class="built_in">getArea</span>()];</span><br></pre></td></tr></table></figure></li>
<li><p><code>static</code>关键字</p>
<p>(1) 静态数据成员以及方法</p>
<p>静态数据成员不是对象的一部分，静态方法类似是属于类层次（而不是对象层次），静态方法不会再某个特定对象环境中执行。</p>
<p>(2) 静态链接（<code>static Linkage</code>）</p>
<p><em>C++中链接：C++中的每个源文件都是单独编译的，编译得到的目标文件会彼此链接（C++源文件中的每个名称，包括函数以及全局变量都有一个内部或者外部的链接）</em></p>
<p><em>外部链接：意味着这个名称在其他源文件中也有效</em></p>
<p><em>内部链接（静态链接）：意味着在其他源文件中无效</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">staticLinkageFunction</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">staticLinkageFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;This is a static linkage function!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用匿名名称空间</span></span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">staticLinkageFunction</span><span class="params">()</span></span>;</span><br><span class="line">  <span class="function"><span class="keyword">void</span> <span class="title">staticLinkageFunction</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;This is a static linkage function!&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>这个示例中<code>staticLinkageFunction</code>函数在其他的源文件中是不能调用的，因为被声明成了<code>static</code>，属于内部（静态）链接，而使用匿名名称空间跟使用<code>static</code>关键字是一样的效果</em></p>
<p><em>哪些实体拥有内部链接：</em></p>
<p>​    （1）<code>static</code>全局变量，<code>static</code>函数，友元函数定义</p>
<p>​    （2）类的定义</p>
<p>​    （3）内联函数定义</p>
<p>​    （4）<code>Union</code>共同体定义</p>
<p>​    （5）命名空间的<code>const</code>常量定义</p>
<p>​    （6）枚举类型定义</p>
<p>​    （7）所有的声明</p>
</li>
<li><p><code>extern</code>关键字 <em>外部链接</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 一个cpp文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> x = <span class="number">5</span>; <span class="comment">// 使用外部链接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外一个文件</span></span><br><span class="line"><span class="keyword">extern</span> <span class="keyword">int</span> x;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  cout &lt;&lt; x &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><code>extern</code>关键字可以让多个源文件访问这个关键字修饰的全局变量</em></p>
</li>
<li><p>函数中的静态变量</p>
</li>
<li><p>非局部变量的初始化顺序</p>
<p><em>程序中所有的全局变量以及类的静态数据成员都会在<code>main()</code>开始之前初始化</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="keyword">static</span> <span class="keyword">int</span> x;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Demo::x = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">int</span> y = <span class="number">4</span>;</span><br></pre></td></tr></table></figure>

<p><em>这个例子中<code>Demo::x</code>一定会在<code>y</code>之前初始化</em></p>
</li>
</ul>
<h4 id="3-类型以及类型转换"><a href="#3-类型以及类型转换" class="headerlink" title="3. 类型以及类型转换"></a>3. 类型以及类型转换</h4><ul>
<li><p><code>typedef</code></p>
<p><code>typedef int* IntPtr;</code> 声明一个新的名称（别名）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>* p1;</span><br><span class="line">IntPtr p2; <span class="comment">// 这两个都是合法的</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> std::vector&lt;std::string&gt; StringVector; <span class="comment">// 简写便于管理</span></span><br></pre></td></tr></table></figure>

<p><em>实际上<code>string</code>是<code>typedef basic_string&lt;char&gt; string;</code></em></p>
</li>
<li><p>函数指针<code>typedef</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __stdcall <span class="title">MyFunc</span><span class="params">(<span class="keyword">bool</span> b, <span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(__stdcall *MyFuncProc)</span><span class="params">(<span class="keyword">bool</span> b, <span class="keyword">int</span> n, <span class="keyword">const</span> <span class="keyword">char</span>* p)</span></span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">MyFuncProc MyProc = ::<span class="built_in">GetProcAddress</span>(lib, <span class="string">&quot;MyFunc&quot;</span>);</span><br><span class="line"><span class="built_in">MyProc</span>(<span class="literal">true</span>, <span class="number">3</span>, <span class="string">&quot;Hello World&quot;</span>);</span><br></pre></td></tr></table></figure></li>
<li><p>类型别名</p>
<p><code>using MyInt = int</code> 与<code>typedef int MyInt</code>等效</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">someFunction</span><span class="params">(<span class="keyword">char</span> c, <span class="keyword">double</span> d)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 普通的定义一个函数指针</span></span><br><span class="line"><span class="built_in"><span class="keyword">int</span></span> (*pFunc)(<span class="keyword">char</span>, <span class="keyword">double</span>) = &amp;someFunction;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用类型别名</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(*FuncType)</span><span class="params">(<span class="keyword">char</span>, <span class="keyword">double</span>)</span></span>;</span><br><span class="line">FuncType pFunc = &amp;someFunction;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 另外一种写法</span></span><br><span class="line"><span class="keyword">using</span> FuncType = <span class="built_in"><span class="keyword">int</span></span> (*)(<span class="keyword">char</span>, <span class="keyword">double</span>);</span><br><span class="line">FuncType pFunc = &amp;someFunction;</span><br></pre></td></tr></table></figure></li>
<li><p>类型转换</p>
<p>(1) <code>const_cast</code> （舍弃文本特性的类型转换）</p>
<p>某个函数采用了<code>cosnt</code>变量，但是又要将这个变量传递给非<code>const</code>变量做参数的函数，这个时候就需要<code>const_cast</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">extern</span> <span class="keyword">void</span> <span class="title">ThirdPartyLibraryMethod</span><span class="params">(<span class="keyword">char</span>* str)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">f</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">ThirdPartyLibraryMethod</span>(<span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(str));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(2) <code>static_cast</code></p>
<p>显式的执行<code>c++</code>语言直接支持的转换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> i = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">double</span> result = <span class="keyword">static_cast</span>&lt;<span class="keyword">double</span>&gt;(i) / <span class="number">10</span>;</span><br></pre></td></tr></table></figure>

<p>另一种用法是在继承层次结构中执行向下转换，例如：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Base</span>();</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Derived</span>:</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Derived</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  Base* b;</span><br><span class="line">  Derived* d = <span class="keyword">new</span> <span class="built_in">Derived</span>();</span><br><span class="line">  b = d; <span class="comment">// 向上转换不需要static_cast</span></span><br><span class="line">  d = static_caset&lt;Derived*&gt;(b); <span class="comment">// 继承层次中向下转换需要static_cast</span></span><br><span class="line">  Base base;</span><br><span class="line">  Derived derived;</span><br><span class="line">  Base&amp; br = derived;</span><br><span class="line">  Derived&amp; dr = <span class="keyword">static_cast</span>&lt;Derived&amp;&gt;(br);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>这种类型转换可以用于指针以及引用，而不是用于对象本身</em></p>
<p><em><code>static_cast</code>类型转换不执行运行期类型检测，运用不当可能造成不可预知的错误，例如：</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Base* b = <span class="keyword">new</span> <span class="built_in">Base</span>();</span><br><span class="line">Derived* d = <span class="keyword">static_cast</span>&lt;Derived*&gt;(b); <span class="comment">// 这种转换可能造成内存开销超出对象的边界</span></span><br></pre></td></tr></table></figure>

<p>(3) <code>reinterpret_cast</code></p>
<p>可以将某种类型的指针转换为另一种类型的指针，即使这两个指针并无继承层次上的关系，这个关键字经常用于将指针转换为<code>void*</code>及其相反的过程</p>
<p><em>使用<code>reinterpret_cast</code>一样要小心，因为在执行转换时不会执行任何类型检测</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">X</span> &#123;</span>&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Y</span> &#123;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  X x;</span><br><span class="line">  Y y;</span><br><span class="line">  X* xp = &amp;x;</span><br><span class="line">  Y* yp = &amp;y;</span><br><span class="line">  xp = <span class="keyword">reinterpret_cast</span>&lt;X*&gt;(yp);</span><br><span class="line">  <span class="keyword">void</span>* p = <span class="keyword">reinterpret_cast</span>&lt;<span class="keyword">void</span>*&gt;(xp);</span><br><span class="line">  xp = <span class="keyword">reinterpret_cast</span>&lt;X*&gt;(p);</span><br><span class="line">  </span><br><span class="line">  X&amp; xr = x;</span><br><span class="line">  Y&amp; yr = <span class="keyword">reinterpret_cast</span>&lt;Y&amp;&gt;(x);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>(4) <code>dynamic_cast</code></p>
<p><em><code>dynamic_cast</code>为继承层次结构内的类型转换提供运行时检测，可以用来转换指针或者引用，<code>dynamic_cast</code>在运行时检测底层对象的类型信息，如果类型转换无意义，<code>dynamic_cast</code>就会返回一个空指针（用于指针）或者抛出一个<code>bad_cast</code>异常（用于引用）</em></p>
<p><em><strong>注意：为了使用<code>dynamic_cast</code>，类至少要拥有一个虚方法，如果类没有虚表，尝试使用<code>dynamic_cast</code>会导致编译错误，因为运行时类型信息存储在对象的虚表中</strong></em></p>
<p>(5) 总结</p>
<p>不同情形下应该使用的类型转换</p>
<table>
<thead>
<tr>
<th align="center">情形</th>
<th align="center">类型转换</th>
</tr>
</thead>
<tbody><tr>
<td align="center">删除<code>const</code>特性</td>
<td align="center"><code>const_cast</code></td>
</tr>
<tr>
<td align="center">显式地执行语言支持的类型转换（如，<code>int</code>转<code>double</code>）</td>
<td align="center"><code>static_cast</code></td>
</tr>
<tr>
<td align="center">显式地执行用户自定义构造函数或者<strong>转换利程</strong>所支持的类型转换</td>
<td align="center"><code>static_cast</code></td>
</tr>
<tr>
<td align="center">将某个类的对象转换为其他（无关）类的对象</td>
<td align="center"><strong>无法完成</strong></td>
</tr>
<tr>
<td align="center">某个类对象的指针转换为同一继承层次结构中其他类对象的指针</td>
<td align="center"><code>static_cast</code>、<code>dynamic_cast</code></td>
</tr>
<tr>
<td align="center">某个类对象的引用转换为同一继承层次结构中其他类对象的引用</td>
<td align="center"><code>static_cast</code>、<code>dynamic_cast</code></td>
</tr>
<tr>
<td align="center">某种类型的指针转换为其他无关类型的指针</td>
<td align="center"><code>reinterpret_cast</code></td>
</tr>
<tr>
<td align="center">某种类型的引用转换为其他无关类型的引用</td>
<td align="center"><code>reinterpret_cast</code></td>
</tr>
<tr>
<td align="center">某个函数指针转换为其他函数指针</td>
<td align="center"><code>reinterpret_cast</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="4-作用域解析"><a href="#4-作用域解析" class="headerlink" title="4. 作用域解析"></a>4. 作用域解析</h4><p><em>程序中所有名称，包括变量、函数以及类名称，都具有某种作用域，也可以使用名称空间、函数定义以及类定义创建作用域。</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">5</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">10</span>; &#125;</span><br><span class="line"><span class="keyword">namespace</span> NS &#123;</span><br><span class="line">  <span class="function"><span class="keyword">int</span> <span class="title">get</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> <span class="number">20</span>; &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Demo* pd = <span class="keyword">new</span> <span class="built_in">Demo</span>();</span><br><span class="line">Demo d;</span><br><span class="line">cout &lt;&lt; pd-&gt;<span class="built_in">get</span>() &lt;&lt; endl; <span class="comment">// 5</span></span><br><span class="line">cout &lt;&lt; d.<span class="built_in">get</span>() &lt;&lt; endl; <span class="comment">// 5</span></span><br><span class="line">cout &lt;&lt; NS::<span class="built_in">get</span>() &lt;&lt; endl; <span class="comment">// 20</span></span><br><span class="line">cout &lt;&lt; Demo::<span class="built_in">get</span>() &lt;&lt; endl; <span class="comment">// 5</span></span><br><span class="line">cout &lt;&lt; ::<span class="built_in">get</span>() &lt;&lt; endl; <span class="comment">// 10</span></span><br><span class="line">cout &lt;&lt; <span class="built_in">get</span>() &lt;&lt; endl; <span class="comment">// 10</span></span><br></pre></td></tr></table></figure>

<h4 id="5-其他特性"><a href="#5-其他特性" class="headerlink" title="5. 其他特性"></a>5. 其他特性</h4><ul>
<li><p><code>auto</code>关键字（可选函数语法）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span> -&gt; <span class="keyword">int</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> i + <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">auto</span> <span class="title">main</span><span class="params">()</span> -&gt; <span class="keyword">int</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>空指针文本 <code>nullptr</code></p>
<p><em><code>NULL</code>与整数0相同，如果需要使用空指针文本则使用<code>nullptr</code></em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span>* str)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;char* version&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> i)</span> </span>&#123; cout &lt;&lt; <span class="string">&quot;int version&quot;</span> &lt;&lt; endl; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">func</span>(<span class="literal">NULL</span>); <span class="comment">// 调用的是int版本的函数</span></span><br><span class="line">  <span class="built_in">func</span>(<span class="literal">nullptr</span>); <span class="comment">// 调用的是char*版本的函数</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>尖括号</p>
<p><em><code>&gt;&gt;</code>可以是右移运算符，也可以是流析取运算符</em></p>
</li>
<li><p>初始化列表（<code>initializer_list</code>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;initializer_list&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">makeSum</span><span class="params">(initializer_list&lt;<span class="keyword">int</span>&gt; list)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> total = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span>&amp; iter = list.<span class="built_in">begin</span>(); iter != list.<span class="built_in">end</span>(); ++iter) &#123;</span><br><span class="line">    total += iter;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> total;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>显示转换运算符</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntWrapper</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">IntWrapper</span>(<span class="keyword">int</span> i) : <span class="built_in">mInt</span>(i) &#123;&#125;</span><br><span class="line">  	<span class="function"><span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mInt; &#125; <span class="comment">// 转换运算符</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  	<span class="keyword">int</span> mInt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">IntWrapper <span class="title">intValue</span><span class="params">(<span class="number">123</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> tempValue = intValue; <span class="comment">// 也可以显示的告诉编译器调用int()转换运算符 int tempValue = int(intvalue);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 禁止隐式转换</span></span><br><span class="line"><span class="function"><span class="keyword">explicit</span> <span class="keyword">operator</span> <span class="title">int</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mInt; &#125;</span><br><span class="line"><span class="function">IntWrapper <span class="title">value</span><span class="params">(<span class="number">123</span>)</span></span>;</span><br><span class="line"><span class="keyword">int</span> tempValue = value; <span class="comment">// 错误❌，声明中使用了explicit关键字 代表只能显式的使用，不能进行隐式转换</span></span><br><span class="line"><span class="keyword">int</span> tempValue = <span class="built_in"><span class="keyword">int</span></span>(value); <span class="comment">// 正确✅</span></span><br></pre></td></tr></table></figure></li>
<li><p>特性（<code>attribute</code>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// [[noreturn]] 意味着函数永远不会将控制交还调用点，典型的情况是函数被终止或者抛出了一个异常</span></span><br><span class="line"><span class="function">_LIBCPP_NORETURN <span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span>;</span><br><span class="line">[[noreturn]] <span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>用户自定义字面量</p>
<p><em><code>3.14f</code> 这个结尾的<code>f</code>代表的是字面量</em></p>
<p><em>自定义字面量运算符要包含一个<code>unsigned long long</code> 或者 <code>long double</code> 类型的参数，用来处理数值，或者两个参数，第一个参数是字符数组，第二个参数是字符数组的长度，用来处理字符串。</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 自定义字面量</span></span><br><span class="line">string <span class="keyword">operator</span><span class="string">&quot;&quot;</span>_c(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">size_t</span> len) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">string</span>(str, len);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> <span class="keyword">operator</span><span class="string">&quot;&quot;</span>_s(<span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">long</span> second) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in"><span class="keyword">int</span></span>(second);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> <span class="keyword">operator</span><span class="string">&quot;&quot;</span>_km(<span class="keyword">long</span> <span class="keyword">double</span> kilometers) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in"><span class="keyword">double</span></span>(kilometers);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-头文件"><a href="#6-头文件" class="headerlink" title="6. 头文件"></a>6. 头文件</h4><ul>
<li><p><code>#ifndef</code>和<code>#define</code></p>
<p><em><code>ifndef</code>机制可以用来避免循环包含以及多次包含，<code>#ifndef</code>指令检测是否某个键值还没有被定义，如果这个键值已经被定义，编译器将跳到对应的<code>#endif</code>，如果这个键值没有被定义，这个文件将定义这个键值，这样在以后包含的同一文件就会被忽略。这个机制就是所谓的<strong>文件保护</strong></em></p>
</li>
<li><p><code>#pragma once</code></p>
<p><em>包含文件保护或者这个指令还可以保证不会由于多次包含某个头文件而引起重复定义</em></p>
</li>
<li><p>前置声明 <code>forward declarations</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> __LOGGER__</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> __LOGGER__</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Preferences</span>;</span> <span class="comment">// 前置声明</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Logger</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">setPreferences</span><span class="params">(<span class="keyword">const</span> Preferences&amp; inPrefs)</span></span>;</span><br><span class="line">  	<span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">logError</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* inError)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="7-C的实用工具"><a href="#7-C的实用工具" class="headerlink" title="7. C的实用工具"></a>7. C的实用工具</h4><ul>
<li><p>变长参数列表：可以接受任意数目或者任意类型的参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstarg&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> debug = <span class="literal">false</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">debugOut</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, ...)</span> </span>&#123;</span><br><span class="line">  va_list ap;</span><br><span class="line">  <span class="keyword">if</span> (debug) &#123;</span><br><span class="line">    <span class="built_in">va_start</span>(ap, str);</span><br><span class="line">    <span class="built_in">vprintf</span>(stderr, str, ap);</span><br><span class="line">    <span class="built_in">va_end</span>(ap);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>变长参数列表的函数需要至少有一个已命名的参数</em></p>
<p><em>可以使用<code>va_arg()</code>来访问参数</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printInts</span><span class="params">(<span class="keyword">int</span> num, ...)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> temp;</span><br><span class="line">  va_list ap;</span><br><span class="line">  <span class="built_in">va_start</span>(ap, num);</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;</span><br><span class="line">    temp = <span class="built_in">va_arg</span>(ap, <span class="keyword">int</span>);</span><br><span class="line">    cout &lt;&lt; temp &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">va_end</span>(ap);</span><br><span class="line">  cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>为什么不推荐使用C风格的变长参数列表</em><br><em>（1）不知道参数数目</em></p>
<p><em>（2）不知道参数类型</em></p>
</li>
<li><p>预处理宏</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SQUARE(x) ((x) * (x))</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="八、错误处理"><a href="#八、错误处理" class="headerlink" title="八、错误处理"></a>八、错误处理</h2><h4 id="1-如何处理C-中的错误，以及异常的优缺点"><a href="#1-如何处理C-中的错误，以及异常的优缺点" class="headerlink" title="1. 如何处理C++中的错误，以及异常的优缺点"></a>1. 如何处理C++中的错误，以及异常的优缺点</h4><ul>
<li><p>异常的含义</p>
<p><em>异常是一种机制：当程序抛出一个异常时，程序控制立刻停止逐步执行，并转向异常处理程序（<code>exception handler</code>）</em></p>
</li>
<li><p><code>C++</code>中异常的优点</p>
<p><em>1. 异常不能被忽略：如果没有捕获异常，程序会终止</em></p>
<p><em>2. 使用异常时可以将任何信息从发现错误的代码传递到处理错误的代码</em></p>
<p><em>3. 异常处理可以跳过调用堆栈的层次</em></p>
</li>
<li><p><code>C++</code>中异常的缺点</p>
<p><em>1. 异常处理让所有具有异常处理程序的函数都增加了一点开销</em></p>
<p><em>2. 运行时函数可以抛出异常列表意外的异常（编译时不强制要求遵循异常列表）</em></p>
</li>
</ul>
<h4 id="2-异常的语法"><a href="#2-异常的语法" class="headerlink" title="2. 异常的语法"></a>2. 异常的语法</h4><ul>
<li><p>捕获并抛出异常</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SafeDevide</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> den)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (den == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;Devide by zero&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> num / den;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  cout &lt;&lt; <span class="built_in">SafeDevide</span>(<span class="number">10</span>, <span class="number">2</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">SafeDevide</span>(<span class="number">5</span>, <span class="number">0</span>) &lt;&lt; endl;</span><br><span class="line">&#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> invalid_argument&amp; e) &#123;</span><br><span class="line">  cerr &lt;&lt; <span class="string">&quot;Caught exception: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 抛出其他异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customException</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">throw</span> <span class="number">1</span>; <span class="comment">// 可以抛出任何类型</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="built_in">customException</span>();</span><br><span class="line">&#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">int</span> i) &#123;</span><br><span class="line">  cout &lt;&lt; <span class="string">&quot;Caught exception: &quot;</span> &lt;&lt; i &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>异常类型</p>
<p><em>1. 可以将整型作为异常抛出</em></p>
<p><em>2. 可以将字符串作为异常抛出</em></p>
<p><em>3. 可以将对象作为异常抛出</em></p>
<p>​    (1) 对象的类名称可以传递信息</p>
<p>​    (2) 对象可以存储信息，包括用于描述异常的字符串</p>
</li>
<li><p>按<code>const</code>和引用捕获异常对象</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;&#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> exception&amp; e) &#123;&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;&#125; <span class="built_in"><span class="keyword">catch</span></span> (exception e) &#123;&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;&#125; <span class="built_in"><span class="keyword">catch</span></span> (exception&amp; e) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><em>建议按<code>const</code>捕获异常</em></p>
</li>
<li><p>抛出并捕获多个异常</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 捕获多个相同类型的异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readIntegerFile</span><span class="params">(<span class="keyword">const</span> string&amp; fileName. vector&lt;<span class="keyword">int</span>&gt;&amp; dest)</span> </span>&#123;</span><br><span class="line">  ifstream istr;</span><br><span class="line">  <span class="keyword">int</span> temp;</span><br><span class="line">  istr.<span class="built_in">open</span>(fileName.<span class="built_in">c_str</span>());</span><br><span class="line">  <span class="keyword">if</span> (istr.fail) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">exception</span>()</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (istr &gt;&gt; temp) &#123;</span><br><span class="line">    dest.<span class="built_in">push_back</span>(temp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (istr.<span class="built_in">eof</span>()) &#123;</span><br><span class="line">    istr.<span class="built_in">close</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    istr.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">exception</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;&#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> exception&amp; e) &#123;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 捕获多个不同类型的异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readIntegerFile</span><span class="params">(<span class="keyword">const</span> string&amp; fileName. vector&lt;<span class="keyword">int</span>&gt;&amp; dest)</span> </span>&#123;</span><br><span class="line">  ifstream istr;</span><br><span class="line">  <span class="keyword">int</span> temp;</span><br><span class="line">  istr.<span class="built_in">open</span>(fileName.<span class="built_in">c_str</span>());</span><br><span class="line">  <span class="keyword">if</span> (istr.fail) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">invalid_argument</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">while</span> (istr &gt;&gt; temp) &#123;</span><br><span class="line">    dest.<span class="built_in">push_back</span>(temp);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (istr.<span class="built_in">eof</span>()) &#123;</span><br><span class="line">    istr.<span class="built_in">close</span>();</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    istr.<span class="built_in">close</span>();</span><br><span class="line">    <span class="keyword">throw</span> <span class="built_in">runtime_error</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  vector&lt;<span class="keyword">int</span>&gt; dens;</span><br><span class="line">  <span class="built_in">readIntegerFile</span>(<span class="string">&quot;&quot;</span>, dems);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> invalid_argument&amp; e) &#123;&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> runtime_error&amp; e) &#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>匹配所有异常</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;&#125; <span class="built_in"><span class="keyword">catch</span></span> (...) &#123;&#125; <span class="comment">// 使用 `...` 代表任何异常都可以进入catch</span></span><br></pre></td></tr></table></figure>

<p><em><code>...</code>是与所有异常类型匹配的通配符</em></p>
</li>
<li><p>函数会有抛出异常</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customException</span><span class="params">()</span> <span class="title">noexcept</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>不让函数或者方法抛出异常</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">customException</span><span class="params">()</span> <span class="keyword">noexcept</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>在重写方法中修改抛出列表</p>
<p>(1) 限制：</p>
<p>​    <em>1. 删除列表中的异常</em></p>
<p>​    <em>2. 添加超类抛出列表中异常的子类</em></p>
<p>​    <em>3. 将方法设置为<code>noexcept</code></em></p>
<p>(2) 无限制：</p>
<p>​    <em>1. 想列表中添加的异常不是超类抛出列表中异常的子类</em></p>
<p>​    <em>2. 将抛出列表整体删除</em></p>
</li>
</ul>
<h4 id="3-异常的类层次结构以及多态性"><a href="#3-异常的类层次结构以及多态性" class="headerlink" title="3. 异常的类层次结构以及多态性"></a>3. 异常的类层次结构以及多态性</h4><ul>
<li><p>标准异常体系</p>
<img src="/2021/11/25/C-Learning-blog/exception_relation.jpg" class="" title="异常标准体系">

<p><em>层次结构中每个类都支持<code>what()</code>方法，这个方法返回一个<code>const char*</code>字符串描述异常</em></p>
</li>
<li><p>在类层次结构中捕获异常</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 如果一个异常捕获了`invalid_argument`和`runtime_error`，可以使用`exception`（这两个异常的父类）写一个`catch`语句来替换两个`catch`语句</span></span><br><span class="line"><span class="keyword">try</span> &#123;&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> invalid_argument&amp; e) &#123;&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> runtime_error&amp; e) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;&#125;</span><br><span class="line"><span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> exception&amp; e) &#123;&#125;</span><br></pre></td></tr></table></figure>

<p><em>一般来说异常在异常层次结构中的层次越高，错误处理就越不具有针对性，通常应该尽可能地针对性地捕获异常</em></p>
</li>
<li><p>编写自己的异常类</p>
<p><em>编写自己的异常类有两个好处：</em></p>
<p><em>1. 可以在程序中为特定的错误创建更有意义的类名称</em></p>
<p><em>2. 可以在异常中加入自己的信息，标准层次结构中的异常只允许设置错误字符串，自定义可以在异常中传递不同的信息</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FileError</span>:</span> <span class="keyword">public</span> runtime_error &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">FileError</span>(<span class="keyword">const</span> string&amp; fileIn) : <span class="built_in">runtime_error</span>(<span class="string">&quot;&quot;</span>), <span class="built_in">mFile</span>(fileIn) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">what</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> mMsg.<span class="built_in">c_str</span>(); &#125;</span><br><span class="line">    <span class="function">string <span class="title">getFileName</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> mFile; &#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    string mFile, mMsg;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>编写起对象用作异常的类时，有一个诀窍：当某段代码抛出一个异常的时候，被抛出的值或者对象被复制，也就是说通过使用复制构造函数从旧对象构造新对象（<strong>复制是必须的，因为原始对象在堆栈中的位置较高，因此可能在异常捕获之前超出作用域而被销毁，所占用的内存会被回收</strong>）</em></p>
<p><em>因此，编写的类的对象作为异常抛出，对象必须能被复制（<strong>意味着如果动态分配了内存，就必须编写析构函数、复制构造函数以及赋值运算符</strong>）</em></p>
<p><em>异常可能被复制多次（<strong>只有按值捕获异常才会如此</strong>）</em></p>
<p><em><strong>按引用捕获异常可以避免不必要的复制</strong></em></p>
</li>
<li><p>嵌套异常（<code>nested exception</code>）</p>
<p><em>当处理第一个异常时，可能会出发第二种异常情况从而要求抛出第二个异常，但是抛出第二个异常的时候，正在处理的第一个异常的所有信息都会丢失</em></p>
<p><code>std::nested_exception</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span>:</span> <span class="keyword">public</span> std::exception, <span class="keyword">public</span> std::nested_exception &#123;</span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">MyException</span>(<span class="keyword">const</span> <span class="keyword">char</span>* msg) : <span class="built_in">mMsg</span>(msg) &#123;&#125;</span><br><span class="line">  	<span class="keyword">virtual</span> ~<span class="built_in">MyException</span>() <span class="keyword">noexcept</span> &#123;&#125;</span><br><span class="line">  	<span class="function"><span class="keyword">virtual</span> <span class="keyword">const</span> <span class="keyword">char</span>* <span class="title">what</span><span class="params">()</span> <span class="keyword">const</span> <span class="keyword">noexcept</span> </span>&#123; <span class="keyword">return</span> mMsg.<span class="built_in">c_str</span>(); &#125;</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	std::string mMsg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">runtime_error</span>(<span class="string">&quot;Throwing a runtime_error exception&quot;</span>);</span><br><span class="line">  &#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> runtime_error&amp; e) &#123;</span><br><span class="line">    std::cout &lt;&lt; __func__ &lt;&lt; <span class="string">&quot; caught a runtime_error&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::cout &lt;&lt; __func__ &lt;&lt; <span class="string">&quot; throwing MyException&quot;</span> &lt;&lt; std::endl;</span><br><span class="line">    std::<span class="built_in">throw_with_nested</span>(<span class="built_in">MyException</span>(<span class="string">&quot;MyException with nested runtime_error&quot;</span>));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">doSomething</span>();</span><br><span class="line">  &#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> MyException&amp; e) &#123;</span><br><span class="line">    cout &lt;&lt; __func__ &lt;&lt; <span class="string">&quot; caught MyException: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      std::<span class="built_in">rethrow_if_nested</span>(e);</span><br><span class="line">    &#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> runtime_error&amp; e) &#123;</span><br><span class="line">      cout &lt;&lt; <span class="string">&quot; Nested exception: &quot;</span> &lt;&lt; e.<span class="built_in">what</span>() &lt;&lt; endl;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><code>std::rethrow_if_nested</code> 抛出嵌套异常</p>
</li>
</ul>
<h4 id="4-堆栈的释放以及清理"><a href="#4-堆栈的释放以及清理" class="headerlink" title="4. 堆栈的释放以及清理"></a>4. 堆栈的释放以及清理</h4><ul>
<li><p>异常堆栈行为</p>
<p><em>当某段代码抛出一个异常时，会在堆栈中寻找<code>catch</code>处理程序，<code>catch</code>处理程序可以在堆栈执行的0个或者多个函数调用之后，当发现一个<code>catch</code>时，堆栈会释放所有中间堆栈帧，并直接回到定义<code>catch</code>处理程序的堆栈层</em></p>
<p><em>堆栈释放以为这所有的具有局部作用域的名称的析构函数都会被调用，并且当前执行点之前的每个函数中所有的代码都会被忽略</em></p>
<p><em>然而当堆栈释放的时候，并不释放指针变量，也不会执行其他清理，就会有一下问题</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcOne</span><span class="params">()</span> <span class="title">throw</span><span class="params">(exception)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcTwo</span><span class="params">()</span> <span class="title">throw</span><span class="params">(exception)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">funcOne</span>();</span><br><span class="line">  &#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> exception&amp; e) &#123;</span><br><span class="line">    cerr &lt;&lt; <span class="string">&quot;Exception caught!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcOne</span><span class="params">()</span> <span class="title">throw</span><span class="params">(exception)</span> </span>&#123;</span><br><span class="line">  string str1;</span><br><span class="line">  string* str2 = <span class="keyword">new</span> <span class="built_in">string</span>();</span><br><span class="line">  <span class="built_in">funcTwo</span>();</span><br><span class="line">  <span class="keyword">delete</span> str2;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcTwo</span><span class="params">()</span> <span class="title">throw</span><span class="params">(exception)</span> </span>&#123;</span><br><span class="line">  ifstream istr;</span><br><span class="line">  istr.<span class="built_in">open</span>(<span class="string">&quot;filename&quot;</span>);</span><br><span class="line">  <span class="keyword">throw</span> <span class="built_in">exception</span>(); <span class="comment">// 这句抛出异常的语句会是程序进入到main函数的catch中，使得funcOne中的delete 是str2无法执行，进入catch的堆栈层可以释放funcOne中的str1（局部变量），指针变量无法被自动释放，所以造成了内存的泄漏</span></span><br><span class="line">  istr.<span class="built_in">close</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>使用智能指针</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcOne</span><span class="params">()</span> <span class="title">throw</span><span class="params">(exception)</span> </span>&#123;</span><br><span class="line">  string str1;</span><br><span class="line">  <span class="function">unique_ptr&lt;string&gt; <span class="title">str2</span><span class="params">(<span class="keyword">new</span> string(<span class="string">&quot;hello&quot;</span>))</span></span>;</span><br><span class="line">  <span class="built_in">funcTwo</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>这样修改后在函数返回或者抛出异常后会自动删除<code>string*</code>类型的<code>str2</code>指针</em></p>
<p><em>使用智能指针时，永远不必考虑释放底层的资源（<strong>智能指针的析构函数会自动完成这一操作，无论是正常退出函数还是抛出异常退出函数都是如此</strong>）</em></p>
</li>
<li><p>捕获、清理并重新抛出</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 不使用智能指针的正确操作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcOne</span><span class="params">()</span> <span class="title">throw</span><span class="params">(exception)</span> </span>&#123;</span><br><span class="line">  string str1;</span><br><span class="line">  string* str2 = <span class="keyword">new</span> <span class="built_in">string</span>();</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="built_in">funcTwo</span>();</span><br><span class="line">  &#125; <span class="built_in"><span class="keyword">catch</span></span> (...) &#123;</span><br><span class="line">    <span class="keyword">delete</span> str2;</span><br><span class="line">    <span class="keyword">throw</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">delete</span> str2;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>可以手动捕获异常，并在异常处理中删除需要删除的指针，但是比智能指针更繁琐，智能指针时比这种操作更高的解决方案</em></p>
</li>
</ul>
<h4 id="5-常见的错误处理情况"><a href="#5-常见的错误处理情况" class="headerlink" title="5. 常见的错误处理情况"></a>5. 常见的错误处理情况</h4><ul>
<li><p>内存分配错误</p>
<p><em>如果无法分配内存，<code>new</code>以及<code>new[]</code>的默认行为时抛出<code>bad_alloc</code>类型的异常，所以<code>new</code>语句编写应该是以下：</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">  <span class="keyword">int</span>* ptr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line">&#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> bad_alloc&amp; e) &#123;</span><br><span class="line">  cerr &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">&quot;): Unable to allocate memory!&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><code>__FILE__</code>：文件名称</em></p>
<p><em><code>__LINE__</code>：当前行数</em></p>
</li>
<li><p>不抛出异常的<code>new</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">ptr = <span class="built_in"><span class="keyword">new</span></span>(nothrow) <span class="keyword">int</span>[<span class="number">6</span>];</span><br><span class="line"><span class="keyword">if</span> (ptr == <span class="literal">nullptr</span>) &#123;</span><br><span class="line">  cerr &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">&quot;): Unable to allocate memory!&quot;</span> &lt;&lt; endl;</span><br><span class="line">  <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>定制内存分配失败行为</p>
<p><code>new_handler</code> 和 <code>set_new_handler</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PleaseTerminateMe</span> &#123;</span>&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myNewHandler</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    cerr &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">&quot;): Unable to allocate memory!&quot;</span> &lt;&lt; endl;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    new_handler oldHandler = <span class="built_in">set_new_handler</span>(myNewHandler); <span class="comment">// 设置自定义的new_handler，并且保存旧的handler</span></span><br><span class="line">    <span class="keyword">int</span> numInts = numeric_limits&lt;<span class="keyword">int</span>&gt;::<span class="built_in">max</span>();</span><br><span class="line">    <span class="keyword">int</span>* ptr = <span class="keyword">new</span> <span class="keyword">int</span>[numInts];</span><br><span class="line">    <span class="built_in">set_new_handler</span>(oldHandler); <span class="comment">// 重新设置为之前的handler</span></span><br><span class="line">&#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> PleaseTerminateMe&amp;) &#123;</span><br><span class="line">    cerr &lt;&lt; __FILE__ &lt;&lt; <span class="string">&quot;(&quot;</span> &lt;&lt; __LINE__ &lt;&lt; <span class="string">&quot;): Terminating program!&quot;</span> &lt;&lt; endl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>构造函数中的错误</p>
<p><em>构造函数中捕获异常并处理为释放的内存</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Matrix::<span class="built_in">Matrix</span>(<span class="keyword">unsigned</span> <span class="keyword">int</span> width, <span class="keyword">unsigned</span> <span class="keyword">int</span> height) : <span class="built_in">mWidth</span>(width), <span class="built_in">mHeight</span>(height) &#123;</span><br><span class="line">    mMatrix = <span class="keyword">new</span> Element*[width];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; height; ++i) &#123;</span><br><span class="line">            mMatrix[i] = <span class="keyword">new</span> Element[height];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in"><span class="keyword">catch</span></span> (...) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">unsigned</span> <span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] mMatrix[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> [] mMatrix;</span><br><span class="line">        mMatrix = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>function-try-block</code></p>
<p><em>将<code>ctor-initializer</code>抛出的异常转换为其他异常、将信息记录到日志文件时会用到</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">MyClass</span>();</span><br><span class="line">&#125;</span><br><span class="line">MyClass:<span class="built_in">MyClass</span>() <span class="keyword">try</span> &#123;</span><br><span class="line">  </span><br><span class="line">&#125; <span class="built_in"><span class="keyword">catch</span></span> (...) &#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>1. 这个catch语句会捕获构造函数体或者<code>ctor-initializer</code>直接或间接抛出的异常</em></p>
<p><em>2. <code>catch</code>语句必须重新抛出当前异常或者抛出一个新异常，如果没有这么做，运行时将自动重新抛出当前异常</em></p>
<p><em>3. 当<code>catch</code>语句捕获了一个<code>function-try-block</code>内的异常时，构造函数已经构建的所有对象都会在执行catch语句之前销毁</em></p>
<p><em>4. 对于<code>function-try-block</code>语句内部的对象，不应该访问其成员变量</em></p>
<p><em>5. 对于<code>fuction-try-block</code>中的<code>catch</code>语句而言，其中包含的函数不能使用<code>return</code>关键字返回值，构造函数与此无关，因为构造函数没有返回值</em></p>
<p><em><code>function-try-block</code>也可以用于普通函数</em></p>
</li>
<li><p>析构函数中的错误</p>
</li>
<li><p>综合引用</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;new&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GamePiece.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GameBoard</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">GameBoard</span>(<span class="keyword">int</span> inWidth = kDefaultWidth, <span class="keyword">int</span> inHeight = kDefaultHeight) <span class="built_in"><span class="keyword">noexcept</span></span>(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">GameBoard</span>(<span class="keyword">const</span> GameBoard&amp; src) <span class="built_in"><span class="keyword">noexcept</span></span>(<span class="literal">false</span>); <span class="comment">// 复制构造函数</span></span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">GameBoard</span>() <span class="keyword">noexcept</span>;</span><br><span class="line">    GameBoard&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> GameBoard&amp; rhs) <span class="built_in"><span class="keyword">noexcept</span></span>(<span class="literal">false</span>); <span class="comment">// 赋值运算符</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setPieceAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">const</span> GamePiece&amp; inPiece)</span> <span class="title">noexcept</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function">GamePiece&amp; <span class="title">getPieceAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="title">noexcept</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">const</span> GamePiece&amp; <span class="title">getPieceAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">const</span> <span class="title">noexcept</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> mHeight; &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getWidth</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> mWidth; &#125;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kDefaultWidth = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kDefaultHeight = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">copyFrom</span><span class="params">(<span class="keyword">const</span> GameBoard&amp; src)</span> <span class="title">noexcept</span><span class="params">(<span class="literal">false</span>)</span></span>;</span><br><span class="line">    GamePiece** mCells;</span><br><span class="line">    <span class="keyword">int</span> mWidth, mHeight;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;GameBoard.h&quot;</span></span></span><br><span class="line"></span><br><span class="line">GameBoard::<span class="built_in">GameBoard</span>(<span class="keyword">int</span> inWidth, <span class="keyword">int</span> inHeight) : <span class="built_in">mWidth</span>(inWidth), <span class="built_in">mHeight</span>(inHeight) &#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    mCells = <span class="keyword">new</span> GamePiece* [mWidth];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">            mCells[i] = <span class="keyword">new</span> GamePiece[mHeight];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in"><span class="keyword">catch</span></span> (...) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] mCells[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> [] mCells;</span><br><span class="line">        mCells = <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GameBoard::<span class="built_in">GameBoard</span>(<span class="keyword">const</span> GameBoard&amp; src) &#123;</span><br><span class="line">    <span class="built_in">copyFrom</span>(src);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GameBoard::~<span class="built_in">GameBoard</span>() <span class="keyword">noexcept</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] mCells[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] mCells;</span><br><span class="line">    mCells = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameBoard::copyFrom</span><span class="params">(<span class="keyword">const</span> GameBoard &amp;src)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">    mWidth = src.mWidth;</span><br><span class="line">    mHeight = src.mHeight;</span><br><span class="line">    mCells = <span class="keyword">new</span> GamePiece* [mWidth];</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">            mCells[i] = <span class="keyword">new</span> GamePiece[mHeight];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="built_in"><span class="keyword">catch</span></span> (...) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; i; j++) &#123;</span><br><span class="line">            <span class="keyword">delete</span> [] mCells[j];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">delete</span> [] mCells;</span><br><span class="line">        mCells = <span class="literal">nullptr</span>;</span><br><span class="line">        mWidth = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">bad_alloc</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mHeight; j++) &#123;</span><br><span class="line">            mCells[i][j] = src.mCells[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">GameBoard&amp; GameBoard::<span class="keyword">operator</span>=(<span class="keyword">const</span> GameBoard &amp;rhs) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] mCells[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] mCells;</span><br><span class="line">    mCells = <span class="literal">nullptr</span>;</span><br><span class="line">    <span class="built_in">copyFrom</span>(rhs);</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">GameBoard::setPieceAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">const</span> GamePiece &amp;inPiece)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (x &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;GameBoard::setPieceAt: x-coord negative&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (x &gt;= mWidth)</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;GameBoard::setPieceAt: x-coord beyond width&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (y &lt; <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;GameBoard::setPieceAt: y-coord negative&quot;</span>);</span><br><span class="line">    <span class="keyword">if</span> (y &gt;= mHeight)</span><br><span class="line">        <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;GameBoard::setPieceAt: y-coord beyond width&quot;</span>);</span><br><span class="line">    mCells[x][y] = inPiece;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">const</span> GamePiece&amp; <span class="title">GameBoard::getPieceAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mCells[x][y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">GamePiece&amp; <span class="title">GameBoard::getPieceAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> mCells[x][y];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="九、深入探讨标准库"><a href="#九、深入探讨标准库" class="headerlink" title="九、深入探讨标准库"></a>九、深入探讨标准库</h2><h4 id="1-贯穿标准库的编码原则"><a href="#1-贯穿标准库的编码原则" class="headerlink" title="1. 贯穿标准库的编码原则"></a>1. 贯穿标准库的编码原则</h4><ul>
<li><p>使用模版</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TemplateArray</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">TemplateArray</span>(<span class="keyword">size_t</span> size) : <span class="built_in">mSize</span>(size), <span class="built_in">mArray</span>(<span class="literal">nullptr</span>) &#123;</span><br><span class="line">        mArray = <span class="keyword">new</span> T[size];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">virtual</span> ~<span class="built_in">MyArray</span>() &#123;</span><br><span class="line">        <span class="keyword">if</span> (mArray) &#123;</span><br><span class="line">            <span class="keyword">delete</span>[] mArray;</span><br><span class="line">            mArray = <span class="literal">nullptr</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">size_t</span> <span class="title">getSize</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123; <span class="keyword">return</span> mSize; &#125;</span><br><span class="line">    <span class="function">T&amp; <span class="title">at</span><span class="params">(<span class="keyword">size_t</span> index)</span> <span class="title">noexcept</span><span class="params">(<span class="literal">false</span>)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (index &gt;= <span class="number">0</span> &amp;&amp; index &lt; <span class="built_in">getSize</span>())</span><br><span class="line">            <span class="keyword">return</span> mArray[index];</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">throw</span> std::<span class="built_in">out_of_range</span>(<span class="string">&quot;TemplateArray::at: Index out of range.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">size_t</span> mSize;</span><br><span class="line">    T* mArray;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function">TemplateArray&lt;<span class="keyword">int</span>&gt; <span class="title">arrInt</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">TemplateArray&lt;string&gt; <span class="title">arrString</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="2-标准库提供的功能"><a href="#2-标准库提供的功能" class="headerlink" title="2. 标准库提供的功能"></a>2. 标准库提供的功能</h4><ul>
<li>字符串</li>
</ul>
]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>libdispatch源码解析</title>
    <url>/2021/11/25/libdispatch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="libdispatch-源码解析"><a href="#libdispatch-源码解析" class="headerlink" title="libdispatch 源码解析"></a>libdispatch 源码解析</h1><h2 id="一、阅读前预习"><a href="#一、阅读前预习" class="headerlink" title="一、阅读前预习"></a>一、阅读前预习</h2><ul>
<li><p>原子操作</p>
<p><code>__sync_lock_test_and_set((p), (n))</code>： 给p赋值并返回操作之前的值</p>
<p><code>__sync_bool_compare_and_swap((p), (o), (n))</code>：这两个函数提供原子的比较和交换，如果*p==o，则将n写入p</p>
<p><code>__sync_add_and_fetch((p), (n))</code>：自加n，再返回</p>
<p><code>__sync_sub_and_fetch((p), (n))</code>：自减n，再返回</p>
<p><code>__sync_fetch_and_or((p), (v))</code>：先返回再进行或运算</p>
<p><code>__sync_fetch_and_and((p), (v))</code>：先返回再进行与运算</p>
</li>
<li><p><code>__builtin_expect</code>：编译器期望值优化</p>
<p><code>#define fastpath(x) ((typeof(x))__builtin_expect((long)(x), ~0l))</code>：多数情况下会发生</p>
<p><code>#define slowpath(x) ((typeof(x))__builtin_expect((long)(x), 0l))</code>：极少情况下发生</p>
</li>
<li><p>DISPATCH_DECL</p>
<p><code>#define DISPATCH_DECL(name) typedef struct name##_s *name##_t</code></p>
<p>例如：<code>DISPATCH_DECL(dispatch_queue);</code> 展开为-&gt; <code>typedef struct distach_queue_s *dispatch_quque_t</code></p>
</li>
</ul>
<h2 id="二、基本数据结构"><a href="#二、基本数据结构" class="headerlink" title="二、基本数据结构"></a>二、基本数据结构</h2><ul>
<li><p>dispatch_object_t</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_object_s</span> *_<span class="title">do</span>;</span>                <span class="comment">// dispatch_object_s结构体，这个是GCD的基类</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_continuation_s</span> *_<span class="title">dc</span>;</span>    <span class="comment">// 任务类型，通常dispatch_async内的block最终会封装成这个数据类型</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> *_<span class="title">dq</span>;</span>                    <span class="comment">// 任务队列，我们创建的队列（串行，并发）都是这个类型的</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_attr_s</span> *_<span class="title">dqa</span>;</span>        <span class="comment">// 任务队列的属性，任务队列的属性包含了任务队列里面的一些操作函数，可以表明队列是串行还是并发</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_group_s</span> *_<span class="title">dg</span>;</span>                    <span class="comment">// GCD的group</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_source_s</span> *_<span class="title">ds</span>;</span>                <span class="comment">// GCD的source，可以监测内核时间，文件读写事件和socket通信事件</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_source_attr_s</span> *_<span class="title">dsa</span>;</span>    <span class="comment">// source的属性</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_semaphore_s</span> *_<span class="title">dsema</span>;</span>    <span class="comment">// 信号量，可以用来调度线程</span></span><br><span class="line">&#125; <span class="keyword">dispatch_objct_t</span> __attribute__((transparent_union));</span><br></pre></td></tr></table></figure>

<p><code>__attribute__((transparent_union))</code>：透明联合体，透明联合类型削弱了C语言的类型检测机制</p>
</li>
<li><p>dispatch_object_s：整个GCD的基类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_object_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_STRUCT_HEADER</span>(dispatch_object_s, dispatch_object_vtable_s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_STRUCT_HEADER(x, y)        \</span></span><br><span class="line"><span class="meta">    const struct y *do_vtable;                        \ <span class="comment">// 这个结构体内包含了 dispatch_object_s的操作函数</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">x</span> *<span class="title">volatile</span> <span class="title">do_next</span>;</span>                        \ <span class="comment">// 链表的next</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> do_red_cnt;                            \ <span class="comment">// 引用计数</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> do_xref_cnt;                            \ <span class="comment">// 外部引用计数</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> do_suspend_cnt;                    \ <span class="comment">// suspend计数，用作暂停标志，比如延时处理的任务，设置该引用计数后在任务到时后，计数器会将该标志位修改，然后唤醒队列调度</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> *<span class="title">do_targettq</span>;</span>    \ <span class="comment">// 目标队列，就是当前这个struct x 在哪个队列运行</span></span><br><span class="line">  <span class="keyword">void</span> *do_ctxt;                                                \ <span class="comment">// 上下文传递的参数</span></span><br><span class="line">  <span class="keyword">void</span> *do_finalizer;</span><br></pre></td></tr></table></figure></li>
<li><p><code>do_vtable</code>, 类型为<code>dispatch_object_vtable_s</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_object_vtable_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_VTABLE_HEADER</span>(dispatch_object_s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_VTABLE_HEADER(x)                                                        \</span></span><br><span class="line"><span class="meta">    unsigned long const do_type;                                                            \ <span class="comment">// 数据的具体类型</span></span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> do_kind;                                                                \ <span class="comment">// 数据的类型描述字符串</span></span><br><span class="line">  <span class="built_in">size_t</span> (*<span class="keyword">const</span> do_debug)(struct x *, <span class="keyword">char</span> *, <span class="keyword">size_t</span>);            \ <span class="comment">// 用来获取调试时需要的变量信息</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> *(*<span class="title">const</span> <span class="title">do_invoke</span>)(<span class="keyword">struct</span> <span class="title">x</span> *);</span>    \ <span class="comment">// 唤醒队列的方法，全局队列和主队列此项为NULL</span></span><br><span class="line">  <span class="built_in"><span class="keyword">bool</span></span> (*<span class="keyword">const</span> do_probe)(struct x *);                                                \ <span class="comment">// 用于检测传入对象中的一些值是否满足条件</span></span><br><span class="line">  <span class="built_in"><span class="keyword">void</span></span> (*<span class="keyword">const</span> do_dispose)(struct x *)                                            \ <span class="comment">// 销毁队列的方法，通常内部会调用这个对象的finalizer函数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_type(x) (x)-&gt;do_vtable-&gt;do_type</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_kind(x) (x)-&gt;do_vtable-&gt;do_kind</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_debug(x, y, z) (x)-&gt;do_vtable-&gt;do_debug((x), (y), (z))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_dispose(x) (x)-&gt;do_vtable-&gt;do_dispose(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_invoke(x) (x)-&gt;do_vtable-&gt;do_invoke(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_probe(x) (x)-&gt;do_vtable-&gt;do_probe(x)</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_continuation_s</code>：该结构体主要用来封装block和function，通常 <code>dispatch_async</code>内的block最终都会封装成这个数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_continuation_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_CONTINUATION_HEADER</span>(dispatch_continuation_s);</span><br><span class="line">  <span class="keyword">dispatch_group_t</span> dc_group;</span><br><span class="line">  <span class="keyword">void</span> *                     dc_data[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_CONTINUATION_HEADER(x)        \</span></span><br><span class="line"><span class="meta">    const void * do_vtable;                                    \</span></span><br><span class="line"><span class="meta">    struct x *volatile do_next;                            \</span></span><br><span class="line"><span class="meta">    dispatch_function_t dc_func;                        \</span></span><br><span class="line"><span class="meta">    void * dc_ctxt;                                                    \</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_queue_s</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_STRUCT_HEADER</span>(dispatch_queue_s, dispatch_queue_vtable_s);</span><br><span class="line">  DISPATCH_QUEUE_HEADER;</span><br><span class="line">  <span class="keyword">char</span> dq_label[DISPATCH_QUEUE_MIN_LABEL_SIZE];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_QUEUE_MIN_LABEL_SIZE  64                <span class="comment">// 队列起名最多64个字符</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_QUEUE_HEADER                                                \</span></span><br><span class="line"><span class="meta">    uint32_t dq_running;                                                            \</span></span><br><span class="line"><span class="meta">    uint32_t dq_width;                                                                \</span></span><br><span class="line"><span class="meta">    struct dispatch_object_s *dq_items_tail;                    \</span></span><br><span class="line"><span class="meta">    struct dispatch_object_s *volatile dq_items_head;    \</span></span><br><span class="line"><span class="meta">    unsigned long dq_serialnum;                                                \</span></span><br><span class="line"><span class="meta">    void *dq_finalizer_ctxt;                                                    \</span></span><br><span class="line"><span class="meta">    dispatch_queue_fializer_function_t dq_finalizer_func;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_group_s</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DISPATCH_DECL</span>(dispatch_group);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_DECL(name) typedef struct name##_s *name##_t;</span></span><br></pre></td></tr></table></figure>

<p>*<code>dispatch_group_t</code>等效与<code>dispatch_group_s *</code></p>
<p>在 semaphore.c 中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">dispatch_group_t</span></span></span><br><span class="line"><span class="function"><span class="title">dispatch_group_create</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> （<span class="keyword">dispatch_group_t</span>）<span class="built_in">dispatch_semaphore_create</span>(LONG_MAX);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出<code>dispatch_group_t</code>本质是一个value为<code>LONG_MAX</code>的<code>semaphore</code></p>
</li>
<li><p><code>dispatch_source_s</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_source_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_STRUCT_HEADER</span>(dispatch_source_s, dispatch_source_vtable_s);</span><br><span class="line">  DISPATCH_QUEUE_HEADER;</span><br><span class="line">  <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> _ds_pad[DISPATCH_QUEUE_MIN_LABEL_SIZE];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">      <span class="keyword">char</span> dq_label[<span class="number">8</span>];</span><br><span class="line">      <span class="keyword">dispatch_keven_t</span> ds_dkev;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">dispatch_source_handler_function_t</span> ds_handler_func;</span><br><span class="line">      <span class="keyword">void</span> *ds_handler_ctxt;</span><br><span class="line">      <span class="keyword">void</span> *ds_cancel_handler;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> ds_is_level:<span class="number">1</span>,</span><br><span class="line">          ds_is_adder:<span class="number">1</span>,</span><br><span class="line">          ds_is_installed:<span class="number">1</span>,</span><br><span class="line">          ds_needs_rearm:<span class="number">1</span>,</span><br><span class="line">          ds_is_armed:<span class="number">1</span>,</span><br><span class="line">          ds_is_legacy:<span class="number">1</span>,</span><br><span class="line">          ds_cancel_is_block:<span class="number">1</span>,</span><br><span class="line">          ds_handler_is_block:<span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> ds_atomic_flags;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> ds_data;</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> ds_pending_data;</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> ds_pending_data_mask;</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">TAILQ_ENTRY</span>(dispatch_source_s) ds_list;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> ds_ident_hack;</span><br><span class="line">      </span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_timer_source_s</span> <span class="title">ds_time</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_semaphore_s</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_semaphore_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_STRUCT_HEADER</span>(dispatch_semaphore_s, dispatch_semaphore_vtable_s);</span><br><span class="line">  <span class="keyword">long</span> dsema_value; <span class="comment">// 信号值</span></span><br><span class="line">  <span class="keyword">long</span> dsema_orig;     <span class="comment">// 记录其初始值，或者成为原始值，创建信号时设置的</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  只是一个放置信号量被意外唤醒的变量，这个变量在signal过程中+1，然后wait的时候如果发现这个值不是1，那么就直接返回了，而不会进入接下来的sim_wait</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">size_t</span> dsema_sent_ksignals;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">semaphore_t</span> dsema_port;</span><br><span class="line">  <span class="keyword">semaphore_t</span> dsema_waiter_port;</span><br><span class="line">  <span class="keyword">size_t</span> dsema_group_waiters;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_sema_notify_s</span> *<span class="title">dsema_notify_head</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_sema_notify_s</span> *<span class="title">dsema_notify_tail</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="三、libdispatch"><a href="#三、libdispatch" class="headerlink" title="三、libdispatch"></a>三、libdispatch</h2><ul>
<li><p>初始化 <code>void libdispatch_init(void)</code></p>
<p>TSD: Thread-specific data 线程私有数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">libdispatch_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 以下assert保证定义的宏不会出问题</span></span><br><span class="line">  <span class="built_in">dispatch_assert</span>(DISPATCH_QUEUE_PRIORITY_COUNT == <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">dispatch_asset</span>(DISPATCH_ROOT_QUEUE_COUNT == <span class="number">6</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">dispatch_assert</span>(DISPATCH_QUEUE_PRIORITY_LOW == -DISPATCH_QUEUE_PRIORITY_HIGH);</span><br><span class="line">  <span class="built_in">dispatch_assert</span>(<span class="built_in">countof</span>(_dispatch_root_queues) == DISPATCH_ROOT_QUEUE_COUNT);</span><br><span class="line">  <span class="built_in">dispatch_assert</span>(<span class="built_in">countof</span>(_dispatch_thread_mediator) == DISPATCH_ROOT_QUEUE_COUNT);</span><br><span class="line">  <span class="built_in">dispatch_assert</span>(<span class="built_in">countof</span>(_dispatch_root_queue_contexts) == DISPATCH_ROOT_QUEUE_COUNT);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// TSD池分配</span></span><br><span class="line">  _dispatch_thread_key_init_np(dispatch_queue_key, _dispatch_queue_cleanup);</span><br><span class="line">  _dispatch_thread_key_init_np(dispatch_sema4_key, (<span class="built_in"><span class="keyword">void</span></span>(*)(<span class="keyword">void</span> *))dispatch_release);</span><br><span class="line">  _dispatch_thread_key_init_np(dispatch_cache_key, _dispatch_cache_cleanup2);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DISPATCH_PERF_MON</span></span><br><span class="line">  _dispatch_thread_key_init_np(dispatch_bcounter_key, <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 主线程设置TSD</span></span><br><span class="line">  _dispatch_thread_setspecific(dispatch_queue_key, &amp;_dispatch_main_q);</span><br><span class="line">  _dispatch_queue_set_width_init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_once</code> 分析</p>
<ol>
<li><p>dispatch_once 如何在多线程下保持生成对象的唯一性？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ (instancetype)sharedInstance &#123;</span><br><span class="line">  static XXObject *_instance;</span><br><span class="line">  static dispatch_once_t _predicate;</span><br><span class="line">  dispatch_once(&amp;_predicate, ^&#123;</span><br><span class="line">    _instance = [[XXobject alloc] init];</span><br><span class="line">  &#125;);</span><br><span class="line">  return _instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>（Objective-C单例示例）</em></p>
</li>
<li><p><code>dispatch_once_t</code></p>
<ul>
<li><p>_<code>once.h</code>_中定义为一个长整形</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">dispatch_once_t</span>;</span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_once</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch_once</span><span class="params">(<span class="keyword">dispatch_once_t</span> *val, <span class="keyword">void</span> (^block)(<span class="keyword">void</span>))</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Block_basic</span> *<span class="title">bb</span> =</span> (<span class="keyword">void</span> *)block;</span><br><span class="line">  <span class="built_in">dispatch_once_f</span>(val, block, (<span class="keyword">void</span> *)bb-&gt;Block_invoke);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_once_f</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch_once_f</span><span class="params">(<span class="keyword">dispatch_once_t</span> *val, <span class="keyword">void</span> *ctxt, <span class="keyword">void</span> (*func)(<span class="keyword">void</span> *))</span> </span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">long</span> *vval = val;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">dispatch_atomic_cmpxchg</span>(val, <span class="number">0l</span>, <span class="number">1l</span>)) &#123;</span><br><span class="line">    <span class="built_in">func</span>(ctxt);</span><br><span class="line">    <span class="built_in">dispatch_atomic_barrier</span>();</span><br><span class="line">    *val = ~<span class="number">0l</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      _dispatch_hardware_pause();</span><br><span class="line">    &#125; <span class="keyword">while</span> (*vval != ~<span class="number">0l</span>);</span><br><span class="line">    <span class="built_in">dispatch_atomic_barrier</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><code>dispatch_atomic_barrier</code> 是一个内存屏障，可以保证在block执行完成后才能修改 *val 的值</em></p>
<p><em>在首个线程A执行block的过程中，如果其它的线程也进入<code>dispatch_once_f</code>，那么这个时候if的原子判断一定是返回false，于是走到了else分支，于是执行了do<del>while循环，其中调用了<code>_dispatch_hardware_pause</code>，这有助于提高性能和节省CPU耗电，pause就像nop，干的事情就是延迟空等的事情。直到首个线程已经将block执行完毕且将*val修改为</del>0，调用<code>dispatch_atomic_barrier</code>后退出。这么看来其它的线程是无法执行block的，这就保证了在<code>dispatch_once_f</code>的block的执行的唯一性，生成的单例也是唯一的</em></p>
</li>
<li><p><code>dispatch_once</code>死锁</p>
<p>方式一：</p>
<p>​    1、某线程T1()调用单例A，且为应用生命周期内首次调用，需要使用dispatch_once(&amp;token, block())初始化单例；<br>​    2、block中可能掉用到了B流程，B流程又调用了C流程，C流程可能调用到了单例A，将会再次调用dispatch_once；<br>​    3、这样又造成了相互等待。</p>
<p>方式二：</p>
<p>​    1、某线程T1()调用单例A，且为应用生命周期内首次调用，需要使用dispatch_once(&amp;token, block())初始化单例。<br>​    2、上述block()中的某个函数调用了dispatch_sync_safe，同步在T2线程执行代码<br>​    3、T2线程正在执行的某个函数需要调用到单例A，将会再次调用dispatch_once。<br>​    4、这样T1线程在等block执行完毕，它在等待T2线程执行完毕，而T2线程在等待T1线程的dispatch_once执行完毕，造成了相互等待，故而死锁</p>
</li>
</ul>
<h3 id="dispatch-queue"><a href="#dispatch-queue" class="headerlink" title="dispatch_queue"></a>dispatch_queue</h3><img src="/2021/11/25/libdispatch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/dispatch_queue_header.jpg" class="" title="DISPATCH_QUEUE_HEADER">

<ul>
<li><p>参考上方<code>dispatch_queue_s</code>的结构可发现，<code>struct x *volatile do_next</code> 可展开为 <code>struct dispatch_queue_s *volatile do_next</code>，<code>struct y *do_vtable</code> 可展开为 <code>const struct dispatch_queue_vtable_s *do_vtable</code>，<code>dispatch_queue_vtable_s</code>结构体中包含了<code>dispatch_object_s</code>或者其他子类的操作函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> do_type;    \                           <span class="comment">// 数据的具体类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> do_kind; \                                <span class="comment">// 数据的类型描述字符串</span></span><br><span class="line"><span class="built_in">size_t</span> (*<span class="keyword">const</span> do_debug)(struct x *, <span class="keyword">char</span> *, <span class="keyword">size_t</span>);   \   <span class="comment">// 用来获取调试时需要的变量信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> *(*<span class="title">const</span> <span class="title">do_invoke</span>)(<span class="keyword">struct</span> <span class="title">x</span> *);</span>\   <span class="comment">// 唤醒队列的方法，全局队列和主队列此项为NULL</span></span><br><span class="line"><span class="built_in"><span class="keyword">bool</span></span> (*<span class="keyword">const</span> do_probe)(struct x *); \                       <span class="comment">// 用于检测传入对象中的一些值是否满足条件</span></span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span> (*<span class="keyword">const</span> do_dispose)(struct x *)                        <span class="comment">// 销毁队列的方法，通常内部会调用 这个对象的 finalizer 函数</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>dq_label</code> 代表队列的名字</p>
</li>
<li><p>队列的获取</p>
<p><code>dispatch_get_main_queue()</code> 源码为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dispatch_get_main_queue() (&amp;_dispatch_main_q)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> _<span class="title">dispatch_main_q</span> =</span> &#123;</span><br><span class="line">  .do_vtable = &amp;_dispatch_queue_vtable,</span><br><span class="line">  .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">  .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">  .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">  .do_targetq = &amp;_dispatch_root_queues[DISPATCH_ROOT_QUEUE_COUNT / <span class="number">2</span>],</span><br><span class="line">  .dq_label = <span class="string">&quot;com.apple.main-thread&quot;</span>,</span><br><span class="line">  .dq_running = <span class="number">1</span>,</span><br><span class="line">  .dq_width = <span class="number">1</span>,</span><br><span class="line">  .dq_serialnum = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>实际上是一个宏，返回的是<code>dispatch_main_q</code>的地址</em></p>
</li>
<li><p><code>do_vtable</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_vtable_s</span> _<span class="title">dispatch_queue_vtable</span> =</span> &#123;</span><br><span class="line">  .do_type = DISPATCH_QUEUE_TYPE,</span><br><span class="line">  .do_kind = <span class="string">&quot;queue&quot;</span>,</span><br><span class="line">  .do_dispose = _dispatch_queue_dispose,</span><br><span class="line">  .do_invoke = (<span class="keyword">void</span> *)dummy_function_r0,</span><br><span class="line">  .do_probe = (<span class="keyword">void</span> *)dummy_function_r0,</span><br><span class="line">  .do_debug = dispatch_queue_debug,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>do_ref_cnt</code>和 <code>do_xref_cnt</code>：这两个值都和GCD对象的内存管理有关，只有这两个值同时为0，GCD对象才能被释放，主队列的这两个成员的值都为<code>DISPATCH_OBJeCT_GLOBAL_REFCNT</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_OBJECT_GLOBAL_REFCNT     (~0u)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _dispatch_retain(<span class="keyword">dispatch_object_t</span> dou) &#123;</span><br><span class="line">  <span class="keyword">if</span> (dou._do-&gt;do_ref_cnt == DISPATCH_OBJECT_GLOBAL_REFCNT) &#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// global object</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch_release</span><span class="params">(<span class="keyword">dispatch_object_t</span> dou)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">typeof</span>(dou._do-&gt;do_xref_cnt) oldval;</span><br><span class="line">  <span class="keyword">if</span> (dou._do-&gt;do_xref_cnt == DISPATCH_OBJECT_GLOBAL_REFCNT) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出主队列的生命周期是随着应用的，不会受 retain 和 release 的影响</p>
</li>
<li><p><code>do_targetq</code> (目标队列)</p>
<p><em>非全局队列，需要压入globalQueue中来处理，因此需要指明target_queue</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_ROOT_QUEUE_COUNT 6</span></span><br><span class="line"></span><br><span class="line">.do_targetq = &amp;_dispatch_root_queue[DISPATCH_ROOT_QUEUE_COUNT / <span class="number">2</span>],</span><br><span class="line">.do_targetq = &amp;_dispatch_root_queue[<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li>
<li><p><code>_dispatch_mgr_q</code> 管理队列</p>
<p><em>注：这个队列是GCD内部使用，不对外公开</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> _<span class="title">dispatch_mgr_q</span> =</span> &#123;</span><br><span class="line">  .do_vtable = &amp;_dispatch_queue_mgr_vtable,</span><br><span class="line">  .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">  .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">  .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">  .do_targetq = &amp;_dispatch_root_queues[DISPATCH_ROOT_QUEUE_COUNT - <span class="number">1</span>],</span><br><span class="line"></span><br><span class="line">  .dq_label = <span class="string">&quot;com.apple.libdispatch-manager&quot;</span>,</span><br><span class="line">  .dq_width = <span class="number">1</span>,</span><br><span class="line">  .dq_serialnum = <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_vtable_s</span> _<span class="title">dispatch_queue_mgr_vtable</span> =</span> &#123;</span><br><span class="line">  .do_type = DISPATCH_QUEUE_MGR_TYPE,</span><br><span class="line">  .do_kind = <span class="string">&quot;mgr-queue&quot;</span>,</span><br><span class="line">  .do_invoke = _dispatch_mgr_invoke,</span><br><span class="line">  .do_debug = dispatch_queue_debug,</span><br><span class="line">  .do_probe = _dispatch_mgr_wakeup,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>管理队列的<code>do_targetq</code> 为 “com.apple.root.high-overcommit-priority” 的全局队列</p>
</li>
<li><p>全局队列：<code>dispatch_get_global_queue</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  DISPATCH_QUEUE_PRIORITY_HIGH = <span class="number">2</span>,</span><br><span class="line">  DISPATCH_QUEUE_PRIORITY_DEFAULT = <span class="number">0</span>,</span><br><span class="line">  DISPATCH_QUEUE_PRIORITY_LOW = <span class="number">-2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> <span class="built_in">dispatch_get_gloabl_queue</span>(<span class="keyword">long</span> priority, <span class="keyword">unsigned</span> <span class="keyword">long</span> flags) &#123;</span><br><span class="line">  <span class="keyword">if</span> (flags &amp; ~DISPATCH_QUEUE_OVERCOMMIT) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _dispatch_get_root_queue(priority, flags &amp; DISPATCH_QUEUE_OVERCOMMIT)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">dispatch_queue_t</span> _dispatch_get_root_queue(<span class="keyword">long</span> priority, <span class="keyword">bool</span> overcommit) &#123;</span><br><span class="line">  <span class="keyword">if</span> (overcommit) &#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (priority) &#123;</span><br><span class="line">      <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_LOW:</span><br><span class="line">            <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_DEFAULT:</span><br><span class="line">            <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">3</span>];</span><br><span class="line">      <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_HIGH:</span><br><span class="line">            <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in"><span class="keyword">switch</span></span> (priority) &#123;</span><br><span class="line">    <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_LOW:</span><br><span class="line">        <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_DEFAULT:</span><br><span class="line">        <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_HIGH:</span><br><span class="line">        <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不同的libdispatch的全局队列数量可能不同，此版本的源码中只定义了6个全局队列，最新的版本的全局队列可能定义了8个或者8个以上</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> _<span class="title">dispatch_root_queues</span>[] =</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">0</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.low-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">4</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">1</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.low-overcommit-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">5</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">2</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.default-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">6</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.default-overcommit-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">7</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">4</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.high-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">8</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">5</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.high-overcommit-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">9</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>自定义队列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">dispatch_queue_t</span> <span class="title">dispatch_queue_create</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *label, <span class="keyword">dispatch_queue_attr_t</span> attr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">dispatch_queue_t</span> dq;</span><br><span class="line">  <span class="keyword">size_t</span> label_len;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!label) &#123;</span><br><span class="line">    label = <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取名称的长度</span></span><br><span class="line">  label_len = <span class="built_in">str_len</span>(label);</span><br><span class="line">  <span class="keyword">if</span> (label_len &lt; (DISPATCH_QUEUE_MIN_LABEL_SIZE - <span class="number">1</span>)) &#123;</span><br><span class="line">    label_len = DISPATCH_QUEUE_MIN_LABEL_SIZE - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 申请队列内存</span></span><br><span class="line">  dq = <span class="built_in">calloc</span>(<span class="number">1ul</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(struct dispatch_queue_s) - DISPATCH_QUEUE_MIN_LABEL_SIZE + label_len + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">slowpath</span>(!dq)) &#123;</span><br><span class="line">    <span class="keyword">return</span> dq;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置自定义队列的基本属性</span></span><br><span class="line">  _dispatch_queue_init(dq);</span><br><span class="line">  <span class="comment">// 设置队列名称</span></span><br><span class="line">  <span class="built_in">strcpy</span>(dq-&gt;dq_label, label);</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DISPATCH_NO_LEGACY</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">slowpath</span>(attr)) &#123;</span><br><span class="line">    <span class="comment">// 获取一个全局队列，它有两个参数，分别表示优先级和是否支持overcommit</span></span><br><span class="line">    <span class="comment">// 带有overcommit 的队列表示每当有任务提交时，系统都会新开一个线程处理，这样就不会造成某一个线程过载</span></span><br><span class="line">    dq-&gt;do_targetq = _dispatch_get_root_queue(attr-&gt;qa_priority, attr-&gt;qa_flags &amp; DISPATCH_QUEUE_OVERCOMMIT);</span><br><span class="line">    dq-&gt;dq_finalizer_ctxt = attr-&gt;finalizer_ctxt;</span><br><span class="line">    dq-&gt;dq_finalizer_func = attr-&gt;finalizer_func;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Block 特殊处理</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> __BLOCKS__</span></span><br><span class="line">    <span class="keyword">if</span> (attr-&gt;finalizer_func == (<span class="keyword">void</span> *)_dispatch_call_block_and_release2) &#123;</span><br><span class="line">      <span class="comment">// 如果finalizer_ctxt是一个Block，需要进行retain</span></span><br><span class="line">      dq-&gt;dq_finalizer_ctxt = <span class="built_in">Block_copy</span>(dq-&gt;dq_finalizer_ctxt);</span><br><span class="line">      <span class="keyword">if</span> (!(dq-&gt;dq_finalizer_ctxt)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> out_bad;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> dq;</span><br><span class="line">  </span><br><span class="line">out_bad:</span><br><span class="line">  <span class="built_in">free</span>(dq);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来看看<code>_dispatch_queue_init</code> 函数的内部实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _dispatch_queue_init(<span class="keyword">dispatch_queue_t</span> dq) &#123;</span><br><span class="line">  dq-&gt;do_vtable = &amp;_dispatch_queue_vtable;</span><br><span class="line">  dq-&gt;do_next = DISPATCH_OBJECT_LISTLESS;</span><br><span class="line">  dq-&gt;do_ref_cnt = <span class="number">1</span>;</span><br><span class="line">  dq-&gt;do_xref_cnt = <span class="number">1</span>;</span><br><span class="line">  dq-&gt;do_targetq = _dispatch_get_root_queue(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">  dq-&gt;dq_running = <span class="number">0</span>;</span><br><span class="line">  dq-&gt;dq_width = <span class="number">1</span>;</span><br><span class="line">  dq-&gt;dq_serialnum = <span class="built_in">dispatch_atomic_inc</span>(&amp;_dispatch_queue_serial_numbers) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>通过前面全局队列的代码可发现，全局并发队列的并发数<code>dq_width</code>均为<code>UINT32_MAX</code>，而这里<code>_dispatch_queue_init</code>中的<code>dq_width</code>为1，说明这是一个串行队列的默认设置</em></p>
<p><em>另外<code>dq-&gt;do_targetq = _dispatch_get_root_queue(0, true)</code>，它涉及到GCD队列与block 的一个重要模型，target_queue。向任何队列中提交的 block，都会被放到它的目标队列中执行，而普通串行队列的目标队列就是一个支持 overcommit 的全局队列，全局队列的底层则是一个线程池</em></p>
<img src="/2021/11/25/libdispatch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/dispatch_thread_pool.png" class="" title="GCD线程队列">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> _dispatch_queue_serial_numbers = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// skip zero</span></span><br><span class="line"><span class="comment">// 1 - main_q</span></span><br><span class="line"><span class="comment">// 2 - mgr_q</span></span><br><span class="line"><span class="comment">// 3 - _unused_</span></span><br><span class="line"><span class="comment">// 4, 5, 6, 7, 8, 9 - global queues</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_queue_attr_t</code> 的特殊处理</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dispatch_call_block_and_release2(<span class="keyword">void</span> *block, <span class="keyword">void</span> *ctxt) &#123;</span><br><span class="line">  <span class="built_in"><span class="keyword">void</span></span> (^b)(<span class="keyword">void</span> *) = block;</span><br><span class="line">  <span class="built_in">b</span>(ctxt);</span><br><span class="line">  <span class="built_in">Block_release</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>如果在自定义队列是传递了attr参数，那么表示支持overcommit，带有overcommit 的队列表示每当有任务提交时，系统都会新开一个线程处理，这样就不会造成某个线程过载，同时如果<code>finalizer_func == _dispatch_call_block_and_release2</code>需要对<code>dq_finalizer_ctxt</code>进行retain</em></p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>常用API解析</p>
<ol>
<li><code>dispatch_async</code></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch_async</span><span class="params">(<span class="keyword">dispatch_queue_t</span> dq, <span class="keyword">void</span> (^work)(<span class="keyword">void</span>))</span> </span>&#123;</span><br><span class="line">  <span class="built_in">dispatch_async_f</span>(dq, _dispatch_Block_copy(work), _dispatch_call_block_and_release);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    (1)<code>dispatch_Block_copy</code> 在堆上创建传入的block 的拷贝，或者增加引用计数，这样就保证了block在执行之前不会销毁</p>
</li>
</ul>
<p>​           (2) <code>_dispatch_call_block_and_release</code> 的定义如下，顾名思义，调用block，然后将block销毁</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dispatch_call_block_and_release(<span class="keyword">void</span> *block) &#123;</span><br><span class="line">  <span class="built_in"><span class="keyword">void</span></span> (^b)(<span class="keyword">void</span>) = block;</span><br><span class="line">  <span class="built_in">b</span>();</span><br><span class="line">  <span class="built_in">Block_release</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​            (3) <code>dispatch_async_f</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch_async_f</span><span class="params">(<span class="keyword">dispatch_queue_t</span> dq, <span class="keyword">void</span> *ctxt, <span class="keyword">dispatch_function_t</span> func)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">dispatch_continuation_t</span> dc = <span class="built_in">fastpath</span>(_dispatch_continuation_alloc_cacheonly());</span><br><span class="line">  <span class="keyword">if</span> (!dc) &#123;</span><br><span class="line">    <span class="keyword">return</span> _dispatch_async_f_slow(dq, ctxt, func);</span><br><span class="line">  &#125;</span><br><span class="line">  dc-&gt;do_vtable = (<span class="keyword">void</span> *)DISPATCH_OBJ_ASYNC_BIT;</span><br><span class="line">  dc-&gt;dc_func = func;</span><br><span class="line">  dc-&gt;dc_ctxt = ctxt;</span><br><span class="line">  _dispatch_queue_push(dq, dc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​            (4) <code>dispatch_continuation_alloc_cacheonly</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">dispatch_continuation_t</span> _dispatch_continuation_alloc_cacheonly(<span class="keyword">void</span>) &#123;</span><br><span class="line">  <span class="keyword">dispatch_continuation_t</span> dc = <span class="built_in">fastpath</span>(_dispatch_thread_getspecific(dispatch_cache_key));</span><br><span class="line">  <span class="keyword">if</span> (dc) &#123;</span><br><span class="line">    _disoatch_thread_setspecific(dispatch_cache_key, dc-&gt;do_next);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        <em>这个函数的目的是从线程的TLS中提取出一个<code>dispatch_continuation_t</code>的结构</em></p>
<p>​        <em>TLS：线程的稀有存储，线程都是有自己的私有存储的，这些私有存储不会被其他线程所使用</em></p>
<p>​        <em>如果线程中的TLS不存在<code>dispatch_continuation_t</code>结构的数据，则走<code>_dispatch_async_f_slow()</code>函数</em></p>
<p>​        <em>如果dc不为空，设置其do_vtable为DISPATCH_OBJ_ASYNC_BIT（主要用于区分类型），把传入的block传给dc的dc_ctxt作为上下文，最后将dc的dc_func设置为_dispatch_call_block_and_release，最后调用_dispatch_queue_push进行入队操作</em></p>
<p>​        <em><code>DISPATCH_OBJ_ASYNC_BIT</code>是一个宏，为了区分async，group和barrier</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_OBJ_ASYNC_BIT  0x1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_OBJ_BARRIER_BIT    0x2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_OBJ_GROUP_BIT  0x4</span></span><br></pre></td></tr></table></figure>

<p>​            (5) <code>_dispatch_async_f_slow</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">DISPATCH_NOINLINE <span class="keyword">static</span> <span class="keyword">void</span> _dispatch_async_f_slow(<span class="keyword">dispatch_queue_t</span> dq, <span class="keyword">void</span> *context, <span class="keyword">dispatch_function_t</span> func) &#123;</span><br><span class="line">  <span class="keyword">dispatch_continuation_t</span> dc = <span class="built_in">fastpath</span>(_dispatch_continuation_alloc_from_heap());</span><br><span class="line">  dc-&gt;do_vtable = (<span class="keyword">void</span> *)DISPATCH_OBJ_ASYNC_BIT;</span><br><span class="line">  dc-&gt;dc_func = func;</span><br><span class="line">  dc-&gt;dc_ctxt = context;</span><br><span class="line">  <span class="comment">// 往dq这个队列中压入了一个续体dc</span></span><br><span class="line">  _dispatch_queue_push(dq, dc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dispatch_continuation_t</span> _dispatch_continuation_alloc_from_heap(<span class="keyword">void</span>) &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">dispatch_once_t</span> pred;</span><br><span class="line">  <span class="keyword">dispatch_continuation_t</span> dc;</span><br><span class="line">  <span class="built_in">dispatch_once_f</span>(&amp;pred, <span class="literal">NULL</span>, _dispatch_ccache_init);</span><br><span class="line">  <span class="keyword">while</span> (!(dc = <span class="built_in">fastpath</span>(<span class="built_in">malloc_zone_calloc</span>(_dispatch_ccache_zone, <span class="number">1</span>, <span class="built_in">ROUND_UP_TO_CACHELINE_SIZE</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(*dc)))))) &#123;</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​            (6) <code>_dispatch_queue_push</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _dispatch_queue_push(x, y) _dispatch_queue_push_list((x), (y), (y))</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> _dispatch_queue_push_list(<span class="keyword">dispatch_queue_t</span>, dq, <span class="keyword">dispatch_object_t</span> _head, <span class="keyword">dispatch_object_t</span> _tail) &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_object_s</span> *<span class="title">prev</span>, *<span class="title">head</span> =</span> _head._do, *tail = _tail._do;</span><br><span class="line">  tail-&gt;do_next = <span class="literal">NULL</span>;</span><br><span class="line">  prev = <span class="built_in">fastpath</span>(<span class="built_in">dispatch_atomic_xchg</span>(&amp;dq-&gt;dq_items_tail, tail));</span><br><span class="line">  <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">    prev-&gt;do_next = head;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _dispatch_queue_push_list_slow(dq, head);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dispatch_queue_push_list_slow(<span class="keyword">dispatch_queue_t</span> dq, struct dispatch_object_s *obj)</span><br><span class="line">&#123;</span><br><span class="line">    _dispatch_retain(dq);</span><br><span class="line">    dq-&gt;dq_items_head = obj;</span><br><span class="line">    _dispatch_wakeup(dq);</span><br><span class="line">    _dispatch_release(dq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><code>_dispatch_queue_push_list_slow</code>直接将<code>dq-&gt;dq_items_head</code>设置为dc，然后调用<code>_dispatch_wakeup</code>唤醒这个队列。这里直接执行<code>_dispatch_wakeup</code>的原因是此时队列为空，没有任务执行，处于休眠状态，所以需要唤醒。</em></p>
<p>​            (7) <code>_dispatch_wakeup</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dispatch_queue_t</span> _dispatch_wakeup(<span class="keyword">dispatch_object_t</span> dou) &#123;</span><br><span class="line">  <span class="keyword">dispatch_queue_t</span> tq;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">slowpath</span>(<span class="built_in">DISPATCH_OBJECT_SUSPEND</span>(dou._do))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 全局队列的dx_probe指向了_dispatch_queue_wakeup_gloabl，这里走唤醒逻辑，如果唤醒失败，且队尾指针为空，则返回NULL</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">dx_probe</span>(dou._do) &amp;&amp; !dou._dq-&gt;dq_items_tail) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!_dispatch_trylock(dou._do)) &#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> DISPATCH_COCOA_COMPAT</span></span><br><span class="line">    <span class="keyword">if</span> (dou._dq == $_dispatch_main_q) &#123;</span><br><span class="line">      <span class="comment">// 传入主队列，会进入到 _dispatch_queue_wakeup_main() 函数中</span></span><br><span class="line">      _dispatch_queue_wakeup_main();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 传入全局队列，会进入到 _dispatch_queue_wakeup_gloabl()函数中</span></span><br><span class="line">      _dispatch_queue_wakeup_global(dou._dq);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _dispatch_retain(dou._do);</span><br><span class="line">  tq = dou._do-&gt;do_targetq;</span><br><span class="line">  _dispatch_queue_push(tq, dou._do);</span><br><span class="line">  <span class="keyword">return</span> tq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dispatch_queue_wakeup_main(<span class="keyword">void</span>) &#123;</span><br><span class="line">  <span class="keyword">kern_return_t</span> kr;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// dispatch_once_f 保证只初始化一次</span></span><br><span class="line">  <span class="built_in">dispatch_once_f</span>(&amp;_dispatch_main_q_port_pred, <span class="literal">NULL</span>, _dispatch_main_q_port_init);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 唤醒主线程(核心逻辑在这里，未开源)</span></span><br><span class="line">  kr = _dispatch_send_wakeup_main_thread(main_q_port, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in"><span class="keyword">switch</span></span> (kr) &#123;</span><br><span class="line">    <span class="keyword">case</span> MACH_SEND_TIMEOUT:</span><br><span class="line">    <span class="keyword">case</span> MACH_SEND_TIMED_OUT:</span><br><span class="line">    <span class="keyword">case</span> MACH_SEND_INVALID_DEST:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">dispatch_assume_zero</span>(kr);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _dispatch_safe_fork = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> _dispatch_queue_wakeup_global(<span class="keyword">dispatch_queue_t</span> dq) &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">dispatch_once_t</span> pred;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_root_queue_context_s</span> *<span class="title">qc</span> =</span> dq-&gt;do_ctxt;</span><br><span class="line">  <span class="keyword">pthred_workitem_handle_t</span> wh;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> gen_cnt;</span><br><span class="line">  <span class="keyword">pthread_t</span> pthr;</span><br><span class="line">  <span class="keyword">int</span> r, t_count;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!dq-&gt;dq_items_tail) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  _dispatch_safe_fork = <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">dispatch_debug_queue</span>(dq, __PRETTY_FUNCTION__);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 全局队列的检测，初始化和配置环境（只调用一次）</span></span><br><span class="line">  <span class="built_in">dispatch_once_f</span>(&amp;pred, <span class="literal">NULL</span>&lt; _dispatch_root_queues_init);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果队列的dgq_kworkqueue不为空，则</span></span><br><span class="line">  <span class="keyword">if</span> (qc-&gt;dgq_kworkqueue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dispatch_atomic_cmpxchg</span>(&amp;qc-&gt;dgq_pending, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">      _dispatch_debug(<span class="string">&quot;requesting new worker thread&quot;</span>);</span><br><span class="line">      r = <span class="built_in">pthread_workqueue_additem_np</span>(qc-&gt;dgq_kworkqueue, _dispatch_worker_thread2, dq, &amp;wh, &amp;gen_cnt);</span><br><span class="line">      <span class="built_in">dispatch_assume_zero</span>(r);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _dispatch_debug(<span class="string">&quot;work thread request still pending on global queue: %p&quot;</span>, dq);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送一个信号量，这是一种线程保活的方法</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">dispatch_semaphore_signal</span>(qc-&gt;dgq_thread_mediator)) &#123;</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm算法笔记</title>
    <url>/2021/11/25/Algorithm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Pino的算法笔记"><a href="#Pino的算法笔记" class="headerlink" title="Pino的算法笔记"></a>Pino的算法笔记</h2><h3 id="一、动态规划"><a href="#一、动态规划" class="headerlink" title="一、动态规划"></a>一、动态规划</h3><img src="/2021/11/25/Algorithm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/scroll_array_example1.jpg" class="" title="滚动数组算法题">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> n = cost.<span class="built_in">size</span>();</span><br><span class="line">      <span class="keyword">int</span> prev = <span class="number">0</span>, curr = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> next = <span class="built_in">min</span>(curr + cost[i - <span class="number">1</span>], prev + cost[i - <span class="number">2</span>]);</span><br><span class="line">        prev = curr;</span><br><span class="line">        curr = next;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> curr;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">  	<span class="comment">// 另一种滚动数组</span></span><br><span class="line">  	<span class="function"><span class="keyword">int</span> <span class="title">minCostClimbingStairs</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; cost)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> n = cost.<span class="built_in">size</span>();</span><br><span class="line">      <span class="function">vector&lt;<span class="keyword">int</span>&gt; <span class="title">dp</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">      dp[<span class="number">0</span>] = dp[<span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        dp[i] = <span class="built_in">min</span>(dp[i - <span class="number">1</span>] + cost[i - <span class="number">1</span>], dp[i - <span class="number">2</span>] + cost[i - <span class="number">2</span>]]);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> dp[n];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Algorithm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/delete_point_example.jpg" class="" title="删除并获得点数">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">deleteAndEarn</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> maxVal = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> val : nums) &#123;</span><br><span class="line">            maxVal = std::<span class="built_in">max</span>(maxVal, val);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">std::vector&lt;<span class="keyword">int</span>&gt; <span class="title">sum</span><span class="params">(maxVal + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> val : nums) &#123;</span><br><span class="line">            sum[val] += val;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">rob</span>(sum);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">rob</span><span class="params">(std::vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">size_t</span> size = nums.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">int</span> first = nums[<span class="number">0</span>], second = std::<span class="built_in">max</span>(nums[<span class="number">0</span>], nums[<span class="number">1</span>]);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; size; i++) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = second;</span><br><span class="line">            second = std::<span class="built_in">max</span>(first + nums[i], second);</span><br><span class="line">            first = temp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> second;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>



<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">maxSubArray</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> result = nums[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> val : nums) &#123;</span><br><span class="line">          pre = <span class="built_in">max</span>(pre + val, val);</span><br><span class="line">          result = <span class="built_in">max</span>(pre, result);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Algorithm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/max_circular_subarray.jpg" class="" title="环形数组的最大子数组">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">int</span> <span class="title">maxSubarraySumCircular</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> maxPre = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> minPre = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">int</span> maxSubarray = nums[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">int</span> minSubarray = nums[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">int</span> curMax = <span class="number">0</span>;</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> val : nums) &#123;</span><br><span class="line">          curMax += val;</span><br><span class="line">          minPre = <span class="built_in">min</span>(minPre + val, val);</span><br><span class="line">          minSubarray = <span class="built_in">min</span>(minPre, minSubarray);</span><br><span class="line">          maxPre = <span class="built_in">max</span>(maxPre + val, val);</span><br><span class="line">          maxSubarray = <span class="built_in">max</span>(maxPre, maxSubarray);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> maxSubarray &gt; <span class="number">0</span> ? <span class="built_in">max</span>(maxSubarray, curMax - minSubarray) : maxSubarray;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Algorithm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/product_max_subarray.jpg" class="" title="乘积最大子数组">

<p>这道题使用最大子序和的思想会有问题，因为有可能有负负得正的情况，所以需要将最大和最小的乘积结果都算出来然后交叉相乘看有没有负负得正的情况。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">int</span> <span class="title">maxProduct</span><span class="params">(std::vector&lt;<span class="keyword">int</span>&gt; &amp;nums)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> maxF = nums[<span class="number">0</span>], minF = nums[<span class="number">0</span>], ans = nums[<span class="number">0</span>];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">          <span class="keyword">int</span> max = maxF, min = minF;</span><br><span class="line">          maxF = std::<span class="built_in">max</span>(max * nums[i], std::<span class="built_in">max</span>(nums[i], min * nums[i]));</span><br><span class="line">          minF = std::<span class="built_in">min</span>(min * nums[i], std::<span class="built_in">min</span>(nums[i], max * nums[i]));</span><br><span class="line">          ans = std::<span class="built_in">max</span>(maxF, ans);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ans;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Algorithm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/positive_max_subarray_length.jpg" class="" title="最大乘积为正数的子数组长度">

<p>找到第一个为负数的下标，并计算数组中负数的个数，如果为奇数则以第一个负数为分界点比较左右两边的数组的长度大小，如果为偶数则为整个数组的长度</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Solution</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">int</span> <span class="title">getMaxLen</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">      <span class="keyword">int</span> neg = <span class="number">0</span>, pos = <span class="number">0</span>, firstNeg = <span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">int</span> maxAns = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; nums.<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">          <span class="keyword">if</span> (nums[i] == <span class="number">0</span>) &#123;</span><br><span class="line">              pos = <span class="number">0</span>;</span><br><span class="line">              neg = <span class="number">0</span>;</span><br><span class="line">              firstNeg = <span class="number">-1</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[i] &gt; <span class="number">0</span>) &#123;</span><br><span class="line">              pos++;</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="keyword">if</span> (firstNeg == <span class="number">-1</span>) &#123;</span><br><span class="line">                  firstNeg = i;</span><br><span class="line">              &#125;</span><br><span class="line">              neg++;</span><br><span class="line">          &#125;</span><br><span class="line">          <span class="keyword">if</span> (neg % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">              maxAns = std::<span class="built_in">max</span>(maxAns, pos + neg);</span><br><span class="line">          &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              maxAns = std::<span class="built_in">max</span>(maxAns, i - firstNeg);</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> maxAns;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Algorithm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/max_score_sight.jpg" class="" title="最佳观光组合">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxScoreSightseeingPair</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;values)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> size = values.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>, mx = values[<span class="number">0</span>] + <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">1</span>; j &lt; size; j++) &#123;</span><br><span class="line">        ans = std::<span class="built_in">max</span>(ans, mx + values[j] - j);</span><br><span class="line">        mx = std::<span class="built_in">max</span>(mx, values[j] + j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Algorithm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/max_score_one.jpg" class="" title="买卖股票的最佳时机">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt; &amp;prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> size = prices.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>, prev = prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        result = std::<span class="built_in">max</span>(result, prices[i] - prev);</span><br><span class="line">        prev = std::<span class="built_in">min</span>(prev, prices[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/Algorithm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/max_profit_two.jpg" class="" title="买卖股票的最佳时机二">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxProfit</span><span class="params">(vector&lt;<span class="keyword">int</span>&gt;&amp; prices)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">size_t</span> size = prices.<span class="built_in">size</span>();</span><br><span class="line">    <span class="keyword">int</span> result = <span class="number">0</span>, prev = prices[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; size; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (prices[i] - prev &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            result = std::<span class="built_in">max</span>(result, result + prices[i] - prev);</span><br><span class="line">            prev = prices[i];</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            prev = prices[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>算法</category>
        <category>C++</category>
        <category>Go</category>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>费脑</tag>
      </tags>
  </entry>
  <entry>
    <title>RxSwift源码解析</title>
    <url>/2021/11/26/RxSwift%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h2 id="一、为什么要使用RxSwift"><a href="#一、为什么要使用RxSwift" class="headerlink" title="一、为什么要使用RxSwift"></a>一、为什么要使用<code>RxSwift</code></h2><ul>
<li>RxSwift作为一个响应式编程框架，带来的第一个好处在于逻辑的聚合。大家在平常APP开发过程中，会处理大量的用户交互事件，并且会涉及到大量的逻辑跳转，通过闭包、代理、通知、KVO等等方式来传递数据。这就会导致业务逻辑的分散，同一条业务链很可能分散在多个类当中，从而给调试和排错带来难度，也就容易为Bug的出现埋下隐患。而通过RxSwift，则可以通过RxSwift提供的各种操作符实现逻辑的聚合。</li>
</ul>
<h2 id="二、为什么要阅读RxSwift源码"><a href="#二、为什么要阅读RxSwift源码" class="headerlink" title="二、为什么要阅读RxSwift源码"></a>二、为什么要阅读<code>RxSwift</code>源码</h2><ul>
<li>由于<code>RxSwift</code>是一个高度封装的框架，代码高度抽象，随着不同操作符的作用，其调用链也会变得极度复杂，这就给我们debug带来了巨大的挑战，所以需要阅读源码来理解其中的原理和过程。</li>
</ul>
<h2 id="三、RxSwift核心概念"><a href="#三、RxSwift核心概念" class="headerlink" title="三、RxSwift核心概念"></a>三、<code>RxSwift</code>核心概念</h2><h3 id="1-Observable"><a href="#1-Observable" class="headerlink" title="1. Observable"></a>1. Observable</h3><ul>
<li><p><code>ObservableConvertibleType</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ObservableConvertibleType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">asObservable</span>()</span> -&gt; <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>ObservableType</code>  </p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ObservableType</span>: <span class="title">ObservableConvertibleType</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">subscribe</span>&lt;<span class="type">Observer</span>: <span class="type">ObserverType</span>&gt;(<span class="keyword">_</span> <span class="params">observer</span>: <span class="type">Observer</span>)</span> -&gt; <span class="type">Disposable</span> <span class="keyword">where</span> <span class="type">Observer</span>.<span class="type">Element</span> <span class="operator">==</span> <span class="type">Element</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ObservableType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">public</span> <span class="function"><span class="keyword">func</span> <span class="title">asObservable</span>()</span> -&gt; <span class="type">Observable</span>&lt;<span class="type">Element</span>&gt; &#123;</span><br><span class="line">    <span class="type">Observable</span>.create &#123; o <span class="keyword">in</span> <span class="keyword">self</span>.subsribe(o) &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="2-Observer"><a href="#2-Observer" class="headerlink" title="2. Observer"></a>2. Observer</h3><ul>
<li><p><code>Observer</code></p>
<figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">protocol</span> <span class="title">ObserverType</span> </span>&#123;</span><br><span class="line">  <span class="keyword">associatedtype</span> <span class="type">Element</span></span><br><span class="line">  <span class="function"><span class="keyword">func</span> <span class="title">on</span>(<span class="keyword">_</span> <span class="params">event</span>: <span class="type">Event</span>&lt;<span class="type">Element</span>&gt;)</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@frozen</span> <span class="keyword">public</span> <span class="class"><span class="keyword">enum</span> <span class="title">Event</span>&lt;<span class="title">Element</span>&gt; </span>&#123;</span><br><span class="line">  <span class="keyword">case</span> next(<span class="type">Element</span>) <span class="comment">// 一个正常的事件</span></span><br><span class="line">  <span class="keyword">case</span> error(<span class="type">Swift</span>.<span class="type">Error</span>) <span class="comment">// 一个错误的事件</span></span><br><span class="line">  <span class="keyword">case</span> completed <span class="comment">// 一个完成的事件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><code>Observable</code> —– <code>operator</code> ——&gt; <code>Observable</code> ——– <code>subscribe</code> ——–&gt; <code>Observer</code></p>
<p><code>Observable</code> 通过操作符 <code>operator</code> 转换成另外一个 <code>Observable</code> 再进行订阅 <code>Observer</code> 实现事件的转换和绑定</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Swift</category>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>源码解析</tag>
      </tags>
  </entry>
  <entry>
    <title>记一次iOS工程的架构历程</title>
    <url>/2021/11/27/%E8%AE%B0%E4%B8%80%E6%AC%A1iOS%E5%B7%A5%E7%A8%8B%E7%9A%84%E6%9E%B6%E6%9E%84%E5%8E%86%E7%A8%8B/</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>iOS底层学习笔记</title>
    <url>/2021/12/22/iOS%E5%BA%95%E5%B1%82%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Category"><a href="#Category" class="headerlink" title="Category"></a>Category</h2><h5 id="Category结构"><a href="#Category结构" class="headerlink" title="Category结构"></a>Category结构</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">category_t</span> &#123;</span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *name; <span class="comment">// 类名</span></span><br><span class="line">    <span class="keyword">classref_t</span> cls;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">method_list_t</span> *<span class="title">instanceMethods</span>;</span> <span class="comment">// 实例方法列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">method_list_t</span> *<span class="title">classMethods</span>;</span> <span class="comment">// 类方法列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">protocol_list_t</span> *<span class="title">protocols</span>;</span> <span class="comment">// 协议列表</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">property_list_t</span> *<span class="title">instanceProperties</span>;</span> <span class="comment">// 实例属性列表</span></span><br><span class="line">    <span class="comment">// Fields below this point are not always present on disk.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">property_list_t</span> *_<span class="title">classProperties</span>;</span> <span class="comment">// 类属性列表</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">method_list_t</span> *<span class="title">methodsForMeta</span><span class="params">(<span class="keyword">bool</span> isMeta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isMeta) <span class="keyword">return</span> classMethods;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> instanceMethods;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">property_list_t</span> *<span class="title">propertiesForMeta</span><span class="params">(<span class="keyword">bool</span> isMeta, struct header_info *hi)</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">protocol_list_t</span> *<span class="title">protocolsForMeta</span><span class="params">(<span class="keyword">bool</span> isMeta)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (isMeta) <span class="keyword">return</span> <span class="literal">nullptr</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> protocols;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h5 id="为什么category-中的同名方法会覆盖类中的方法"><a href="#为什么category-中的同名方法会覆盖类中的方法" class="headerlink" title="为什么category 中的同名方法会覆盖类中的方法"></a>为什么<code>category </code>中的同名方法会覆盖类中的方法</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">attachLists</span><span class="params">(List* <span class="keyword">const</span> * addedLists, <span class="keyword">uint32_t</span> addedCount)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (addedCount == <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (hasArray()) &#123;</span><br><span class="line">            <span class="comment">// many lists -&gt; many lists</span></span><br><span class="line">            <span class="keyword">uint32_t</span> oldCount = <span class="built_in">array</span>()-&gt;count;</span><br><span class="line">            <span class="keyword">uint32_t</span> newCount = oldCount + addedCount;</span><br><span class="line">            setArray((<span class="keyword">array_t</span> *)<span class="built_in">realloc</span>(<span class="built_in">array</span>(), <span class="keyword">array_t</span>::byteSize(newCount)));</span><br><span class="line">            <span class="built_in">array</span>()-&gt;count = newCount;</span><br><span class="line">          <span class="comment">// 这里将原来类的方法列表的内存移动到了 addedCount 之后，给分类中的方法空出位置，分类方法在列表中是放在类中方法的前面，所以如果调用方法在方法列表中找到第一个同名方法就会直接调用，导致方法列表中排在后面的方法不会调用</span></span><br><span class="line">            memmove(<span class="built_in">array</span>()-&gt;lists + addedCount, <span class="built_in">array</span>()-&gt;lists, </span><br><span class="line">                    oldCount * <span class="keyword">sizeof</span>(<span class="built_in">array</span>()-&gt;lists[<span class="number">0</span>]));</span><br><span class="line">          <span class="comment">// 将所有的方法列表拷贝到空出来的位置</span></span><br><span class="line">            <span class="built_in">memcpy</span>(<span class="built_in">array</span>()-&gt;lists, addedLists, </span><br><span class="line">                   addedCount * <span class="keyword">sizeof</span>(<span class="built_in">array</span>()-&gt;lists[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="built_in">list</span>  &amp;&amp;  addedCount == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 0 lists -&gt; 1 list</span></span><br><span class="line">            <span class="built_in">list</span> = addedLists[<span class="number">0</span>];</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 1 list -&gt; many lists</span></span><br><span class="line">            List* oldList = <span class="built_in">list</span>;</span><br><span class="line">            <span class="keyword">uint32_t</span> oldCount = oldList ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">uint32_t</span> newCount = oldCount + addedCount;</span><br><span class="line">            setArray((<span class="keyword">array_t</span> *)<span class="built_in">malloc</span>(<span class="keyword">array_t</span>::byteSize(newCount)));</span><br><span class="line">            <span class="built_in">array</span>()-&gt;count = newCount;</span><br><span class="line">            <span class="keyword">if</span> (oldList) <span class="built_in">array</span>()-&gt;lists[addedCount] = oldList;</span><br><span class="line">            <span class="built_in">memcpy</span>(<span class="built_in">array</span>()-&gt;lists, addedLists, </span><br><span class="line">                   addedCount * <span class="keyword">sizeof</span>(<span class="built_in">array</span>()-&gt;lists[<span class="number">0</span>]));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>保证分类方法优先调用，如果有同名方法，如何调用排在后面的方法？</p>
<p>使用运行时的特性，找到排在后面的方法的内存地址直接调用。</p>
<p>分类中的方法的调用顺序：看编译顺序</p>
<h5 id="静态库中的分类设置"><a href="#静态库中的分类设置" class="headerlink" title="静态库中的分类设置"></a>静态库中的分类设置</h5><p>如果需要将静态库中的分类也能够调用，需要在静态库工程中设置<code>other linker flags</code>为<code>-all_load</code></p>
<h5 id="为什么Category中不能添加成员变量"><a href="#为什么Category中不能添加成员变量" class="headerlink" title="为什么Category中不能添加成员变量"></a>为什么<code>Category</code>中不能添加成员变量</h5><p>成员变量在编译的时候就会加载进内存中，换句话说就是成员变量的内存布局在编译的时候就已经确定了，而分类是基于运行时的机制，在运行时添加相关的实例方法、类方法、协议等，所以<code>Category</code>不能声明成员变量</p>
<h3 id="load方法和initialize方法"><a href="#load方法和initialize方法" class="headerlink" title="load方法和initialize方法"></a><code>load</code>方法和<code>initialize</code>方法</h3><h5 id="load什么时候调用"><a href="#load什么时候调用" class="headerlink" title="load什么时候调用"></a>load什么时候调用</h5><p>程序启动的时候调用（程序装载类信息的时候）</p>
<h5 id="load调用顺序"><a href="#load调用顺序" class="headerlink" title="load调用顺序"></a>load调用顺序</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line">OBJC_EXPORT <span class="keyword">void</span> _objc_load_image(HMODULE image, header_info *hinfo)</span><br><span class="line">&#123;</span><br><span class="line">    prepare_load_methods(hinfo);</span><br><span class="line">    call_load_methods();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">call_load_methods</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">bool</span> loading = NO;</span><br><span class="line">    <span class="keyword">bool</span> more_categories;</span><br><span class="line"></span><br><span class="line">    loadMethodLock.assertLocked();</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Re-entrant calls do nothing; the outermost call will finish the job.</span></span><br><span class="line">    <span class="keyword">if</span> (loading) <span class="keyword">return</span>;</span><br><span class="line">    loading = YES;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">void</span> *pool = objc_autoreleasePoolPush();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        <span class="comment">// 1. Repeatedly call class +loads until there aren&#x27;t any more</span></span><br><span class="line">        <span class="comment">// 1. 调用类的load方法直到所有的类都调用完成</span></span><br><span class="line">        <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            call_class_loads();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2. Call category +loads ONCE</span></span><br><span class="line">      	<span class="comment">// 2. 调用分类的load方法</span></span><br><span class="line">        more_categories = call_category_loads();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 3. Run more +loads if there are classes OR more untried categories</span></span><br><span class="line">    &#125; <span class="keyword">while</span> (loadable_classes_used &gt; <span class="number">0</span>  ||  more_categories);</span><br><span class="line"></span><br><span class="line">    objc_autoreleasePoolPop(pool);</span><br><span class="line"></span><br><span class="line">    loading = NO;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h5 id="initialize什么时候调用"><a href="#initialize什么时候调用" class="headerlink" title="initialize什么时候调用"></a><code>initialize</code>什么时候调用</h5><p>当该类第一次接收到消息的时候会调用initiallize（或者说第一次使用该类）并且只会调用一次</p>
<h5 id="initialize方法为什么不用调用super方法"><a href="#initialize方法为什么不用调用super方法" class="headerlink" title="initialize方法为什么不用调用super方法"></a><code>initialize</code>方法为什么不用调用<code>super</code>方法</h5><p>当子类的<code>initialize</code>方法调用时，要保证父类被<code>initialize</code>，所以要会先自动调用父类的<code>initialize</code></p>
<h5 id="分类中initialize方法会把类中的initialize方法覆盖掉（参考分类同名方法优先于类中同名方法调用）"><a href="#分类中initialize方法会把类中的initialize方法覆盖掉（参考分类同名方法优先于类中同名方法调用）" class="headerlink" title="分类中initialize方法会把类中的initialize方法覆盖掉（参考分类同名方法优先于类中同名方法调用）"></a>分类中<code>initialize</code>方法会把类中的<code>initialize</code>方法覆盖掉（参考分类同名方法优先于类中同名方法调用）</h5><h5 id="load方法与initialzied方法的调用区别"><a href="#load方法与initialzied方法的调用区别" class="headerlink" title="load方法与initialzied方法的调用区别"></a><code>load</code>方法与<code>initialzied</code>方法的调用区别</h5><ul>
<li><p><code>objc-initialize</code>源码实现</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">initializeNonMetaClass</span><span class="params">(Class cls)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ASSERT(!cls-&gt;isMetaClass());</span><br><span class="line"></span><br><span class="line">    Class supercls;</span><br><span class="line">    <span class="keyword">bool</span> reallyInitialize = NO;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Make sure super is done initializing BEFORE beginning to initialize cls.</span></span><br><span class="line">    <span class="comment">// See note about deadlock above.</span></span><br><span class="line">    supercls = cls-&gt;superclass;</span><br><span class="line">    <span class="keyword">if</span> (supercls  &amp;&amp;  !supercls-&gt;isInitialized()) &#123;</span><br><span class="line">        initializeNonMetaClass(supercls);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Try to atomically set CLS_INITIALIZING.</span></span><br><span class="line">    SmallVector&lt;_objc_willInitializeClassCallback, <span class="number">1</span>&gt; localWillInitializeFuncs;</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="function"><span class="keyword">monitor_locker_t</span> <span class="title">lock</span><span class="params">(classInitLock)</span></span>;</span><br><span class="line">        <span class="keyword">if</span> (!cls-&gt;isInitialized() &amp;&amp; !cls-&gt;isInitializing()) &#123;</span><br><span class="line">            cls-&gt;setInitializing();</span><br><span class="line">            reallyInitialize = YES;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// Grab a copy of the will-initialize funcs with the lock held.</span></span><br><span class="line">            localWillInitializeFuncs.initFrom(willInitializeFuncs);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (reallyInitialize) &#123;</span><br><span class="line">        <span class="comment">// We successfully set the CLS_INITIALIZING bit. Initialize the class.</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">// Record that we&#x27;re initializing this class so we can message it.</span></span><br><span class="line">        _setThisThreadIsInitializingClass(cls);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (MultithreadedForkChild) &#123;</span><br><span class="line">            <span class="comment">// LOL JK we don&#x27;t really call +initialize methods after fork().</span></span><br><span class="line">            performForkChildInitialize(cls, supercls);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">auto</span> callback : localWillInitializeFuncs)</span><br><span class="line">            callback.f(callback.context, cls);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Send the +initialize message.</span></span><br><span class="line">        <span class="comment">// Note that +initialize is sent to the superclass (again) if </span></span><br><span class="line">        <span class="comment">// this class doesn&#x27;t implement +initialize. 2157218</span></span><br><span class="line">        <span class="keyword">if</span> (PrintInitializing) &#123;</span><br><span class="line">            _objc_inform(<span class="string">&quot;INITIALIZE: thread %p: calling +[%s initialize]&quot;</span>,</span><br><span class="line">                         objc_thread_self(), cls-&gt;nameForLogging());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Exceptions: A +initialize call that throws an exception </span></span><br><span class="line">        <span class="comment">// is deemed to be a complete and successful +initialize.</span></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        <span class="comment">// Only __OBJC2__ adds these handlers. !__OBJC2__ has a</span></span><br><span class="line">        <span class="comment">// bootstrapping problem of this versus CF&#x27;s call to</span></span><br><span class="line">        <span class="comment">// objc_exception_set_functions().</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __OBJC2__</span></span><br><span class="line">        @<span class="keyword">try</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            callInitialize(cls);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (PrintInitializing) &#123;</span><br><span class="line">                _objc_inform(<span class="string">&quot;INITIALIZE: thread %p: finished +[%s initialize]&quot;</span>,</span><br><span class="line">                             objc_thread_self(), cls-&gt;nameForLogging());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __OBJC2__</span></span><br><span class="line">        @<span class="keyword">catch</span> (...) &#123;</span><br><span class="line">            <span class="keyword">if</span> (PrintInitializing) &#123;</span><br><span class="line">                _objc_inform(<span class="string">&quot;INITIALIZE: thread %p: +[%s initialize] &quot;</span></span><br><span class="line">                             <span class="string">&quot;threw an exception&quot;</span>,</span><br><span class="line">                             objc_thread_self(), cls-&gt;nameForLogging());</span><br><span class="line">            &#125;</span><br><span class="line">            @<span class="keyword">throw</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        @finally</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">// Done initializing.</span></span><br><span class="line">            lockAndFinishInitializing(cls, supercls);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cls-&gt;isInitializing()) &#123;</span><br><span class="line">        <span class="comment">// We couldn&#x27;t set INITIALIZING because INITIALIZING was already set.</span></span><br><span class="line">        <span class="comment">// If this thread set it earlier, continue normally.</span></span><br><span class="line">        <span class="comment">// If some other thread set it, block until initialize is done.</span></span><br><span class="line">        <span class="comment">// It&#x27;s ok if INITIALIZING changes to INITIALIZED while we&#x27;re here, </span></span><br><span class="line">        <span class="comment">//   because we safely check for INITIALIZED inside the lock </span></span><br><span class="line">        <span class="comment">//   before blocking.</span></span><br><span class="line">        <span class="keyword">if</span> (_thisThreadIsInitializingClass(cls)) &#123;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!MultithreadedForkChild) &#123;</span><br><span class="line">            waitForInitializeToComplete(cls);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// We&#x27;re on the child side of fork(), facing a class that</span></span><br><span class="line">            <span class="comment">// was initializing by some other thread when fork() was called.</span></span><br><span class="line">            _setThisThreadIsInitializingClass(cls);</span><br><span class="line">            performForkChildInitialize(cls, supercls);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (cls-&gt;isInitialized()) &#123;</span><br><span class="line">        <span class="comment">// Set CLS_INITIALIZING failed because someone else already </span></span><br><span class="line">        <span class="comment">//   initialized the class. Continue normally.</span></span><br><span class="line">        <span class="comment">// NOTE this check must come AFTER the ISINITIALIZING case.</span></span><br><span class="line">        <span class="comment">// Otherwise: Another thread is initializing this class. ISINITIALIZED </span></span><br><span class="line">        <span class="comment">//   is false. Skip this clause. Then the other thread finishes </span></span><br><span class="line">        <span class="comment">//   initialization and sets INITIALIZING=no and INITIALIZED=yes. </span></span><br><span class="line">        <span class="comment">//   Skip the ISINITIALIZING clause. Die horribly.</span></span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// We shouldn&#x27;t be here. </span></span><br><span class="line">        _objc_fatal(<span class="string">&quot;thread-safe class init in objc runtime is buggy!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">callInitialize</span><span class="params">(Class cls)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ((<span class="keyword">void</span>(*)(Class, SEL))objc_msgSend)(cls, @selector(initialize));</span><br><span class="line">    <span class="keyword">asm</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在源码中可看到最终调用的是<code>void callInitialized(Class cls)</code>方法，这个方法中通过使用<code>obc_msgSend</code>给类对象发消息去调用<code>initialize</code>方法，而使用这种方式调用方法会通过类对象的isa指针找到元类对象再在元类对象的方法列表中查找，而分类的方法是放在其他方法前面的，所以如果在分类中实现了<code>initialize</code>方法的话会覆盖在类中实现的<code>initialize</code>方法</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">call_class_loads</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Detach current loadable list.</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">loadable_class</span> *<span class="title">classes</span> =</span> loadable_classes;</span><br><span class="line">    <span class="keyword">int</span> used = loadable_classes_used;</span><br><span class="line">    loadable_classes = nil;</span><br><span class="line">    loadable_classes_allocated = <span class="number">0</span>;</span><br><span class="line">    loadable_classes_used = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Call all +loads for the detached list.</span></span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; used; i++) &#123;</span><br><span class="line">        Class cls = classes[i].cls;</span><br><span class="line">        <span class="keyword">load_method_t</span> load_method = (<span class="keyword">load_method_t</span>)classes[i].method; <span class="comment">// 取出load方法的指针</span></span><br><span class="line">        <span class="keyword">if</span> (!cls) <span class="keyword">continue</span>; </span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (PrintLoading) &#123;</span><br><span class="line">            _objc_inform(<span class="string">&quot;LOAD: +[%s load]\n&quot;</span>, cls-&gt;nameForLogging());</span><br><span class="line">        &#125;</span><br><span class="line">        (*load_method)(cls, @selector(load)); <span class="comment">// 通过取址调用load方法</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Destroy the detached list.</span></span><br><span class="line">    <span class="keyword">if</span> (classes) <span class="built_in">free</span>(classes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在调用<code>load</code>方法的源码中可以看出，调用<code>load</code>方法的方式是直接拿到<code>load</code>方法的内存地址直接调用</p>
</li>
</ul>
<h2 id="内存分配"><a href="#内存分配" class="headerlink" title="内存分配"></a>内存分配</h2><h5 id="内存分配对齐"><a href="#内存分配对齐" class="headerlink" title="内存分配对齐"></a>内存分配对齐</h5><p>在iOS中内存分配都是以16的倍数进行分配</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@interface TestObject: NSObject &#123;</span><br><span class="line">  int _age;</span><br><span class="line">  int _num;</span><br><span class="line">  int _height;</span><br><span class="line">&#125;</span><br><span class="line">@end</span><br><span class="line">@implementation</span><br><span class="line">@end</span><br><span class="line">// 这个OC的对象类被转换为C++，如下</span><br><span class="line">struct TestObject_IMPL &#123;</span><br><span class="line">  Class cls; // 这个类对象为8个字节</span><br><span class="line">  int _age; // 4字节</span><br><span class="line">  int _num; // 4字节</span><br><span class="line">  int _height; // 4字节</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>根据结构体的内存对齐机制应该得出<code>TestObject_IMPL</code>这个结构体的内存大小为24，但是通过<code>size_t size = malloc_size((__bridge const void *)p)</code>得出的结果是32，所以在iOS系统本身的内存分配可知，内存分配是以16的倍数对齐</p>
<h5 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h5><p>在源码<code>libmalloc</code>中的<code>nano_zone_common.h</code>文件中声明了一个常量</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NANO_MAX_SIZE			256 <span class="comment">/* Buckets sized &#123;16, 32, 48, ..., 256&#125; */</span></span></span><br></pre></td></tr></table></figure>

<p>可以看到注释中的<code>Buckets sized</code>，都是16的倍数，意思是每一个块分配的内存都是16的倍数，最大的一整块分配内存为256，如果超过一块内存超过了256字节则会启用另外的内存分配策略，现有的内存分配策略有：<code>forzen_malloc</code>、<code>legacy_malloc</code>、<code>purgeable_malloc</code>…</p>
<h2 id="LLVM"><a href="#LLVM" class="headerlink" title="LLVM"></a>LLVM</h2><p>Chris Lattner 创始人（也是Swift之父）</p>
<h4 id="OC源文件编译的过程"><a href="#OC源文件编译的过程" class="headerlink" title="OC源文件编译的过程"></a>OC源文件编译的过程</h4><p><code>clang -ccc-print-phases main.m</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0: input, &quot;main.m&quot;, objective-c</span><br><span class="line">1: preprocessor, &#123;0&#125;, objective-c-cpp-output</span><br><span class="line">2: compiler, &#123;1&#125;, ir</span><br><span class="line">3: backend, &#123;2&#125;, assembler</span><br><span class="line">4: assembler, &#123;3&#125;, object</span><br><span class="line">5: linker, &#123;4&#125;, image</span><br><span class="line">6: bind-arch, &quot;x86-64&quot;, &#123;5&#125;, image</span><br></pre></td></tr></table></figure>

<p><code>clang -E main.m</code> 查看预处理器处理过后的代码</p>
<p><code>clang -fmodules -E -Xclang -dump-tokens main.m</code>词法分析生成token</p>
<p><code>clang -fmodules -fsyntax-only -Xclang -ast-dump main.m</code> 语法分析生成语法树</p>
<p><code>clang -S -emit-llvm main.m</code> 生成LLVM IR 文本格式，扩展名为<code>.ll</code></p>
<p><code>clang -c -emit-llvm main.m</code> 生成LLVM IR 二进制格式，扩展名为<code>.bc</code></p>
<h4 id="编译LLVM"><a href="#编译LLVM" class="headerlink" title="编译LLVM"></a>编译LLVM</h4><h6 id="cmake、-ninja"><a href="#cmake、-ninja" class="headerlink" title="cmake、 ninja"></a><code>cmake</code>、 <code>ninja</code></h6><ol>
<li><code>cmake -G Ninja ../llvm -DCMAKE_INSTALL_PREFIX=../llvm_release</code>  编译LLVM</li>
<li><code>ninja</code></li>
<li><code>ninja install</code></li>
</ol>
<p>生成XCode项目，并使用XCode编译llvm</p>
<p><code>cmake -G Xcode ../llvm</code> </p>
<h2 id="iOS-代码混淆"><a href="#iOS-代码混淆" class="headerlink" title="iOS 代码混淆"></a>iOS 代码混淆</h2><h5 id="宏定义进行混淆"><a href="#宏定义进行混淆" class="headerlink" title="宏定义进行混淆"></a>宏定义进行混淆</h5><h5 id="ios-class-guard"><a href="#ios-class-guard" class="headerlink" title="ios-class-guard"></a><code>ios-class-guard</code></h5><ul>
<li><code>brew install ios-class-guard</code></li>
<li><code>ios-cloass-guard [options] &lt;mach-o-file&gt;</code></li>
</ul>
<h5 id="字符串加密"><a href="#字符串加密" class="headerlink" title="字符串加密"></a>字符串加密</h5><p>使用两次异或（<code>^</code>）得到原始值的原理进行加密</p>
<h2 id="OC对象的本质"><a href="#OC对象的本质" class="headerlink" title="OC对象的本质"></a>OC对象的本质</h2><h5 id="OC对象是基于C-的什么数据结构实现的"><a href="#OC对象是基于C-的什么数据结构实现的" class="headerlink" title="OC对象是基于C++的什么数据结构实现的"></a>OC对象是基于C++的什么数据结构实现的</h5><ul>
<li>结构体</li>
<li><code>clang -rewrite-objc main.m -o main.cpp</code> 将OC文件转成C++文件 </li>
<li><code>xcrun -sdk -iphoneos clang -arch arm64 -rewrite-objc main.m -o main.cpp</code> 指定iOS平台转成c++代码</li>
</ul>
<h5 id="class-getInstanceSize"><a href="#class-getInstanceSize" class="headerlink" title="class_getInstanceSize"></a><code>class_getInstanceSize</code></h5><p>返回成员变量占据的内存大小</p>
<h5 id="malloc-size-bridge-const-void-obj"><a href="#malloc-size-bridge-const-void-obj" class="headerlink" title="malloc_size((__bridge const void *)obj)"></a>malloc_size((__bridge const void *)obj)</h5><p>返回的这个对象指针指向 的内存大小</p>
<h5 id="alloc的原理（本质是调用allocWithZone）"><a href="#alloc的原理（本质是调用allocWithZone）" class="headerlink" title="alloc的原理（本质是调用allocWithZone）"></a><code>alloc</code>的原理（本质是调用<code>allocWithZone</code>）</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// Call [cls alloc] or [cls allocWithZone:nil], with appropriate </span></span><br><span class="line"><span class="comment">// shortcutting optimizations.</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> ALWAYS_INLINE id</span></span><br><span class="line"><span class="function"><span class="title">callAlloc</span><span class="params">(Class cls, <span class="keyword">bool</span> checkNil, <span class="keyword">bool</span> allocWithZone=<span class="literal">false</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> __OBJC2__</span></span><br><span class="line">    <span class="keyword">if</span> (slowpath(checkNil &amp;&amp; !cls)) <span class="keyword">return</span> nil;</span><br><span class="line">    <span class="keyword">if</span> (fastpath(!cls-&gt;ISA()-&gt;hasCustomAWZ())) &#123;</span><br><span class="line">        <span class="keyword">return</span> _objc_rootAllocWithZone(cls, nil); <span class="comment">// 调用_objc_rootAllocWithZone 方法</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// No shortcuts available.</span></span><br><span class="line">    <span class="keyword">if</span> (allocWithZone) &#123;</span><br><span class="line">        <span class="keyword">return</span> ((id(*)(id, SEL, struct _NSZone *))objc_msgSend)(cls, @selector(allocWithZone:), nil);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ((id(*)(id, SEL))objc_msgSend)(cls, @selector(alloc));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">NEVER_INLINE</span><br><span class="line">id</span><br><span class="line">_objc_rootAllocWithZone(Class cls, <span class="keyword">malloc_zone_t</span> *zone __unused)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// allocWithZone under __OBJC2__ ignores the zone parameter</span></span><br><span class="line">    <span class="keyword">return</span> _class_createInstanceFromZone(cls, <span class="number">0</span>, nil,</span><br><span class="line">                                         OBJECT_CONSTRUCT_CALL_BADALLOC);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> ALWAYS_INLINE id</span><br><span class="line">_class_createInstanceFromZone(Class cls, <span class="keyword">size_t</span> extraBytes, <span class="keyword">void</span> *zone,</span><br><span class="line">                              <span class="keyword">int</span> construct_flags = OBJECT_CONSTRUCT_NONE,</span><br><span class="line">                              <span class="keyword">bool</span> cxxConstruct = <span class="literal">true</span>,</span><br><span class="line">                              <span class="keyword">size_t</span> *outAllocatedSize = nil)</span><br><span class="line">&#123;</span><br><span class="line">    ASSERT(cls-&gt;isRealized());</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read class&#x27;s info bits all at once for performance</span></span><br><span class="line">    <span class="keyword">bool</span> hasCxxCtor = cxxConstruct &amp;&amp; cls-&gt;hasCxxCtor();</span><br><span class="line">    <span class="keyword">bool</span> hasCxxDtor = cls-&gt;hasCxxDtor();</span><br><span class="line">    <span class="keyword">bool</span> fast = cls-&gt;canAllocNonpointer();</span><br><span class="line">    <span class="keyword">size_t</span> size;</span><br><span class="line"></span><br><span class="line">    size = cls-&gt;instanceSize(extraBytes);</span><br><span class="line">    <span class="keyword">if</span> (outAllocatedSize) *outAllocatedSize = size;</span><br><span class="line"></span><br><span class="line">    id obj;</span><br><span class="line">    <span class="keyword">if</span> (zone) &#123;</span><br><span class="line">        obj = (id)malloc_zone_calloc((<span class="keyword">malloc_zone_t</span> *)zone, <span class="number">1</span>, size);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        obj = (id)<span class="built_in">calloc</span>(<span class="number">1</span>, size);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (slowpath(!obj)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (construct_flags &amp; OBJECT_CONSTRUCT_CALL_BADALLOC) &#123;</span><br><span class="line">            <span class="keyword">return</span> _objc_callBadAllocHandler(cls);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> nil;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (!zone &amp;&amp; fast) &#123;</span><br><span class="line">        obj-&gt;initInstanceIsa(cls, hasCxxDtor);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// Use raw pointer isa on the assumption that they might be</span></span><br><span class="line">        <span class="comment">// doing something weird with the zone or RR.</span></span><br><span class="line">        obj-&gt;initIsa(cls);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (fastpath(!hasCxxCtor)) &#123;</span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    construct_flags |= OBJECT_CONSTRUCT_FREE_ONFAILURE;</span><br><span class="line">    <span class="keyword">return</span> object_cxxConstructFromClass(obj, cls, construct_flags);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">size_t</span> <span class="title">instanceSize</span><span class="params">(<span class="keyword">size_t</span> extraBytes)</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (fastpath(cache.hasFastInstanceSize(extraBytes))) &#123;</span><br><span class="line">        <span class="keyword">return</span> cache.fastInstanceSize(extraBytes);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">size_t</span> size = alignedInstanceSize() + extraBytes;</span><br><span class="line">    <span class="comment">// CF requires all objects be at least 16 bytes.</span></span><br><span class="line">    <span class="keyword">if</span> (size &lt; <span class="number">16</span>) size = <span class="number">16</span>; <span class="comment">// 内存分配小于16 直接分配成16</span></span><br><span class="line">    <span class="keyword">return</span> size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="NSObject-对象占用了多少内存"><a href="#NSObject-对象占用了多少内存" class="headerlink" title="NSObject 对象占用了多少内存"></a>NSObject 对象占用了多少内存</h5><ul>
<li>系统分配了最少16个字节给NSObject对象（使用<code>malloc_size</code>方法来获取）</li>
<li>但是NSObject对象内部只使用了8个字节的空间（使用<code>class_getInstanceSize</code>获取）</li>
</ul>
<h5 id="属性和方法"><a href="#属性和方法" class="headerlink" title="属性和方法"></a>属性和方法</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">@interface ObjectiveCLearning : NSObject &#123;</span><br><span class="line">    NSString *_name;</span><br><span class="line">&#125;</span><br><span class="line">@property (nonatomic, assign) NSInteger age;</span><br><span class="line">@end</span><br></pre></td></tr></table></figure>

<p>将以上代码转换成C++代码</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> _REWRITER_typedef_ObjectiveCLearning</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _REWRITER_typedef_ObjectiveCLearning</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">objc_object</span> <span class="title">ObjectiveCLearning</span>;</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span>&#125; _objc_exc_ObjectiveCLearning;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">extern</span> <span class="string">&quot;C&quot;</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> OBJC_IVAR_$_ObjectiveCLearning$_age;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ObjectiveCLearning_IMPL</span> &#123;</span></span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">NSObject_IMPL</span> <span class="title">NSObject_IVARS</span>;</span></span><br><span class="line">	NSString *_name;</span><br><span class="line">	NSInteger _age;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// @property (nonatomic, assign) NSInteger age;</span></span><br><span class="line"><span class="comment">/* @end */</span></span><br><span class="line"><span class="comment">// @implementation ObjectiveCLearning</span></span><br><span class="line"><span class="keyword">static</span> NSInteger _I_ObjectiveCLearning_age(ObjectiveCLearning * self, SEL _cmd) &#123; <span class="keyword">return</span> (*(NSInteger *)((<span class="keyword">char</span> *)self + OBJC_IVAR_$_ObjectiveCLearning$_age)); &#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> _I_ObjectiveCLearning_setAge_(ObjectiveCLearning * self, SEL _cmd, NSInteger age) &#123; (*(NSInteger *)((<span class="keyword">char</span> *)self + OBJC_IVAR_$_ObjectiveCLearning$_age)) = age; &#125;</span><br><span class="line"><span class="comment">// @end</span></span><br></pre></td></tr></table></figure>

<p>可以看到<code>@implementation ObjectiveCLearning</code>中生成了一个<code>_I_ObjectiveCLearning_age</code>和一个<code>_I_ObjectiveCLearning_setAge_</code>方法，所以<code>@property</code>属性定义会自动的生成成员变量<code>_age</code>和<code>setter/getter</code>方法<code>setAge</code>和<code>age</code>方法，所以属性=成员变量+<code>setter/getter</code>方法</p>
<h5 id="类对象"><a href="#类对象" class="headerlink" title="类对象"></a>类对象</h5><p>同一个类的类对象在内存中只会存在一份</p>
<p><code>class</code>方法返回的始终是类对象（不管调用多少次）</p>
<h5 id="元类对象"><a href="#元类对象" class="headerlink" title="元类对象"></a>元类对象</h5><p><code>object_getClass([NSObject class])</code></p>
<p><code>class_isMetaClass([NSObject class])</code> 判断是否是元类对象</p>
<h5 id="isa指针"><a href="#isa指针" class="headerlink" title="isa指针"></a><code>isa</code>指针</h5><ul>
<li>实例对象的<code>isa</code>指针指向类对象</li>
<li>类对象的<code>isa</code>指针指向元类对象</li>
<li>元类对象的<code>isa</code>指针指向基类的元类对象</li>
<li>基类的元类对象的<code>isa</code>指针指向自己</li>
</ul>
<h5 id="super-class指针"><a href="#super-class指针" class="headerlink" title="super-class指针"></a><code>super-class</code>指针</h5><ul>
<li>类对象的super-class指针指向父类的类对象</li>
<li>元类对象的super-class指针指向父类的元类对象</li>
<li>基类的元类对象的super-class指针指向基类的类对象</li>
<li>如果没有父类，则super-class指针为nil（基类的元类对象除外）</li>
</ul>
<h5 id="方法调用的轨迹"><a href="#方法调用的轨迹" class="headerlink" title="方法调用的轨迹"></a>方法调用的轨迹</h5><h6 id="实例方法"><a href="#实例方法" class="headerlink" title="实例方法"></a>实例方法</h6><ul>
<li>通过实例对象的isa指针找到类对象，在类对象的方法列表中找方法</li>
<li>如果没找到则通过类对象的super-class指针找到类对象的父类的类对象</li>
<li>…</li>
<li>直到super-class指针为nil</li>
</ul>
<h6 id="类方法"><a href="#类方法" class="headerlink" title="类方法"></a>类方法</h6><ul>
<li>通过类对象的isa指针找到元类对象，在元类对象的方法类表中找</li>
<li>如果没有找到则通过元类对象的super-class指针找到元类对象的父类的元类对象</li>
<li>…</li>
<li>直到找到基类的元类对象，如果仍然没有则会通过super-class指针找到基类的类对象中并在基类的类对象中查找方法</li>
<li>如果还没有则通过基类的类对象的super-class指针（为nil）</li>
</ul>
<h2 id="KVO"><a href="#KVO" class="headerlink" title="KVO"></a>KVO</h2><h5 id="本质"><a href="#本质" class="headerlink" title="本质"></a>本质</h5><ul>
<li>利用Runtime的API动态生成一个子类，并且让实例对象的isa指针指向这个新创建的类</li>
<li>当修改实例对象的时候，会调用Foundation框架的一个<code>_NSSetXXXValueAndNotify</code>函数<ul>
<li><code>willChangeValueForKey:</code></li>
<li>调用<code>super</code>的<code>setter</code></li>
<li><code>didChangeValueForKey:</code><ul>
<li>内部会触发<code>Observer</code>的监听方法：<code>observeValueForKeyPath...</code></li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="如何手动触发KVO"><a href="#如何手动触发KVO" class="headerlink" title="如何手动触发KVO"></a>如何手动触发KVO</h5><ul>
<li>手动调用<code>willChangeValueForKey</code></li>
<li>手动调用<code>didChangeValueForKey</code>（在<code>didChangeValueForKey</code>会判断是否调用了<code>willChangeValueForKey</code>），内部会触发<code>Observer</code>的监听方法</li>
</ul>
<h2 id="KVC"><a href="#KVC" class="headerlink" title="KVC"></a>KVC</h2><h5 id="KVC可以触发KVO"><a href="#KVC可以触发KVO" class="headerlink" title="KVC可以触发KVO"></a>KVC可以触发KVO</h5><ul>
<li><code>setValueForKey:</code>通过<code>key</code>找到<code>setKey</code>的<code>setter</code>方法，如果有这个<code>setter</code>方法的话就会直接调用这个<code>setter</code>方法（只要方法存在，有没有声明属性都无所谓）</li>
<li>如果上述的<code>setter</code>方法不存在就会寻找<code>_setKey</code>的方法</li>
<li>如果上述的两个方法都没有找到就会调用<code>accessINstanceVariablesDirectory</code>（能否直接访问成员变量 BOOL），如果为NO则不允许直接访问成员变量，就会调用<code>setValue:forUndefinedKey:</code>方法并抛出异常<code>NSUnknownKeyException</code></li>
<li>如果为YES，则会按照<code>_key/_isKey/key/isKey</code>这种顺序去查找成员变量，如果找到了则会直接赋值</li>
<li>如果仍然没找到则会调用<code>setValue:forUndefinedKey:</code>并抛出异常</li>
</ul>
]]></content>
      <categories>
        <category>Objective-C</category>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>iOS笔记</title>
    <url>/2021/12/21/iOS%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Swift代码层次优化"><a href="#Swift代码层次优化" class="headerlink" title="Swift代码层次优化"></a>Swift代码层次优化</h2><h5 id="警告忽略"><a href="#警告忽略" class="headerlink" title="警告忽略"></a>警告忽略</h5><ul>
<li>忽略这段代码的警告</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma clang diagnostic push</span><br><span class="line">#pragma clang diagnostic ignored &quot;-Warc-performSelector-leaks&quot;</span><br><span class="line"></span><br><span class="line">/* 内容 */</span><br><span class="line">  </span><br><span class="line">#pragma clang diagnostic pop</span><br></pre></td></tr></table></figure>

<ul>
<li>忽略未使用的变量警告</li>
</ul>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#pragma used(foo) // foo为你初始化却未使用的变量</span><br></pre></td></tr></table></figure>

<h5 id="for-where循环"><a href="#for-where循环" class="headerlink" title="for-where循环"></a><code>for-where</code>循环</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> item <span class="keyword">in</span> collection <span class="keyword">where</span> item.hasProperty &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用slice共享内存优化性能"><a href="#使用slice共享内存优化性能" class="headerlink" title="使用slice共享内存优化性能"></a>使用<code>slice</code>共享内存优化性能</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> midpoint <span class="operator">=</span> absences.count <span class="operator">/</span> <span class="number">2</span></span><br><span class="line"><span class="keyword">let</span> firstHalf <span class="operator">=</span> absences[<span class="operator">..&lt;</span>midpoint]</span><br><span class="line"><span class="keyword">let</span> secondHalf <span class="operator">=</span> absences[midpoint<span class="operator">...</span>]</span><br><span class="line"><span class="comment">// firstHalf/secondHalf并不会复制和占用更多内存</span></span><br></pre></td></tr></table></figure>

<h5 id="使用extension组织代码"><a href="#使用extension组织代码" class="headerlink" title="使用extension组织代码"></a>使用<code>extension</code>组织代码</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="comment">// MARK: UITableViewDelegate</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UITableViewDelegate</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// MARK: UITableViewDataSource</span></span><br><span class="line"><span class="class"><span class="keyword">extension</span> <span class="title">ViewController</span>: <span class="title">UITableViewDataSource</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用protocol实现多态"><a href="#使用protocol实现多态" class="headerlink" title="使用protocol实现多态"></a>使用<code>protocol</code>实现多态</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">protocol</span> <span class="title">TestProtocol</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> name: &#123; <span class="keyword">get</span> &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TestDemo</span>: <span class="title">TestProtocol</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> title: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">return</span> title &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TestDemo1</span>: <span class="title">TestProtocol</span> </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> showName: <span class="type">String</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span></span><br><span class="line">  <span class="keyword">var</span> name: <span class="type">String</span> &#123; <span class="keyword">return</span> showName &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以使两个不同的结构拥有同一个属性，能够做到同一个方法或者界面复用同一种类型的数据进行操作</span></span><br></pre></td></tr></table></figure>

<h6 id="KVO-Notification使用Block-API"><a href="#KVO-Notification使用Block-API" class="headerlink" title="KVO/Notification使用Block API"></a><code>KVO</code>/<code>Notification</code>使用<code>Block</code> API</h6><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Object</span>: <span class="title">NSObject</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> observer: <span class="type">AnyObserver</span>?</span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">var</span> kvoObserver: <span class="type">NSKeyValueObservation</span>?</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">init</span>()</span> &#123;</span><br><span class="line">    <span class="keyword">super</span>.<span class="keyword">init</span>()</span><br><span class="line">    observer <span class="operator">=</span> <span class="type">NotificationCenter</span>.default.addObserver(forName: <span class="type">NSNotification</span>.<span class="type">Name</span>(rawValue: <span class="string">&quot;&quot;</span>), object: <span class="literal">nil</span>, queue: <span class="literal">nil</span>) &#123; (<span class="keyword">_</span>) <span class="keyword">in</span> </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    kvoObserver <span class="operator">=</span> foo.observe(\.value, options: [.new]) &#123; (foo, change) <span class="keyword">in</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="集合使用lazy延迟序列"><a href="#集合使用lazy延迟序列" class="headerlink" title="集合使用lazy延迟序列"></a>集合使用<code>lazy</code>延迟序列</h5><figure class="highlight swift"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> nums <span class="operator">=</span> [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</span><br><span class="line"><span class="keyword">var</span> result <span class="operator">=</span> nums.lazy.map &#123; <span class="type">String</span>(<span class="variable">$0</span>) &#125;</span><br><span class="line">result[<span class="number">0</span>] <span class="comment">// 对1进行map操作</span></span><br><span class="line">result[<span class="number">1</span>] <span class="comment">// 对2进行map操作</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
</search>
