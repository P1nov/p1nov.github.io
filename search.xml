<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>C++学习笔记</title>
    <url>/2021/11/25/C-Learning-blog/</url>
    <content><![CDATA[<h1 id="C"><a href="#C" class="headerlink" title="C++"></a>C++</h1><h2 id="一、开始"><a href="#一、开始" class="headerlink" title="一、开始"></a>一、开始</h2><h4 id="1-编译指令"><a href="#1-编译指令" class="headerlink" title="1. 编译指令"></a>1. 编译指令</h4><ul>
<li><p><code>#include</code> 编译指令<br>将指定的文件插入到代码中指令所在的位置</p>
</li>
<li><p><code>#define</code> 预处理指令</p>
<p>常用于定义常数值或者宏</p>
</li>
<li><p><code>#ifdef [key]``#ifndef [key]</code>, <code>#endif</code></p>
<p>经常被用来防止循环包含</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MyHeader_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MyHeader_H</span></span><br><span class="line"><span class="comment">// ... 内容</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure></li>
<li><p><code>#pragma [xyz]</code></p>
<p>预处理期间会收到警告或者错误信息</p>
</li>
</ul>
<h4 id="2-输入与输出流"><a href="#2-输入与输出流" class="headerlink" title="2. 输入与输出流"></a>2. 输入与输出流</h4><h4 id="3-名称空间"><a href="#3-名称空间" class="headerlink" title="3. 名称空间"></a>3. 名称空间</h4><ul>
<li><p><code>namespace</code> 命名空间</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">namespace</span> ama &#123;</span><br><span class="line">  <span class="class"><span class="keyword">class</span> <span class="title">AmaObject</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">testFunction</span><span class="params">()</span></span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>示例内容</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> ama;</span><br><span class="line">AmaObject *object = <span class="keyword">new</span> <span class="built_in">AmaObject</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> ama::AmaObject;</span><br><span class="line">AmaObject *object = <span class="keyword">new</span> <span class="built_in">AmaObject</span>();</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="4-类型"><a href="#4-类型" class="headerlink" title="4. 类型"></a>4. 类型</h4><ul>
<li><p>枚举类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 普通枚举</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  kPieceTypeKing,</span><br><span class="line">  kPieceTypeQueen,</span><br><span class="line">  kPieceTypeRook,</span><br><span class="line">  kPieceTypePawn</span><br><span class="line">&#125; PieceT;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 强类型枚举</span></span><br><span class="line"><span class="comment">// 默认类型是整型</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="keyword">class</span> <span class="title">MyEnum</span> &#123;</span></span><br><span class="line">  EnumValue1,</span><br><span class="line">  EnumValue2 = <span class="number">10</span>,</span><br><span class="line">  EnumValue3</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 可以提供继承类型</span></span><br><span class="line"><span class="keyword">enum</span> class MyEnum: <span class="keyword">unsigned</span> <span class="keyword">long</span> &#123;</span><br><span class="line">  EnumValueLong1,</span><br><span class="line">  EnumValueLong2 = <span class="number">10</span>,</span><br><span class="line">  EnumValueLong3</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>结构体</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  <span class="keyword">char</span> firstInitial;</span><br><span class="line">  <span class="keyword">char</span> middleInitial;</span><br><span class="line">  <span class="keyword">char</span> lastInitial;</span><br><span class="line">  <span class="keyword">int</span> employeeNumber;</span><br><span class="line">  <span class="keyword">int</span> salary;</span><br><span class="line">&#125; EmployeeT;</span><br></pre></td></tr></table></figure></li>
<li><p>数组</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arr[] = &#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">auto</span>&amp; i : arr) &#123;</span><br><span class="line">  i += <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 初始化一个10个元素的数组并将每个元素设为0，只有设置为0的时候有效</span></span><br><span class="line"><span class="keyword">int</span> myArray[<span class="number">10</span>] = &#123;<span class="number">0</span>&#125;;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-指针以及动态内存"><a href="#5-指针以及动态内存" class="headerlink" title="5. 指针以及动态内存"></a>5. 指针以及动态内存</h4><ul>
<li><p>堆栈和堆</p>
<p><em>每个函数都有独立的内存空间（堆栈帧）</em></p>
<p><em>堆是与当前函数或者堆栈帧完全没有关系的内存区域，如果想要函数调用结束后仍然保存其中声明的变量，可以将变量放到堆中</em></p>
</li>
<li><p>动态分配的数组</p>
<p>使用堆内存初始化指针，可以使用<code>new</code>命令</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> arraySize = <span class="number">8</span>;</span><br><span class="line"><span class="keyword">int</span>* myVariableSizedArray;</span><br><span class="line">myVariableSizedArray = <span class="keyword">new</span> <span class="keyword">int</span>[arraySize];</span><br></pre></td></tr></table></figure>

<img src="/2021/11/25/C-Learning-blog/heap_and_stack.jpg" class="" title="动态数组的内存分配">

<p><em>由上图可看出指针变量仍然在堆栈中，但动态创建的数组在堆中</em></p>
<p><em><code>new</code>或者<code>new[]</code>必须使用<code>delete</code>或者<code>delete[]</code>来释放内存，对应的<code>malloc()</code>对应使用<code>free()</code></em></p>
<p><em>智能指针 <code>unique_ptr&lt;int[]&gt;</code></em></p>
</li>
<li><p>使用指针</p>
<p><code>int* myIntegerPointer = new int;</code></p>
<p><em>指针只是一个指向整数值的地址，访问这个值需要对指针解除引用</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Employee *e = <span class="built_in">getEmployee</span>();</span><br><span class="line">cout &lt;&lt; (*e).salary &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p><em><code>-&gt;</code>运算符允许在一步之内对指针解除引用并访问字段，例如：<code>e-&gt;salary;</code></em></p>
</li>
</ul>
<h4 id="6-C-中的字符串"><a href="#6-C-中的字符串" class="headerlink" title="6.C++中的字符串"></a>6.C++中的字符串</h4><ul>
<li><p>C 风格字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">char</span> arrayString[<span class="number">20</span>] = <span class="string">&quot;Hello, World&quot;</span>;</span><br><span class="line"><span class="keyword">char</span>* pointerString = <span class="string">&quot;Hello, World&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>C++字符串</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line">string myString = <span class="string">&quot;Hello, World&quot;</span>;</span><br><span class="line"></span><br><span class="line">string str1 = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line">string str2 = <span class="string">&quot;, &quot;</span>;</span><br><span class="line">string str3 = <span class="string">&quot;World&quot;</span>;</span><br><span class="line">string result = str1 + str2 + str3;  </span><br></pre></td></tr></table></figure>
<h4 id="7-引用"><a href="#7-引用" class="headerlink" title="7. 引用"></a>7. 引用</h4></li>
<li><p>右值引用（解决传递常量引起的问题）</p>
</li>
</ul>
<h4 id="8-异常"><a href="#8-异常" class="headerlink" title="8. 异常"></a>8. 异常</h4><ul>
<li><p><code>throw</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">divideNumbers</span><span class="params">(<span class="keyword">double</span> inNumerator, <span class="keyword">double</span> inDenominator)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">if</span> (inDenominator == <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">throw</span> std::<span class="built_in">exception</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> inNumerator / inDenominator;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdexcept&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">divideNumbers</span>(<span class="number">2.5</span>, <span class="number">0.5</span>) &lt;&lt; endl;</span><br><span class="line">    cout &lt;&lt; <span class="built_in">divideNumbers</span>(<span class="number">2.3</span>, <span class="number">0</span>) &lt;&lt; endl;</span><br><span class="line">  &#125; <span class="built_in"><span class="keyword">catch</span></span> (<span class="keyword">const</span> exception&amp; exception) &#123;</span><br><span class="line">    count &lt;&lt; <span class="string">&quot;An exception was caught&quot;</span> &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="9-const-的多种用法"><a href="#9-const-的多种用法" class="headerlink" title="9. const 的多种用法"></a>9. const 的多种用法</h4><ul>
<li><p>定义常量</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">float</span> kVersionNumber = <span class="number">2.0f</span>;</span><br><span class="line"><span class="keyword">const</span> string kProductName = <span class="string">&quot;Super Hyper Net Modulator&quot;</span>;</span><br></pre></td></tr></table></figure></li>
<li><p>使用const保护参数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mysteryFunction</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* myString)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">char</span>* myString = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">2</span>];</span><br><span class="line">  myString[<span class="number">0</span>] = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">  myString[<span class="number">1</span>] = <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">  <span class="built_in">mysteryFunction</span>(myString);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mysteryFunction</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* myString)</span> </span>&#123;</span><br><span class="line">  myString[<span class="number">0</span>] = <span class="string">&#x27;b&#x27;</span>; <span class="comment">// 报错</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>const 引用</p>
<p><em>主要用于提高效率，使用引用就不会拷贝新对象出来直接使用指向原始数据的指针（对象可能会比较庞大，拷贝可能会需要很大的代价）</em></p>
</li>
</ul>
<h2 id="二、面向对象"><a href="#二、面向对象" class="headerlink" title="二、面向对象"></a>二、面向对象</h2><h4 id="1-声明类"><a href="#1-声明类" class="headerlink" title="1. 声明类"></a>1. 声明类</h4><ul>
<li><p>头文件中声明</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AirlineTicket</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">AirlineTicket</span>(); <span class="comment">// 构造函数</span></span><br><span class="line">      ~<span class="built_in">AirlineTicket</span>(); <span class="comment">// 析构函数</span></span><br><span class="line">      <span class="function"><span class="keyword">int</span> <span class="title">calculatePriceInDollars</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function">std::string <span class="title">getPassengerName</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">      <span class="function"><span class="keyword">void</span> <span class="title">setPassengerName</span><span class="params">(std::string inName)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>Employee 类 和 DataBase 类</p>
<p><em>见代码</em></p>
</li>
</ul>
<h4 id="2-标准库"><a href="#2-标准库" class="headerlink" title="2. 标准库"></a>2. 标准库</h4><ul>
<li><p><code>vector</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  vector&lt;string&gt; myVector = &#123;<span class="string">&quot;A first string&quot;</span>, <span class="string">&quot;A second string&quot;</span>&#125;;</span><br><span class="line">  myVector.<span class="built_in">push_back</span>(<span class="string">&quot;A third string&quot;</span>);</span><br><span class="line">  myVector.<span class="built_in">push_back</span>(<span class="string">&quot;The last string in the vector&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> iterator = myVector.<span class="built_in">cbegin</span>(); iterator != myVector.<span class="built_in">cend</span>(); ++iterator) &#123;</span><br><span class="line">    cout &lt;&lt; *iterator &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">auto</span> str : myVector) &#123;</span><br><span class="line">    cout &lt;&lt; str &lt;&lt; endl;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="3-C-的设计特点"><a href="#3-C-的设计特点" class="headerlink" title="3. C++的设计特点"></a>3. C++的设计特点</h4><ul>
<li>庞大的功能集</li>
<li>面向对象</li>
<li>有许多设计通用、可重复使用的工具</li>
<li>有用的标准库</li>
</ul>
<h4 id="4-C-设计的两个原则"><a href="#4-C-设计的两个原则" class="headerlink" title="4. C++设计的两个原则"></a>4. C++设计的两个原则</h4><ul>
<li>抽象</li>
<li>重用</li>
</ul>
<h4 id="5-对象之间的关系"><a href="#5-对象之间的关系" class="headerlink" title="5. 对象之间的关系"></a>5. 对象之间的关系</h4><ul>
<li><code>has-a</code> 有一个</li>
<li><code>is-a</code> 继承(是一个)</li>
<li><code>Not-a</code> 不是一个</li>
<li>多态性</li>
<li>多重继承</li>
<li>混入类（mix-in）</li>
</ul>
<h2 id="三、设计可重用代码"><a href="#三、设计可重用代码" class="headerlink" title="三、设计可重用代码"></a>三、设计可重用代码</h2><h4 id="1-为什么要重用？"><a href="#1-为什么要重用？" class="headerlink" title="1. 为什么要重用？"></a>1. 为什么要重用？</h4><ul>
<li>代码不大可能只在一个程序中使用</li>
<li>重用设计可以节约时间和金钱</li>
<li>团队中其他程序猿可以使用你编写的代码</li>
<li>自己是主要受益人<h4 id="2-如何设计重用"><a href="#2-如何设计重用" class="headerlink" title="2. 如何设计重用"></a>2. 如何设计重用</h4></li>
<li>避免组合不相干的概念或者逻辑上独立的概念</li>
<li>将程序分为逻辑子系统</li>
<li>用类层次结构分离逻辑概念</li>
<li>用聚合分离逻辑概念</li>
<li>消除用户接口的依赖性</li>
<li>对泛型数据结构以及算法使用模版</li>
</ul>
<h4 id="3-模版优于其他泛型程序设计技术的原因"><a href="#3-模版优于其他泛型程序设计技术的原因" class="headerlink" title="3. 模版优于其他泛型程序设计技术的原因"></a>3. 模版优于其他泛型程序设计技术的原因</h4><ul>
<li>可以通过存储<code>void*</code>指针来编写泛型数据结构（类型不安全）</li>
<li>为特定的类编写数据结构</li>
</ul>
<h4 id="4-设计有用的接口"><a href="#4-设计有用的接口" class="headerlink" title="4. 设计有用的接口"></a>4. 设计有用的接口</h4><ul>
<li>设计容易使用的接口</li>
<li>不要省略必须的功能</li>
<li>提供整洁的接口</li>
<li>提供文档和注释</li>
</ul>
<h4 id="5-设计通用的接口"><a href="#5-设计通用的接口" class="headerlink" title="5. 设计通用的接口"></a>5. 设计通用的接口</h4><ul>
<li><p>提供执行相同功能的多种方法</p>
</li>
<li><p>提供定制</p>
<p><em>基本前提是向每个客户提供相同的基本功能，但是给用户轻微调整的能力</em></p>
</li>
</ul>
<h2 id="四、对象和类"><a href="#四、对象和类" class="headerlink" title="四、对象和类"></a>四、对象和类</h2><h4 id="1-如何编写具有方法和数据成员的类"><a href="#1-如何编写具有方法和数据成员的类" class="headerlink" title="1. 如何编写具有方法和数据成员的类"></a>1. 如何编写具有方法和数据成员的类</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> std::string;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setValue</span><span class="params">(<span class="keyword">double</span> inValue)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">getValue</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setString</span><span class="params">(string inString)</span></span>;</span><br><span class="line">    <span class="function">string <span class="title">getString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="keyword">double</span> mValue;</span><br><span class="line">    <span class="function">string <span class="title">doubleToString</span><span class="params">(<span class="keyword">double</span> inValue)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">double</span> <span class="title">stringToDouble</span><span class="params">(string inString)</span> <span class="keyword">const</span></span>;</span><br><span class="line">    string mString;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="keyword">double</span> value;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="2-如何控制方法和数据成员的访问"><a href="#2-如何控制方法和数据成员的访问" class="headerlink" title="2. 如何控制方法和数据成员的访问"></a>2. 如何控制方法和数据成员的访问</h4><ul>
<li><p>访问控制</p>
<p><code>public</code>, <code>private</code>, <code>protected</code></p>
<p>C++中类的默认访问控制是<code>private</code>, 而<code>struct</code> 或者 <code>union</code>的默认值是<code>public</code></p>
</li>
<li><p><code>::</code> 被称为作用域解析运算符</p>
</li>
</ul>
<h4 id="3-如何在堆栈以及堆中使用对象"><a href="#3-如何在堆栈以及堆中使用对象" class="headerlink" title="3. 如何在堆栈以及堆中使用对象"></a>3. 如何在堆栈以及堆中使用对象</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">SpreadsheetCell myCell, anotherCell; <span class="comment">// 堆栈中创建并使用</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">SpreadsheetCell* myCellP = <span class="keyword">new</span> <span class="built_in">SpreadsheetCell</span>(); <span class="comment">// 动态分配对象在堆中</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 一般方式创建并释放内存</span></span><br><span class="line">SpreadsheetCell* cellP = <span class="keyword">new</span> <span class="built_in">SpreadsheetCell</span>();</span><br><span class="line">(*cellP).<span class="built_in">setValue</span>(<span class="number">3.7</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;cell 1: &quot;</span> &lt;&lt; (*cellP).<span class="built_in">getValue</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; (*cellP).<span class="built_in">getString</span>() &lt;&lt; endl;</span><br><span class="line"><span class="keyword">delete</span> cellP;</span><br><span class="line">cellP = <span class="literal">nullptr</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 智能指针创建，不需要手动释放，内存会自动释放</span></span><br><span class="line"><span class="function">shared_ptr&lt;SpreadsheetCell&gt; <span class="title">cellP</span><span class="params">(<span class="keyword">new</span> SpreadsheetCell())</span></span>;</span><br><span class="line">cellP-&gt;<span class="built_in">setValue</span>(<span class="number">3.7</span>);</span><br><span class="line">cout &lt;&lt; <span class="string">&quot;cell 1: &quot;</span> &lt;&lt; cellP-&gt;<span class="built_in">getValue</span>() &lt;&lt; <span class="string">&quot; &quot;</span> &lt;&lt; cellP-&gt;<span class="built_in">getString</span>() &lt;&lt; endl;</span><br></pre></td></tr></table></figure>

<p><em>如果使用<code>new</code>为对象分配了内存，结束时要用<code>delete</code>销毁对象，或者使用智能指针自动管理内存</em></p>
<p><em>如果没有使用智能指针，使用<code>delete</code>销毁了对象时，最好将指针置为<code>null</code>，这样做可以防止删除对象后意外使用了这个指针，使得调试更加容易</em></p>
<h4 id="4-什么是对象的生命周期"><a href="#4-什么是对象的生命周期" class="headerlink" title="4. 什么是对象的生命周期"></a>4. 什么是对象的生命周期</h4><ul>
<li><p>创建、销毁以及赋值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 创建对象</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">      std::string mName;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  MyClass obj;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编写构造函数</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">SpreadsheetCell</span>(<span class="keyword">double</span> initialValue);</span><br><span class="line">      <span class="built_in">SpreadsheetCell</span>(string initialValue); <span class="comment">// 多个构造函数</span></span><br><span class="line">&#125;</span><br><span class="line">SpreadsheetCell::<span class="built_in">SpreadsheetCell</span>(<span class="keyword">double</span> initialValue) &#123;</span><br><span class="line">  <span class="built_in">setValue</span>(initialValue);</span><br><span class="line">&#125;</span><br><span class="line">SpreadsheetCell::<span class="built_in">SpreadsheetCell</span>(string initialValue) &#123;</span><br><span class="line">  <span class="built_in">setString</span>(initialValue);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在构造函数中使用另外一个构造函数，是错误的，实际上是新建了一个同样类型的临时未命名对象，而不是初始化对象</span></span><br><span class="line"><span class="comment">//SpreadsheetCell::SpreadsheetCell(string initialValue) &#123;</span></span><br><span class="line"><span class="comment">//  SpreadsheetCell(stringToDouble(initialValue));</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用构造函数</span></span><br><span class="line"><span class="comment">// 堆栈中使用构造函数</span></span><br><span class="line"><span class="function">SpreadsheetCell <span class="title">myCell</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="function">SpreadsheetCell <span class="title">myCell</span><span class="params">(<span class="string">&quot;test&quot;</span>)</span></span>;</span><br><span class="line"><span class="comment">// 堆中使用构造函数</span></span><br><span class="line">SpreadsheetCell* myCellP = <span class="keyword">new</span> <span class="built_in">SpreadsheetCell</span>(<span class="number">5</span>);</span><br><span class="line">SpreadsheetCell* myCellP = <span class="keyword">new</span> <span class="built_in">SpreadsheetCell</span>(<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="function">shared_ptr&lt;SpreadsheetCell&gt; <span class="title">myCellP</span><span class="params">(<span class="keyword">new</span> SpreadsheetCell(<span class="number">5</span>))</span></span>;</span><br><span class="line"><span class="function">shared_ptr&lt;SpreadsheetCell&gt; <span class="title">myCellP</span><span class="params">(<span class="keyword">new</span> SpreadsheetCell(<span class="string">&quot;test&quot;</span>))</span></span>;</span><br></pre></td></tr></table></figure></li>
<li><p>默认构造函数（零参构造函数）</p>
<p>创建对象数组时，首先要为所有对象分配连续的内存空间，再为每个对象调用默认的构造函数。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">SpreadsheetCell cells[<span class="number">3</span>]; <span class="comment">// 如果没有默认构造函数这句代码会报错</span></span><br><span class="line">SpreadsheetCell* myCellP = <span class="keyword">new</span> SpreadsheetCell[<span class="number">10</span>]; <span class="comment">// 一样会报错</span></span><br><span class="line">SpreadsheetCell cells[<span class="number">3</span>] = &#123;</span><br><span class="line">      <span class="built_in">SpreadsheetCell</span>(<span class="number">0</span>),</span><br><span class="line">    <span class="built_in">SpreadsheetCell</span>(<span class="number">1</span>),</span><br><span class="line">    <span class="built_in">SpreadsheetCell</span>(<span class="number">2</span>)</span><br><span class="line">&#125;; <span class="comment">// 手动为每个对象调用构造函数，能绕过调用默认构造函数的限制 </span></span><br></pre></td></tr></table></figure>

<p><em>所以如果要创建某个类的对象数组，最好还是定义类的默认构造函数</em></p>
<p><em>在堆栈中调用默认构造函数时不需要使用圆括号</em></p>
</li>
<li><p>构造函数初始化器</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">SpreadsheetCell::<span class="built_in">SpreadsheetCell</span>() : <span class="built_in">value</span>(<span class="number">0</span>), <span class="built_in">mString</span>(<span class="string">&quot;&quot;</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>显示删除构造函数</p>
<p>如果你想定义一个没有任何构造函数的类，也不想让编译器生成默认的构造函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">MyClass</span>() = <span class="keyword">delete</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>ctor-initializer</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">SpreadsheetCell</span>(<span class="keyword">double</span> d);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SomeClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">SomeClass</span>();</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">      SpreadsheetCell mCell;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SomeClass::<span class="built_in">SomeClass</span>() : <span class="built_in">mCell</span>(<span class="number">5.0f</span>) &#123;&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>const数据成员，当const变量创建之后无法对其正确赋值，必须在创建的时候提供值。</p>
</li>
<li><p>引用数据成员，如果不是指向一个量，引用将无法存在。</p>
</li>
<li><p>没有默认后遭函数的对象数据成员，C++会尝试用默认构造函数初始化成员对象，如果不存在就无法初始化这个对象。</p>
</li>
<li><p>没有默认构造函数的超类（父类）待定</p>
</li>
<li><p><code>ctor-initializer</code>需要注意的是：初始化数据成员的顺序是按照在类中定义的顺序</p>
</li>
<li><p>复制构造函数(<code>copy constructor</code>)</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      <span class="built_in">SpreadsheetCell</span>(<span class="keyword">const</span> SpreadsheetCell&amp; src);</span><br><span class="line">&#125;</span><br><span class="line">SpreadsheetCell::<span class="built_in">SpreadsheetCell</span>(<span class="keyword">const</span> SpreadsheetCell&amp; src): <span class="built_in">mValue</span>(src.mValue), <span class="built_in">mString</span>(src.mString) &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">SpreadsheetCell <span class="title">myCell</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line"><span class="function">SpreadsheetCell <span class="title">myCell1</span><span class="params">(myCell)</span></span>; <span class="comment">// 显示地调用赋值构造函数</span></span><br></pre></td></tr></table></figure></li>
<li><p>按引用传递对象</p>
<p>为了避免复制对象，可以让函数或者方法采用对象的引用作为参数，按引用传递对象比按值传递对象效率更高，因为只需要复制对象的地址而不需要复制对象的全部内容</p>
<p>另外按引用传递可以避免对象动态内存分配的问题</p>
</li>
<li><p>类内成员初始化器</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// C++11才能定义的时候直接初始化成员变量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">      <span class="keyword">int</span> mInt = <span class="number">1</span>;</span><br><span class="line">      std::string mStr = <span class="string">&quot;test&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// C++11之前只有 ctor-initializer 或者 static const整型成员变量才能在类定义中初始化</span></span><br></pre></td></tr></table></figure></li>
<li><p>委托构造函数（C++11）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="built_in">MyClass</span>(<span class="keyword">char</span> c) : <span class="built_in">MyClass</span>(<span class="number">1.2</span>) &#123;&#125;</span><br><span class="line">  <span class="built_in">MyClass</span>(<span class="keyword">double</span> d) : <span class="built_in">MyClass</span>(<span class="string">&#x27;m&#x27;</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>编译器生成构造函数的总结</p>
<table>
<thead>
<tr>
<th align="center">如果定义了…</th>
<th align="center">那么编译器会生成…</th>
<th>然后可以创建一个对象</th>
</tr>
</thead>
<tbody><tr>
<td align="center">没有定义构造函数</td>
<td align="center">一个零参构造函数，一个复制构造函数</td>
<td>使用零参构造函数：<br /><code>SpreadsheetCell cell;</code><br />作为另一个对象的副本：<br /><code>SpreadsheetCell myCell(cell);</code></td>
</tr>
<tr>
<td align="center">只定义了零参构造函数</td>
<td align="center">复制构造函数</td>
<td>同上；</td>
</tr>
<tr>
<td align="center">只定义了复制构造函数</td>
<td align="center">不会生成构造函数</td>
<td>理论上可以复制其他对象，实际上无法创建任何对象；</td>
</tr>
<tr>
<td align="center">只定义一个构造函数（不是复制构造函数），该构造函数具有一个或者多个参数</td>
<td align="center">复制构造函数</td>
<td>使用带参数的构造函数：<br /><code>SpreadsheetCell mCell(6);</code><br />作为另一个对象的副本：<br /><code>SpreadsheetCell mCell(cell);</code></td>
</tr>
<tr>
<td align="center">一个零参构造函数，以及一个具有但个参数或者多个参数的构造函数（不是复制构造函数）</td>
<td align="center">复制构造函数</td>
<td>使用零参构造函数：<br /><code>SpreadsheetCell cell;</code><br />使用带有参数的构造函数：<br /><code>SpreadsheetCell cell(6);</code><br />作为另一个对象的副本：<br /><code>SpreadsheetCell anotherCell(cell);</code></td>
</tr>
</tbody></table>
</li>
</ul>
<h4 id="5-如何编写在创建或者销毁对象时执行的代码"><a href="#5-如何编写在创建或者销毁对象时执行的代码" class="headerlink" title="5. 如何编写在创建或者销毁对象时执行的代码"></a>5. 如何编写在创建或者销毁对象时执行的代码</h4><ul>
<li><p>销毁对象时：对象的析构函数被调用，释放对象占用的内存。</p>
</li>
<li><p>当堆栈中的对象超出作用域时，意味着当前的函数、方法或者其他执行的代码块结束，对象会被销毁</p>
</li>
<li><p>堆栈上对象销毁的顺序与声明顺序相反</p>
</li>
<li><p>堆中分配的对象不会自动销毁，必须使用<code>delete</code>删除对象指针，从而调用析构函数并释放内存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="function">SpreadsheetCell <span class="title">mCell</span><span class="params">(<span class="number">5</span>)</span></span>; <span class="comment">// 堆栈中的对象作用域结束后自动释放</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 堆中的对象需要手动销毁对象 new 对应 delete，new[] 对应 delete[]</span></span><br><span class="line">  SpreadsheetCell* cell = <span class="keyword">new</span> <span class="built_in">SpreadsheetCell</span>(<span class="number">5</span>);</span><br><span class="line">  <span class="keyword">delete</span> cell;</span><br><span class="line">  cell = <span class="literal">nullptr</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  <span class="comment">// 智能指针在作用结束后自动释放</span></span><br><span class="line">  <span class="function">shared_ptr&lt;SpreadsheetCell&gt; <span class="title">cell</span><span class="params">(<span class="keyword">new</span> SpreadsheetCell(<span class="number">5</span>))</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="6-如何编写复制对象或者给对象赋值的代码"><a href="#6-如何编写复制对象或者给对象赋值的代码" class="headerlink" title="6. 如何编写复制对象或者给对象赋值的代码"></a>6. 如何编写复制对象或者给对象赋值的代码</h4><ul>
<li><p>复制与赋值（复制构造函数只用在创建对象时，如果已经具有值的对象被改写被称为赋值）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 赋值运算符</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">      SpreadsheetCell&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> SpreadsheetCell&amp; rhs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">SpreadsheetCell <span class="title">mCell</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">SpreadsheetCell anotherCell = <span class="built_in">SpreadsheetCell</span>(mCell); <span class="comment">// 调用复制构造函数</span></span><br><span class="line">SpreadsheetCell thirdCell = mCell; <span class="comment">// 依然调用的复制构造函数，因为thirdCell并未初始化且不具有值</span></span><br><span class="line">thirdCell = anotherCell; <span class="comment">// 调用operator= 赋值函数</span></span><br></pre></td></tr></table></figure></li>
<li><p>对象赋值运算的作为返回值</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">SpreadsheetCell <span class="title">mCell</span><span class="params">(<span class="number">5</span>)</span></span>;</span><br><span class="line">string s1;</span><br><span class="line">s1 = mCell.<span class="built_in">getString</span>();</span><br></pre></td></tr></table></figure>

<p><em>当<code>getString()</code>返回<code>mString</code>时，编译器实际上调用了<code>string</code>的复制构造函数创建了一个未命名的临时String对象，当结果赋值给s1时，会调用s1的赋值运算符，这个临时的<code>string</code>作为参数，然后这个临时的<code>string</code>对象被销毁</em></p>
</li>
</ul>
<h2 id="五、对象与类（高级）"><a href="#五、对象与类（高级）" class="headerlink" title="五、对象与类（高级）"></a>五、对象与类（高级）</h2><h4 id="1-如何为对象动态分配内存"><a href="#1-如何为对象动态分配内存" class="headerlink" title="1. 如何为对象动态分配内存"></a>1. 如何为对象动态分配内存</h4><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Spreadsheet</span>(<span class="keyword">int</span> inWidth, <span class="keyword">int</span> inHeight);</span><br><span class="line">    ~<span class="built_in">Spreadsheet</span>();</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">setCellAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">const</span> SpreadsheetCell&amp; cell)</span></span>;</span><br><span class="line">    <span class="function">SpreadsheetCell <span class="title">getCellAt</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">inRange</span><span class="params">(<span class="keyword">int</span> val, <span class="keyword">int</span> upper)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> mWidth, mHeight;</span><br><span class="line">    SpreadsheetCell** mCells; <span class="comment">// 指定宽度和高度的动态分配二维数组</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>使用析构函数释放内存</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">Spreadsheet::~<span class="built_in">Spreadsheet</span>() &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">delete</span> [] mCells[i]; <span class="comment">// 删除数组中的指针</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] mCells; <span class="comment">// 删除指针</span></span><br><span class="line">    mCells = <span class="literal">nullptr</span>; <span class="comment">// 指针置为nullptr</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>悬垂指针（<code>dangling pointer</code>）</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printSpreadsheet</span><span class="params">(Spreadsheet s)</span> </span>&#123;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="function">Spreadsheet <span class="title">s1</span><span class="params">(<span class="number">4</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">  <span class="built_in">printSpreadsheet</span>(s1);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>调用<code>printSpreadsheet</code>函数时，会将s1的mCells指针复制一份副本出来，但是并没有复制底层的数据，造成s1和s都有一个指向同一个内存数据的指针，而在<code>printSpreadsheet</code>函数执行结束时会调用s的析构函数将数据释放掉，而s的mCells指针与s1的mCells的指针指向同一块内存，就会造成s1的mCells指针所指的内存被释放掉不再有效，而s1的mCells指针则称为悬垂指针</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function">Spreadsheet <span class="title">s1</span><span class="params">(<span class="number">2</span>, <span class="number">2</span>)</span>, <span class="title">s2</span><span class="params">(<span class="number">4</span>, <span class="number">3</span>)</span></span>;</span><br><span class="line">s1 = s2;</span><br></pre></td></tr></table></figure>

<p><em>而在赋值操作时会更糟糕</em></p>
<img src="/2021/11/25/C-Learning-blog/assign_warning_pre.jpg" class="" title="赋值之前的内存分配">

<img src="/2021/11/25/C-Learning-blog/assign_warning_after.jpg" class="" title="赋值之后的内存分配">

<p><em>赋值之后s1的mCells和s2的mCells指针指向同一块内存，而s1之前的mCells指针指向的内存则被遗弃</em></p>
<p><font size=5><strong>注：赋值运算符中首先要先释放左边引用的内存然后在进行深层复制</strong></font></p>
</li>
<li><p>复制和赋值的优化</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 编写复制构造函数</span></span><br><span class="line">Spreadsheet::<span class="built_in">Spreadsheet</span>(<span class="keyword">const</span> Spreadsheet&amp; src) &#123;</span><br><span class="line">    mWidth = src.mWidth;</span><br><span class="line">    mHeight = src.mHeight;</span><br><span class="line">    mCells = <span class="keyword">new</span> SpreadsheetCell* [mWidth]; <span class="comment">// 手动为mCells指针动态分配内存，防止指针指向同一块内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        mCells[i] = <span class="keyword">new</span> SpreadsheetCell[mHeight];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mHeight; j++) &#123;</span><br><span class="line">            mCells[i][j] = src.mCells[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 编写赋值运算函数</span></span><br><span class="line">Spreadsheet&amp; Spreadsheet::<span class="keyword">operator</span>=(<span class="keyword">const</span> Spreadsheet&amp; rhs) &#123;</span><br><span class="line">  	<span class="comment">// 检测自赋值</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span> == &amp;rhs) &#123;</span><br><span class="line">        <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  	<span class="comment">// 先释放之前的指针指向的内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">delete</span>[] mCells[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">delete</span> [] mCells;</span><br><span class="line">    mCells = <span class="literal">nullptr</span>;</span><br><span class="line">    mWidth = rhs.mWidth;</span><br><span class="line">    mHeight = rhs.mHeight;</span><br><span class="line">    mCells = <span class="keyword">new</span> SpreadsheetCell* [mWidth]; <span class="comment">// 重新为mCells指针分配内存</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        mCells[i] = <span class="keyword">new</span> SpreadsheetCell[mHeight];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; mHeight; j++) &#123;</span><br><span class="line">            mCells[i][j] = rhs.mCells[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><font size=5><strong>只要类动态分配了内存，就应该编写析构函数、复制构造函数以及赋值运算符</strong></font></p>
</li>
<li><p>禁止赋值以及按值传递</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">private</span>:</span><br><span class="line">  	<span class="built_in">Spreadsheet</span>(<span class="keyword">const</span> Spreadsheet&amp; src);</span><br><span class="line">  	Spreadsheet&amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Spreadsheet&amp; rhs);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>并且不需要提供实现</em></p>
</li>
</ul>
<h4 id="2-可以使用的数据成员类型"><a href="#2-可以使用的数据成员类型" class="headerlink" title="2. 可以使用的数据成员类型"></a>2. 可以使用的数据成员类型</h4><ul>
<li><p>静态数据成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="keyword">static</span> <span class="keyword">int</span> sCounter = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C++ 11 之前在原文件中为静态数据成员分配空间并初始化</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;Spreadsheet.h&quot;</span></span></span><br><span class="line"><span class="keyword">int</span> Spreadsheet::sCounter = <span class="number">0</span>;</span><br></pre></td></tr></table></figure>

<p><em>C++11可以在定义静态数据时给初始值并分配内存，C++11之前不仅要在类定义中列出static类成员并且要在原文件中为其分配内存</em></p>
</li>
<li><p>在方法外访问静态数据成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> c = Spreadsheet::sCounter;</span><br></pre></td></tr></table></figure>

<p><em>但是不建议直接访问公有的数据成员，如果要访问请提供<code>get/set</code>方法进行访问</em></p>
</li>
<li><p>常量数据成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kMaxHeight = <span class="number">100</span>;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> kMaxWidth = <span class="number">100</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>引用数据成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetApplication</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	SpreadsheetApplication&amp; mTheApp; <span class="comment">// 引用数据成员</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 构造函数初始化引用数据成员</span></span><br><span class="line">Spreadsheet::<span class="built_in">Spreadsheet</span>(<span class="keyword">int</span> inWidth, <span class="keyword">int</span> inHeight, SpreadsheetApplication&amp; theApp):</span><br><span class="line">    <span class="built_in">mWidth</span>(inWidth &lt; kMaxWidth ? inWidth : kMaxWidth),</span><br><span class="line">    <span class="built_in">mHeight</span>(inHeight &lt; kMaxHeight ? inHeight : kMaxHeight),</span><br><span class="line">    <span class="built_in">mTheApp</span>(theApp) &#123;</span><br><span class="line">        mId = sCounter++;</span><br><span class="line">        mCells = <span class="keyword">new</span> SpreadsheetCell* [mWidth];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; mWidth; i++) &#123;</span><br><span class="line">            mCells[i] = <span class="keyword">new</span> SpreadsheetCell[mHeight];</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 复制构造函数初始化引用成员</span></span><br><span class="line">Spreadsheet::<span class="built_in">Spreadsheet</span>(<span class="keyword">const</span> Spreadsheet&amp; src) : <span class="built_in">mTheApp</span>(src.mTheApp) &#123;</span><br><span class="line">    mId = sCounter++;</span><br><span class="line">    <span class="built_in">copyFrom</span>(src);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>常量引用成员</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="built_in">Spreadsheet</span>(<span class="keyword">int</span> inWidth, <span class="keyword">int</span> inHeight, <span class="keyword">const</span> SpreadsheetApplication&amp; theApp);</span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="keyword">const</span> SpreadsheetApplication&amp; mTheApp;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>常量引用成员只能用于调用成员对象上的常量方法，如果调用非常量方法，编译器会报错</em></p>
</li>
</ul>
<h4 id="3-可以实现的方法的类型"><a href="#3-可以实现的方法的类型" class="headerlink" title="3. 可以实现的方法的类型"></a>3. 可以实现的方法的类型</h4><ul>
<li><p>静态方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">static</span> string <span class="title">doubleToString</span><span class="params">(<span class="keyword">double</span> val)</span></span>; <span class="comment">// 不允许将静态方法声明为const</span></span><br><span class="line">  	<span class="function"><span class="keyword">static</span> <span class="keyword">double</span> <span class="title">stringToDouble</span><span class="params">(<span class="keyword">const</span> string&amp; str)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现静态方法在方法前面不需要加static关键字，只需要在定义时加就行</span></span><br><span class="line"><span class="function">string <span class="title">SpreadsheetCell::doubleToString</span><span class="params">(<span class="keyword">double</span> val)</span> </span>&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">SpreadsheetCell::stringToDouble</span><span class="params">(<span class="keyword">const</span> string&amp; str)</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><em>静态方法不属于特定的对象，因此没有<code>this</code>指针，且静态方法内不能访问非静态数据成员</em></p>
</li>
<li><p><code>const</code>方法</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">double</span> <span class="title">getValue</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">  	<span class="function">string <span class="title">getString</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em><code>const</code> 方法内不能改变对象内部的值，<code>const</code>对象只能调用<code>const</code>方法，非<code>const</code>对象可以调用<code>const</code>方法以及非<code>const</code>方法</em></p>
<p><strong>mutable数据成员</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">protected</span>:</span><br><span class="line">  	<span class="keyword">mutable</span> <span class="keyword">int</span> mNumAccess = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 源文件中</span></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">SpreadsheetCell::getValue</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  mNumAccess++;</span><br><span class="line">  <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">string <span class="title">SpreadsheetCell::getString</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line">  mNumAccess++;</span><br><span class="line">  <span class="keyword">return</span> mString;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><code>mutable</code>修饰的数据成员可以在<code>const</code>方法中修改，<code>const</code>对象也可以修改</em></p>
</li>
</ul>
<h4 id="4-方法重载的细节"><a href="#4-方法重载的细节" class="headerlink" title="4. 方法重载的细节"></a>4. 方法重载的细节</h4><ul>
<li><p>方法重载的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SpreadsheetCell</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">double</span> inValue)</span></span>;</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">set</span><span class="params">(<span class="keyword">const</span> string&amp; inString)</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>C++允许根据传递的参数不同进行方法重载，但是不能根据返回值来重载方法</em></p>
<p><em>也可以根据<code>const</code>来重载方法</em></p>
</li>
<li><p>类型隐式转换</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">MyClass obj;</span><br><span class="line">obj.<span class="built_in">foo</span>(<span class="number">1</span>);</span><br><span class="line">obj.<span class="built_in">foo</span>(<span class="number">1.25</span>); <span class="comment">// 1.25被隐式转换成整数1，然后调用foo函数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> &#123;</span></span><br><span class="line">  <span class="keyword">public</span>:</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span></span>;</span><br><span class="line">  	<span class="function"><span class="keyword">void</span> <span class="title">foo</span><span class="params">(<span class="keyword">int</span> i)</span> </span>= <span class="keyword">delete</span>; <span class="comment">// 显示删除double类型参数的foo()，可以阻止上述隐式转换</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h4 id="5-如何使用默认参数"><a href="#5-如何使用默认参数" class="headerlink" title="5. 如何使用默认参数"></a>5. 如何使用默认参数</h4><ul>
<li><p>默认参数的实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Spreadsheet</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="built_in">Spreadsheet</span>(<span class="keyword">int</span> inWidth = kMaxWidth, <span class="keyword">int</span> inHeight = kMaxHeight, <span class="keyword">const</span> SpreadsheetApplication&amp; theApp);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>在类方法声明中指定默认参数，而不能在实现中指定默认参数，在实现中指定默认参数无作用</em></p>
</li>
</ul>
<h4 id="6-内联方法"><a href="#6-内联方法" class="headerlink" title="6. 内联方法"></a>6. 内联方法</h4><h4 id="7-如何使用嵌套类"><a href="#7-如何使用嵌套类" class="headerlink" title="7. 如何使用嵌套类"></a>7. 如何使用嵌套类</h4><h4 id="8-如何编写其他类的友元"><a href="#8-如何编写其他类的友元" class="headerlink" title="8. 如何编写其他类的友元"></a>8. 如何编写其他类的友元</h4><h4 id="9-什么是运算符重载"><a href="#9-什么是运算符重载" class="headerlink" title="9. 什么是运算符重载"></a>9. 什么是运算符重载</h4><h4 id="10-如何将类的接口与实现分离"><a href="#10-如何将类的接口与实现分离" class="headerlink" title="10. 如何将类的接口与实现分离"></a>10. 如何将类的接口与实现分离</h4>]]></content>
      <categories>
        <category>C++</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>libdispatch源码解析</title>
    <url>/2021/11/25/libdispatch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/</url>
    <content><![CDATA[<h1 id="libdispatch-源码解析"><a href="#libdispatch-源码解析" class="headerlink" title="libdispatch 源码解析"></a>libdispatch 源码解析</h1><h2 id="一、阅读前预习"><a href="#一、阅读前预习" class="headerlink" title="一、阅读前预习"></a>一、阅读前预习</h2><ul>
<li><p>原子操作</p>
<p><code>__sync_lock_test_and_set((p), (n))</code>： 给p赋值并返回操作之前的值</p>
<p><code>__sync_bool_compare_and_swap((p), (o), (n))</code>：这两个函数提供原子的比较和交换，如果*p==o，则将n写入p</p>
<p><code>__sync_add_and_fetch((p), (n))</code>：自加n，再返回</p>
<p><code>__sync_sub_and_fetch((p), (n))</code>：自减n，再返回</p>
<p><code>__sync_fetch_and_or((p), (v))</code>：先返回再进行或运算</p>
<p><code>__sync_fetch_and_and((p), (v))</code>：先返回再进行与运算</p>
</li>
<li><p><code>__builtin_expect</code>：编译器期望值优化</p>
<p><code>#define fastpath(x) ((typeof(x))__builtin_expect((long)(x), ~0l))</code>：多数情况下会发生</p>
<p><code>#define slowpath(x) ((typeof(x))__builtin_expect((long)(x), 0l))</code>：极少情况下发生</p>
</li>
<li><p>DISPATCH_DECL</p>
<p><code>#define DISPATCH_DECL(name) typedef struct name##_s *name##_t</code></p>
<p>例如：<code>DISPATCH_DECL(dispatch_queue);</code> 展开为-&gt; <code>typedef struct distach_queue_s *dispatch_quque_t</code></p>
</li>
</ul>
<h2 id="二、基本数据结构"><a href="#二、基本数据结构" class="headerlink" title="二、基本数据结构"></a>二、基本数据结构</h2><ul>
<li><p>dispatch_object_t</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_object_s</span> *_<span class="title">do</span>;</span>                <span class="comment">// dispatch_object_s结构体，这个是GCD的基类</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_continuation_s</span> *_<span class="title">dc</span>;</span>    <span class="comment">// 任务类型，通常dispatch_async内的block最终会封装成这个数据类型</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> *_<span class="title">dq</span>;</span>                    <span class="comment">// 任务队列，我们创建的队列（串行，并发）都是这个类型的</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_attr_s</span> *_<span class="title">dqa</span>;</span>        <span class="comment">// 任务队列的属性，任务队列的属性包含了任务队列里面的一些操作函数，可以表明队列是串行还是并发</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_group_s</span> *_<span class="title">dg</span>;</span>                    <span class="comment">// GCD的group</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_source_s</span> *_<span class="title">ds</span>;</span>                <span class="comment">// GCD的source，可以监测内核时间，文件读写事件和socket通信事件</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_source_attr_s</span> *_<span class="title">dsa</span>;</span>    <span class="comment">// source的属性</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_semaphore_s</span> *_<span class="title">dsema</span>;</span>    <span class="comment">// 信号量，可以用来调度线程</span></span><br><span class="line">&#125; <span class="keyword">dispatch_objct_t</span> __attribute__((transparent_union));</span><br></pre></td></tr></table></figure>

<p><code>__attribute__((transparent_union))</code>：透明联合体，透明联合类型削弱了C语言的类型检测机制</p>
</li>
<li><p>dispatch_object_s：整个GCD的基类</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_object_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_STRUCT_HEADER</span>(dispatch_object_s, dispatch_object_vtable_s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_STRUCT_HEADER(x, y)        \</span></span><br><span class="line"><span class="meta">    const struct y *do_vtable;                        \ <span class="comment">// 这个结构体内包含了 dispatch_object_s的操作函数</span></span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">x</span> *<span class="title">volatile</span> <span class="title">do_next</span>;</span>                        \ <span class="comment">// 链表的next</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> do_red_cnt;                            \ <span class="comment">// 引用计数</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> do_xref_cnt;                            \ <span class="comment">// 外部引用计数</span></span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> do_suspend_cnt;                    \ <span class="comment">// suspend计数，用作暂停标志，比如延时处理的任务，设置该引用计数后在任务到时后，计数器会将该标志位修改，然后唤醒队列调度</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> *<span class="title">do_targettq</span>;</span>    \ <span class="comment">// 目标队列，就是当前这个struct x 在哪个队列运行</span></span><br><span class="line">  <span class="keyword">void</span> *do_ctxt;                                                \ <span class="comment">// 上下文传递的参数</span></span><br><span class="line">  <span class="keyword">void</span> *do_finalizer;</span><br></pre></td></tr></table></figure></li>
<li><p><code>do_vtable</code>, 类型为<code>dispatch_object_vtable_s</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_object_vtable_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_VTABLE_HEADER</span>(dispatch_object_s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_VTABLE_HEADER(x)                                                        \</span></span><br><span class="line"><span class="meta">    unsigned long const do_type;                                                            \ <span class="comment">// 数据的具体类型</span></span></span><br><span class="line">    <span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> do_kind;                                                                \ <span class="comment">// 数据的类型描述字符串</span></span><br><span class="line">  <span class="built_in">size_t</span> (*<span class="keyword">const</span> do_debug)(struct x *, <span class="keyword">char</span> *, <span class="keyword">size_t</span>);            \ <span class="comment">// 用来获取调试时需要的变量信息</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> *(*<span class="title">const</span> <span class="title">do_invoke</span>)(<span class="keyword">struct</span> <span class="title">x</span> *);</span>    \ <span class="comment">// 唤醒队列的方法，全局队列和主队列此项为NULL</span></span><br><span class="line">  <span class="built_in"><span class="keyword">bool</span></span> (*<span class="keyword">const</span> do_probe)(struct x *);                                                \ <span class="comment">// 用于检测传入对象中的一些值是否满足条件</span></span><br><span class="line">  <span class="built_in"><span class="keyword">void</span></span> (*<span class="keyword">const</span> do_dispose)(struct x *)                                            \ <span class="comment">// 销毁队列的方法，通常内部会调用这个对象的finalizer函数</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_type(x) (x)-&gt;do_vtable-&gt;do_type</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_kind(x) (x)-&gt;do_vtable-&gt;do_kind</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_debug(x, y, z) (x)-&gt;do_vtable-&gt;do_debug((x), (y), (z))</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_dispose(x) (x)-&gt;do_vtable-&gt;do_dispose(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_invoke(x) (x)-&gt;do_vtable-&gt;do_invoke(x)</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dx_probe(x) (x)-&gt;do_vtable-&gt;do_probe(x)</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_continuation_s</code>：该结构体主要用来封装block和function，通常 <code>dispatch_async</code>内的block最终都会封装成这个数据类型</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_continuation_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_CONTINUATION_HEADER</span>(dispatch_continuation_s);</span><br><span class="line">  <span class="keyword">dispatch_group_t</span> dc_group;</span><br><span class="line">  <span class="keyword">void</span> *                     dc_data[<span class="number">3</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_CONTINUATION_HEADER(x)        \</span></span><br><span class="line"><span class="meta">    const void * do_vtable;                                    \</span></span><br><span class="line"><span class="meta">    struct x *volatile do_next;                            \</span></span><br><span class="line"><span class="meta">    dispatch_function_t dc_func;                        \</span></span><br><span class="line"><span class="meta">    void * dc_ctxt;                                                    \</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_queue_s</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_STRUCT_HEADER</span>(dispatch_queue_s, dispatch_queue_vtable_s);</span><br><span class="line">  DISPATCH_QUEUE_HEADER;</span><br><span class="line">  <span class="keyword">char</span> dq_label[DISPATCH_QUEUE_MIN_LABEL_SIZE];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_QUEUE_MIN_LABEL_SIZE  64                <span class="comment">// 队列起名最多64个字符</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_QUEUE_HEADER                                                \</span></span><br><span class="line"><span class="meta">    uint32_t dq_running;                                                            \</span></span><br><span class="line"><span class="meta">    uint32_t dq_width;                                                                \</span></span><br><span class="line"><span class="meta">    struct dispatch_object_s *dq_items_tail;                    \</span></span><br><span class="line"><span class="meta">    struct dispatch_object_s *volatile dq_items_head;    \</span></span><br><span class="line"><span class="meta">    unsigned long dq_serialnum;                                                \</span></span><br><span class="line"><span class="meta">    void *dq_finalizer_ctxt;                                                    \</span></span><br><span class="line"><span class="meta">    dispatch_queue_fializer_function_t dq_finalizer_func;</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_group_s</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="built_in">DISPATCH_DECL</span>(dispatch_group);</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_DECL(name) typedef struct name##_s *name##_t;</span></span><br></pre></td></tr></table></figure>

<p>*<code>dispatch_group_t</code>等效与<code>dispatch_group_s *</code></p>
<p>在 semaphore.c 中</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">dispatch_group_t</span></span></span><br><span class="line"><span class="function"><span class="title">dispatch_group_create</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> （<span class="keyword">dispatch_group_t</span>）<span class="built_in">dispatch_semaphore_create</span>(LONG_MAX);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出<code>dispatch_group_t</code>本质是一个value为<code>LONG_MAX</code>的<code>semaphore</code></p>
</li>
<li><p><code>dispatch_source_s</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_source_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_STRUCT_HEADER</span>(dispatch_source_s, dispatch_source_vtable_s);</span><br><span class="line">  DISPATCH_QUEUE_HEADER;</span><br><span class="line">  <span class="class"><span class="keyword">union</span> &#123;</span></span><br><span class="line">    <span class="keyword">char</span> _ds_pad[DISPATCH_QUEUE_MIN_LABEL_SIZE];</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">      <span class="keyword">char</span> dq_label[<span class="number">8</span>];</span><br><span class="line">      <span class="keyword">dispatch_keven_t</span> ds_dkev;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">dispatch_source_handler_function_t</span> ds_handler_func;</span><br><span class="line">      <span class="keyword">void</span> *ds_handler_ctxt;</span><br><span class="line">      <span class="keyword">void</span> *ds_cancel_handler;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> ds_is_level:<span class="number">1</span>,</span><br><span class="line">          ds_is_adder:<span class="number">1</span>,</span><br><span class="line">          ds_is_installed:<span class="number">1</span>,</span><br><span class="line">          ds_needs_rearm:<span class="number">1</span>,</span><br><span class="line">          ds_is_armed:<span class="number">1</span>,</span><br><span class="line">          ds_is_legacy:<span class="number">1</span>,</span><br><span class="line">          ds_cancel_is_block:<span class="number">1</span>,</span><br><span class="line">          ds_handler_is_block:<span class="number">1</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">int</span> ds_atomic_flags;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> ds_data;</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> ds_pending_data;</span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> ds_pending_data_mask;</span><br><span class="line">      </span><br><span class="line">      <span class="built_in">TAILQ_ENTRY</span>(dispatch_source_s) ds_list;</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">unsigned</span> <span class="keyword">long</span> ds_ident_hack;</span><br><span class="line">      </span><br><span class="line">      <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_timer_source_s</span> <span class="title">ds_time</span>;</span></span><br><span class="line">    &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_semaphore_s</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_semaphore_s</span> &#123;</span></span><br><span class="line">  <span class="built_in">DISPATCH_STRUCT_HEADER</span>(dispatch_semaphore_s, dispatch_semaphore_vtable_s);</span><br><span class="line">  <span class="keyword">long</span> dsema_value; <span class="comment">// 信号值</span></span><br><span class="line">  <span class="keyword">long</span> dsema_orig;     <span class="comment">// 记录其初始值，或者成为原始值，创建信号时设置的</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">/*</span></span><br><span class="line"><span class="comment">  只是一个放置信号量被意外唤醒的变量，这个变量在signal过程中+1，然后wait的时候如果发现这个值不是1，那么就直接返回了，而不会进入接下来的sim_wait</span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line">  <span class="keyword">size_t</span> dsema_sent_ksignals;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">semaphore_t</span> dsema_port;</span><br><span class="line">  <span class="keyword">semaphore_t</span> dsema_waiter_port;</span><br><span class="line">  <span class="keyword">size_t</span> dsema_group_waiters;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_sema_notify_s</span> *<span class="title">dsema_notify_head</span>;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_sema_notify_s</span> *<span class="title">dsema_notify_tail</span>;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="三、libdispatch"><a href="#三、libdispatch" class="headerlink" title="三、libdispatch"></a>三、libdispatch</h2><ul>
<li><p>初始化 <code>void libdispatch_init(void)</code></p>
<p>TSD: Thread-specific data 线程私有数据</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">libdispatch_init</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 以下assert保证定义的宏不会出问题</span></span><br><span class="line">  <span class="built_in">dispatch_assert</span>(DISPATCH_QUEUE_PRIORITY_COUNT == <span class="number">3</span>);</span><br><span class="line">  <span class="built_in">dispatch_asset</span>(DISPATCH_ROOT_QUEUE_COUNT == <span class="number">6</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">dispatch_assert</span>(DISPATCH_QUEUE_PRIORITY_LOW == -DISPATCH_QUEUE_PRIORITY_HIGH);</span><br><span class="line">  <span class="built_in">dispatch_assert</span>(<span class="built_in">countof</span>(_dispatch_root_queues) == DISPATCH_ROOT_QUEUE_COUNT);</span><br><span class="line">  <span class="built_in">dispatch_assert</span>(<span class="built_in">countof</span>(_dispatch_thread_mediator) == DISPATCH_ROOT_QUEUE_COUNT);</span><br><span class="line">  <span class="built_in">dispatch_assert</span>(<span class="built_in">countof</span>(_dispatch_root_queue_contexts) == DISPATCH_ROOT_QUEUE_COUNT);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// TSD池分配</span></span><br><span class="line">  _dispatch_thread_key_init_np(dispatch_queue_key, _dispatch_queue_cleanup);</span><br><span class="line">  _dispatch_thread_key_init_np(dispatch_sema4_key, (<span class="built_in"><span class="keyword">void</span></span>(*)(<span class="keyword">void</span> *))dispatch_release);</span><br><span class="line">  _dispatch_thread_key_init_np(dispatch_cache_key, _dispatch_cache_cleanup2);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> DISPATCH_PERF_MON</span></span><br><span class="line">  _dispatch_thread_key_init_np(dispatch_bcounter_key, <span class="literal">NULL</span>);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 主线程设置TSD</span></span><br><span class="line">  _dispatch_thread_setspecific(dispatch_queue_key, &amp;_dispatch_main_q);</span><br><span class="line">  _dispatch_queue_set_width_init();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_once</code> 分析</p>
<ol>
<li><p>dispatch_once 如何在多线程下保持生成对象的唯一性？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">+ (instancetype)sharedInstance &#123;</span><br><span class="line">  static XXObject *_instance;</span><br><span class="line">  static dispatch_once_t _predicate;</span><br><span class="line">  dispatch_once(&amp;_predicate, ^&#123;</span><br><span class="line">    _instance = [[XXobject alloc] init];</span><br><span class="line">  &#125;);</span><br><span class="line">  return _instance;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>（Objective-C单例示例）</em></p>
</li>
<li><p><code>dispatch_once_t</code></p>
<ul>
<li><p>_<code>once.h</code>_中定义为一个长整形</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">dispatch_once_t</span>;</span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_once</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch_once</span><span class="params">(<span class="keyword">dispatch_once_t</span> *val, <span class="keyword">void</span> (^block)(<span class="keyword">void</span>))</span> </span>&#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">Block_basic</span> *<span class="title">bb</span> =</span> (<span class="keyword">void</span> *)block;</span><br><span class="line">  <span class="built_in">dispatch_once_f</span>(val, block, (<span class="keyword">void</span> *)bb-&gt;Block_invoke);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_once_f</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch_once_f</span><span class="params">(<span class="keyword">dispatch_once_t</span> *val, <span class="keyword">void</span> *ctxt, <span class="keyword">void</span> (*func)(<span class="keyword">void</span> *))</span> </span>&#123;</span><br><span class="line">  <span class="keyword">volatile</span> <span class="keyword">long</span> *vval = val;</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">dispatch_atomic_cmpxchg</span>(val, <span class="number">0l</span>, <span class="number">1l</span>)) &#123;</span><br><span class="line">    <span class="built_in">func</span>(ctxt);</span><br><span class="line">    <span class="built_in">dispatch_atomic_barrier</span>();</span><br><span class="line">    *val = ~<span class="number">0l</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">      _dispatch_hardware_pause();</span><br><span class="line">    &#125; <span class="keyword">while</span> (*vval != ~<span class="number">0l</span>);</span><br><span class="line">    <span class="built_in">dispatch_atomic_barrier</span>();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><code>dispatch_atomic_barrier</code> 是一个内存屏障，可以保证在block执行完成后才能修改 *val 的值</em></p>
<p><em>在首个线程A执行block的过程中，如果其它的线程也进入<code>dispatch_once_f</code>，那么这个时候if的原子判断一定是返回false，于是走到了else分支，于是执行了do<del>while循环，其中调用了<code>_dispatch_hardware_pause</code>，这有助于提高性能和节省CPU耗电，pause就像nop，干的事情就是延迟空等的事情。直到首个线程已经将block执行完毕且将*val修改为</del>0，调用<code>dispatch_atomic_barrier</code>后退出。这么看来其它的线程是无法执行block的，这就保证了在<code>dispatch_once_f</code>的block的执行的唯一性，生成的单例也是唯一的</em></p>
</li>
<li><p><code>dispatch_once</code>死锁</p>
<p>方式一：</p>
<p>​    1、某线程T1()调用单例A，且为应用生命周期内首次调用，需要使用dispatch_once(&amp;token, block())初始化单例；<br>​    2、block中可能掉用到了B流程，B流程又调用了C流程，C流程可能调用到了单例A，将会再次调用dispatch_once；<br>​    3、这样又造成了相互等待。</p>
<p>方式二：</p>
<p>​    1、某线程T1()调用单例A，且为应用生命周期内首次调用，需要使用dispatch_once(&amp;token, block())初始化单例。<br>​    2、上述block()中的某个函数调用了dispatch_sync_safe，同步在T2线程执行代码<br>​    3、T2线程正在执行的某个函数需要调用到单例A，将会再次调用dispatch_once。<br>​    4、这样T1线程在等block执行完毕，它在等待T2线程执行完毕，而T2线程在等待T1线程的dispatch_once执行完毕，造成了相互等待，故而死锁</p>
</li>
</ul>
<h3 id="dispatch-queue"><a href="#dispatch-queue" class="headerlink" title="dispatch_queue"></a>dispatch_queue</h3><img src="/2021/11/25/libdispatch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/dispatch_queue_header.jpg" class="" title="DISPATCH_QUEUE_HEADER">

<ul>
<li><p>参考上方<code>dispatch_queue_s</code>的结构可发现，<code>struct x *volatile do_next</code> 可展开为 <code>struct dispatch_queue_s *volatile do_next</code>，<code>struct y *do_vtable</code> 可展开为 <code>const struct dispatch_queue_vtable_s *do_vtable</code>，<code>dispatch_queue_vtable_s</code>结构体中包含了<code>dispatch_object_s</code>或者其他子类的操作函数</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> <span class="keyword">const</span> do_type;    \                           <span class="comment">// 数据的具体类型</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> *<span class="keyword">const</span> do_kind; \                                <span class="comment">// 数据的类型描述字符串</span></span><br><span class="line"><span class="built_in">size_t</span> (*<span class="keyword">const</span> do_debug)(struct x *, <span class="keyword">char</span> *, <span class="keyword">size_t</span>);   \   <span class="comment">// 用来获取调试时需要的变量信息</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> *(*<span class="title">const</span> <span class="title">do_invoke</span>)(<span class="keyword">struct</span> <span class="title">x</span> *);</span>\   <span class="comment">// 唤醒队列的方法，全局队列和主队列此项为NULL</span></span><br><span class="line"><span class="built_in"><span class="keyword">bool</span></span> (*<span class="keyword">const</span> do_probe)(struct x *); \                       <span class="comment">// 用于检测传入对象中的一些值是否满足条件</span></span><br><span class="line"><span class="built_in"><span class="keyword">void</span></span> (*<span class="keyword">const</span> do_dispose)(struct x *)                        <span class="comment">// 销毁队列的方法，通常内部会调用 这个对象的 finalizer 函数</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>dq_label</code> 代表队列的名字</p>
</li>
<li><p>队列的获取</p>
<p><code>dispatch_get_main_queue()</code> 源码为</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> dispatch_get_main_queue() (&amp;_dispatch_main_q)</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> _<span class="title">dispatch_main_q</span> =</span> &#123;</span><br><span class="line">  .do_vtable = &amp;_dispatch_queue_vtable,</span><br><span class="line">  .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">  .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">  .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">  .do_targetq = &amp;_dispatch_root_queues[DISPATCH_ROOT_QUEUE_COUNT / <span class="number">2</span>],</span><br><span class="line">  .dq_label = <span class="string">&quot;com.apple.main-thread&quot;</span>,</span><br><span class="line">  .dq_running = <span class="number">1</span>,</span><br><span class="line">  .dq_width = <span class="number">1</span>,</span><br><span class="line">  .dq_serialnum = <span class="number">1</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><em>实际上是一个宏，返回的是<code>dispatch_main_q</code>的地址</em></p>
</li>
<li><p><code>do_vtable</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_vtable_s</span> _<span class="title">dispatch_queue_vtable</span> =</span> &#123;</span><br><span class="line">  .do_type = DISPATCH_QUEUE_TYPE,</span><br><span class="line">  .do_kind = <span class="string">&quot;queue&quot;</span>,</span><br><span class="line">  .do_dispose = _dispatch_queue_dispose,</span><br><span class="line">  .do_invoke = (<span class="keyword">void</span> *)dummy_function_r0,</span><br><span class="line">  .do_probe = (<span class="keyword">void</span> *)dummy_function_r0,</span><br><span class="line">  .do_debug = dispatch_queue_debug,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p><code>do_ref_cnt</code>和 <code>do_xref_cnt</code>：这两个值都和GCD对象的内存管理有关，只有这两个值同时为0，GCD对象才能被释放，主队列的这两个成员的值都为<code>DISPATCH_OBJeCT_GLOBAL_REFCNT</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_OBJECT_GLOBAL_REFCNT     (~0u)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> _dispatch_retain(<span class="keyword">dispatch_object_t</span> dou) &#123;</span><br><span class="line">  <span class="keyword">if</span> (dou._do-&gt;do_ref_cnt == DISPATCH_OBJECT_GLOBAL_REFCNT) &#123;</span><br><span class="line">    <span class="keyword">return</span>; <span class="comment">// global object</span></span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch_release</span><span class="params">(<span class="keyword">dispatch_object_t</span> dou)</span> </span>&#123;</span><br><span class="line">  <span class="built_in">typeof</span>(dou._do-&gt;do_xref_cnt) oldval;</span><br><span class="line">  <span class="keyword">if</span> (dou._do-&gt;do_xref_cnt == DISPATCH_OBJECT_GLOBAL_REFCNT) &#123;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>可以看出主队列的生命周期是随着应用的，不会受 retain 和 release 的影响</p>
</li>
<li><p><code>do_targetq</code> (目标队列)</p>
<p><em>非全局队列，需要压入globalQueue中来处理，因此需要指明target_queue</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_ROOT_QUEUE_COUNT 6</span></span><br><span class="line"></span><br><span class="line">.do_targetq = &amp;_dispatch_root_queue[DISPATCH_ROOT_QUEUE_COUNT / <span class="number">2</span>],</span><br><span class="line">.do_targetq = &amp;_dispatch_root_queue[<span class="number">3</span>]</span><br></pre></td></tr></table></figure></li>
<li><p><code>_dispatch_mgr_q</code> 管理队列</p>
<p><em>注：这个队列是GCD内部使用，不对外公开</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> _<span class="title">dispatch_mgr_q</span> =</span> &#123;</span><br><span class="line">  .do_vtable = &amp;_dispatch_queue_mgr_vtable,</span><br><span class="line">  .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">  .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">  .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">  .do_targetq = &amp;_dispatch_root_queues[DISPATCH_ROOT_QUEUE_COUNT - <span class="number">1</span>],</span><br><span class="line"></span><br><span class="line">  .dq_label = <span class="string">&quot;com.apple.libdispatch-manager&quot;</span>,</span><br><span class="line">  .dq_width = <span class="number">1</span>,</span><br><span class="line">  .dq_serialnum = <span class="number">2</span>,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_vtable_s</span> _<span class="title">dispatch_queue_mgr_vtable</span> =</span> &#123;</span><br><span class="line">  .do_type = DISPATCH_QUEUE_MGR_TYPE,</span><br><span class="line">  .do_kind = <span class="string">&quot;mgr-queue&quot;</span>,</span><br><span class="line">  .do_invoke = _dispatch_mgr_invoke,</span><br><span class="line">  .do_debug = dispatch_queue_debug,</span><br><span class="line">  .do_probe = _dispatch_mgr_wakeup,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<p>管理队列的<code>do_targetq</code> 为 “com.apple.root.high-overcommit-priority” 的全局队列</p>
</li>
<li><p>全局队列：<code>dispatch_get_global_queue</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span></span><br><span class="line">  DISPATCH_QUEUE_PRIORITY_HIGH = <span class="number">2</span>,</span><br><span class="line">  DISPATCH_QUEUE_PRIORITY_DEFAULT = <span class="number">0</span>,</span><br><span class="line">  DISPATCH_QUEUE_PRIORITY_LOW = <span class="number">-2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">dispatch_queue_t</span> <span class="built_in">dispatch_get_gloabl_queue</span>(<span class="keyword">long</span> priority, <span class="keyword">unsigned</span> <span class="keyword">long</span> flags) &#123;</span><br><span class="line">  <span class="keyword">if</span> (flags &amp; ~DISPATCH_QUEUE_OVERCOMMIT) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> _dispatch_get_root_queue(priority, flags &amp; DISPATCH_QUEUE_OVERCOMMIT)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">dispatch_queue_t</span> _dispatch_get_root_queue(<span class="keyword">long</span> priority, <span class="keyword">bool</span> overcommit) &#123;</span><br><span class="line">  <span class="keyword">if</span> (overcommit) &#123;</span><br><span class="line">    <span class="built_in"><span class="keyword">switch</span></span> (priority) &#123;</span><br><span class="line">      <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_LOW:</span><br><span class="line">            <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">1</span>];</span><br><span class="line">      <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_DEFAULT:</span><br><span class="line">            <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">3</span>];</span><br><span class="line">      <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_HIGH:</span><br><span class="line">            <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">5</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="built_in"><span class="keyword">switch</span></span> (priority) &#123;</span><br><span class="line">    <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_LOW:</span><br><span class="line">        <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_DEFAULT:</span><br><span class="line">        <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">case</span> DISPATCH_QUEUE_PRIORITY_HIGH:</span><br><span class="line">        <span class="keyword">return</span> &amp;_dispatch_root_queues[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>不同的libdispatch的全局队列数量可能不同，此版本的源码中只定义了6个全局队列，最新的版本的全局队列可能定义了8个或者8个以上</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_queue_s</span> _<span class="title">dispatch_root_queues</span>[] =</span> &#123;</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">0</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.low-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">4</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">1</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.low-overcommit-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">5</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">2</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.default-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">6</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">3</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.default-overcommit-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">7</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">4</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.high-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">8</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        .do_vtable = &amp;_dispatch_queue_root_vtable,</span><br><span class="line">        .do_ref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_xref_cnt = DISPATCH_OBJECT_GLOBAL_REFCNT,</span><br><span class="line">        .do_suspend_cnt = DISPATCH_OBJECT_SUSPEND_LOCK,</span><br><span class="line">        .do_ctxt = &amp;_dispatch_root_queue_contexts[<span class="number">5</span>],</span><br><span class="line"></span><br><span class="line">        .dq_label = <span class="string">&quot;com.apple.root.high-overcommit-priority&quot;</span>,</span><br><span class="line">        .dq_running = <span class="number">2</span>,</span><br><span class="line">        .dq_width = UINT32_MAX,</span><br><span class="line">        .dq_serialnum = <span class="number">9</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li>
<li><p>自定义队列</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">dispatch_queue_t</span> <span class="title">dispatch_queue_create</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *label, <span class="keyword">dispatch_queue_attr_t</span> attr)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">dispatch_queue_t</span> dq;</span><br><span class="line">  <span class="keyword">size_t</span> label_len;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!label) &#123;</span><br><span class="line">    label = <span class="string">&quot;&quot;</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 获取名称的长度</span></span><br><span class="line">  label_len = <span class="built_in">str_len</span>(label);</span><br><span class="line">  <span class="keyword">if</span> (label_len &lt; (DISPATCH_QUEUE_MIN_LABEL_SIZE - <span class="number">1</span>)) &#123;</span><br><span class="line">    label_len = DISPATCH_QUEUE_MIN_LABEL_SIZE - <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 申请队列内存</span></span><br><span class="line">  dq = <span class="built_in">calloc</span>(<span class="number">1ul</span>, <span class="built_in"><span class="keyword">sizeof</span></span>(struct dispatch_queue_s) - DISPATCH_QUEUE_MIN_LABEL_SIZE + label_len + <span class="number">1</span>);</span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">slowpath</span>(!dq)) &#123;</span><br><span class="line">    <span class="keyword">return</span> dq;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 设置自定义队列的基本属性</span></span><br><span class="line">  _dispatch_queue_init(dq);</span><br><span class="line">  <span class="comment">// 设置队列名称</span></span><br><span class="line">  <span class="built_in">strcpy</span>(dq-&gt;dq_label, label);</span><br><span class="line">  </span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DISPATCH_NO_LEGACY</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">slowpath</span>(attr)) &#123;</span><br><span class="line">    <span class="comment">// 获取一个全局队列，它有两个参数，分别表示优先级和是否支持overcommit</span></span><br><span class="line">    <span class="comment">// 带有overcommit 的队列表示每当有任务提交时，系统都会新开一个线程处理，这样就不会造成某一个线程过载</span></span><br><span class="line">    dq-&gt;do_targetq = _dispatch_get_root_queue(attr-&gt;qa_priority, attr-&gt;qa_flags &amp; DISPATCH_QUEUE_OVERCOMMIT);</span><br><span class="line">    dq-&gt;dq_finalizer_ctxt = attr-&gt;finalizer_ctxt;</span><br><span class="line">    dq-&gt;dq_finalizer_func = attr-&gt;finalizer_func;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// Block 特殊处理</span></span><br><span class="line">  <span class="meta">#<span class="meta-keyword">ifdef</span> __BLOCKS__</span></span><br><span class="line">    <span class="keyword">if</span> (attr-&gt;finalizer_func == (<span class="keyword">void</span> *)_dispatch_call_block_and_release2) &#123;</span><br><span class="line">      <span class="comment">// 如果finalizer_ctxt是一个Block，需要进行retain</span></span><br><span class="line">      dq-&gt;dq_finalizer_ctxt = <span class="built_in">Block_copy</span>(dq-&gt;dq_finalizer_ctxt);</span><br><span class="line">      <span class="keyword">if</span> (!(dq-&gt;dq_finalizer_ctxt)) &#123;</span><br><span class="line">        <span class="keyword">goto</span> out_bad;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">  </span><br><span class="line">  <span class="keyword">return</span> dq;</span><br><span class="line">  </span><br><span class="line">out_bad:</span><br><span class="line">  <span class="built_in">free</span>(dq);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>接下来看看<code>_dispatch_queue_init</code> 函数的内部实现</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">inline</span> <span class="keyword">void</span> _dispatch_queue_init(<span class="keyword">dispatch_queue_t</span> dq) &#123;</span><br><span class="line">  dq-&gt;do_vtable = &amp;_dispatch_queue_vtable;</span><br><span class="line">  dq-&gt;do_next = DISPATCH_OBJECT_LISTLESS;</span><br><span class="line">  dq-&gt;do_ref_cnt = <span class="number">1</span>;</span><br><span class="line">  dq-&gt;do_xref_cnt = <span class="number">1</span>;</span><br><span class="line">  dq-&gt;do_targetq = _dispatch_get_root_queue(<span class="number">0</span>, <span class="literal">true</span>);</span><br><span class="line">  dq-&gt;dq_running = <span class="number">0</span>;</span><br><span class="line">  dq-&gt;dq_width = <span class="number">1</span>;</span><br><span class="line">  dq-&gt;dq_serialnum = <span class="built_in">dispatch_atomic_inc</span>(&amp;_dispatch_queue_serial_numbers) - <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>通过前面全局队列的代码可发现，全局并发队列的并发数<code>dq_width</code>均为<code>UINT32_MAX</code>，而这里<code>_dispatch_queue_init</code>中的<code>dq_width</code>为1，说明这是一个串行队列的默认设置</em></p>
<p><em>另外<code>dq-&gt;do_targetq = _dispatch_get_root_queue(0, true)</code>，它涉及到GCD队列与block 的一个重要模型，target_queue。向任何队列中提交的 block，都会被放到它的目标队列中执行，而普通串行队列的目标队列就是一个支持 overcommit 的全局队列，全局队列的底层则是一个线程池</em></p>
<img src="/2021/11/25/libdispatch%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90/dispatch_thread_pool.png" class="" title="GCD线程队列">

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">unsigned</span> <span class="keyword">long</span> _dispatch_queue_serial_numbers = <span class="number">10</span>;</span><br><span class="line"><span class="comment">// skip zero</span></span><br><span class="line"><span class="comment">// 1 - main_q</span></span><br><span class="line"><span class="comment">// 2 - mgr_q</span></span><br><span class="line"><span class="comment">// 3 - _unused_</span></span><br><span class="line"><span class="comment">// 4, 5, 6, 7, 8, 9 - global queues</span></span><br></pre></td></tr></table></figure></li>
<li><p><code>dispatch_queue_attr_t</code> 的特殊处理</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dispatch_call_block_and_release2(<span class="keyword">void</span> *block, <span class="keyword">void</span> *ctxt) &#123;</span><br><span class="line">  <span class="built_in"><span class="keyword">void</span></span> (^b)(<span class="keyword">void</span> *) = block;</span><br><span class="line">  <span class="built_in">b</span>(ctxt);</span><br><span class="line">  <span class="built_in">Block_release</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em>如果在自定义队列是传递了attr参数，那么表示支持overcommit，带有overcommit 的队列表示每当有任务提交时，系统都会新开一个线程处理，这样就不会造成某个线程过载，同时如果<code>finalizer_func == _dispatch_call_block_and_release2</code>需要对<code>dq_finalizer_ctxt</code>进行retain</em></p>
</li>
</ul>
</li>
</ol>
</li>
<li><p>常用API解析</p>
<ol>
<li><code>dispatch_async</code></li>
</ol>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch_async</span><span class="params">(<span class="keyword">dispatch_queue_t</span> dq, <span class="keyword">void</span> (^work)(<span class="keyword">void</span>))</span> </span>&#123;</span><br><span class="line">  <span class="built_in">dispatch_async_f</span>(dq, _dispatch_Block_copy(work), _dispatch_call_block_and_release);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​    (1)<code>dispatch_Block_copy</code> 在堆上创建传入的block 的拷贝，或者增加引用计数，这样就保证了block在执行之前不会销毁</p>
</li>
</ul>
<p>​           (2) <code>_dispatch_call_block_and_release</code> 的定义如下，顾名思义，调用block，然后将block销毁</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dispatch_call_block_and_release(<span class="keyword">void</span> *block) &#123;</span><br><span class="line">  <span class="built_in"><span class="keyword">void</span></span> (^b)(<span class="keyword">void</span>) = block;</span><br><span class="line">  <span class="built_in">b</span>();</span><br><span class="line">  <span class="built_in">Block_release</span>(b);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​            (3) <code>dispatch_async_f</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dispatch_async_f</span><span class="params">(<span class="keyword">dispatch_queue_t</span> dq, <span class="keyword">void</span> *ctxt, <span class="keyword">dispatch_function_t</span> func)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">dispatch_continuation_t</span> dc = <span class="built_in">fastpath</span>(_dispatch_continuation_alloc_cacheonly());</span><br><span class="line">  <span class="keyword">if</span> (!dc) &#123;</span><br><span class="line">    <span class="keyword">return</span> _dispatch_async_f_slow(dq, ctxt, func);</span><br><span class="line">  &#125;</span><br><span class="line">  dc-&gt;do_vtable = (<span class="keyword">void</span> *)DISPATCH_OBJ_ASYNC_BIT;</span><br><span class="line">  dc-&gt;dc_func = func;</span><br><span class="line">  dc-&gt;dc_ctxt = ctxt;</span><br><span class="line">  _dispatch_queue_push(dq, dc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​            (4) <code>dispatch_continuation_alloc_cacheonly</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">dispatch_continuation_t</span> _dispatch_continuation_alloc_cacheonly(<span class="keyword">void</span>) &#123;</span><br><span class="line">  <span class="keyword">dispatch_continuation_t</span> dc = <span class="built_in">fastpath</span>(_dispatch_thread_getspecific(dispatch_cache_key));</span><br><span class="line">  <span class="keyword">if</span> (dc) &#123;</span><br><span class="line">    _disoatch_thread_setspecific(dispatch_cache_key, dc-&gt;do_next);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​        <em>这个函数的目的是从线程的TLS中提取出一个<code>dispatch_continuation_t</code>的结构</em></p>
<p>​        <em>TLS：线程的稀有存储，线程都是有自己的私有存储的，这些私有存储不会被其他线程所使用</em></p>
<p>​        <em>如果线程中的TLS不存在<code>dispatch_continuation_t</code>结构的数据，则走<code>_dispatch_async_f_slow()</code>函数</em></p>
<p>​        <em>如果dc不为空，设置其do_vtable为DISPATCH_OBJ_ASYNC_BIT（主要用于区分类型），把传入的block传给dc的dc_ctxt作为上下文，最后将dc的dc_func设置为_dispatch_call_block_and_release，最后调用_dispatch_queue_push进行入队操作</em></p>
<p>​        <em><code>DISPATCH_OBJ_ASYNC_BIT</code>是一个宏，为了区分async，group和barrier</em></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_OBJ_ASYNC_BIT  0x1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_OBJ_BARRIER_BIT    0x2</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DISPATCH_OBJ_GROUP_BIT  0x4</span></span><br></pre></td></tr></table></figure>

<p>​            (5) <code>_dispatch_async_f_slow</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">DISPATCH_NOINLINE <span class="keyword">static</span> <span class="keyword">void</span> _dispatch_async_f_slow(<span class="keyword">dispatch_queue_t</span> dq, <span class="keyword">void</span> *context, <span class="keyword">dispatch_function_t</span> func) &#123;</span><br><span class="line">  <span class="keyword">dispatch_continuation_t</span> dc = <span class="built_in">fastpath</span>(_dispatch_continuation_alloc_from_heap());</span><br><span class="line">  dc-&gt;do_vtable = (<span class="keyword">void</span> *)DISPATCH_OBJ_ASYNC_BIT;</span><br><span class="line">  dc-&gt;dc_func = func;</span><br><span class="line">  dc-&gt;dc_ctxt = context;</span><br><span class="line">  <span class="comment">// 往dq这个队列中压入了一个续体dc</span></span><br><span class="line">  _dispatch_queue_push(dq, dc);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dispatch_continuation_t</span> _dispatch_continuation_alloc_from_heap(<span class="keyword">void</span>) &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">dispatch_once_t</span> pred;</span><br><span class="line">  <span class="keyword">dispatch_continuation_t</span> dc;</span><br><span class="line">  <span class="built_in">dispatch_once_f</span>(&amp;pred, <span class="literal">NULL</span>, _dispatch_ccache_init);</span><br><span class="line">  <span class="keyword">while</span> (!(dc = <span class="built_in">fastpath</span>(<span class="built_in">malloc_zone_calloc</span>(_dispatch_ccache_zone, <span class="number">1</span>, <span class="built_in">ROUND_UP_TO_CACHELINE_SIZE</span>(<span class="built_in"><span class="keyword">sizeof</span></span>(*dc)))))) &#123;</span><br><span class="line">    <span class="built_in">sleep</span>(<span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> dc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>​            (6) <code>_dispatch_queue_push</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _dispatch_queue_push(x, y) _dispatch_queue_push_list((x), (y), (y))</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">inline</span> <span class="keyword">void</span> _dispatch_queue_push_list(<span class="keyword">dispatch_queue_t</span>, dq, <span class="keyword">dispatch_object_t</span> _head, <span class="keyword">dispatch_object_t</span> _tail) &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_object_s</span> *<span class="title">prev</span>, *<span class="title">head</span> =</span> _head._do, *tail = _tail._do;</span><br><span class="line">  tail-&gt;do_next = <span class="literal">NULL</span>;</span><br><span class="line">  prev = <span class="built_in">fastpath</span>(<span class="built_in">dispatch_atomic_xchg</span>(&amp;dq-&gt;dq_items_tail, tail));</span><br><span class="line">  <span class="keyword">if</span> (prev) &#123;</span><br><span class="line">    prev-&gt;do_next = head;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    _dispatch_queue_push_list_slow(dq, head);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dispatch_queue_push_list_slow(<span class="keyword">dispatch_queue_t</span> dq, struct dispatch_object_s *obj)</span><br><span class="line">&#123;</span><br><span class="line">    _dispatch_retain(dq);</span><br><span class="line">    dq-&gt;dq_items_head = obj;</span><br><span class="line">    _dispatch_wakeup(dq);</span><br><span class="line">    _dispatch_release(dq);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><em><code>_dispatch_queue_push_list_slow</code>直接将<code>dq-&gt;dq_items_head</code>设置为dc，然后调用<code>_dispatch_wakeup</code>唤醒这个队列。这里直接执行<code>_dispatch_wakeup</code>的原因是此时队列为空，没有任务执行，处于休眠状态，所以需要唤醒。</em></p>
<p>​            (7) <code>_dispatch_wakeup</code></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">dispatch_queue_t</span> _dispatch_wakeup(<span class="keyword">dispatch_object_t</span> dou) &#123;</span><br><span class="line">  <span class="keyword">dispatch_queue_t</span> tq;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">slowpath</span>(<span class="built_in">DISPATCH_OBJECT_SUSPEND</span>(dou._do))) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 全局队列的dx_probe指向了_dispatch_queue_wakeup_gloabl，这里走唤醒逻辑，如果唤醒失败，且队尾指针为空，则返回NULL</span></span><br><span class="line">  <span class="keyword">if</span> (!<span class="built_in">dx_probe</span>(dou._do) &amp;&amp; !dou._dq-&gt;dq_items_tail) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!_dispatch_trylock(dou._do)) &#123;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">if</span> DISPATCH_COCOA_COMPAT</span></span><br><span class="line">    <span class="keyword">if</span> (dou._dq == $_dispatch_main_q) &#123;</span><br><span class="line">      <span class="comment">// 传入主队列，会进入到 _dispatch_queue_wakeup_main() 函数中</span></span><br><span class="line">      _dispatch_queue_wakeup_main();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">// 传入全局队列，会进入到 _dispatch_queue_wakeup_gloabl()函数中</span></span><br><span class="line">      _dispatch_queue_wakeup_global(dou._dq);</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _dispatch_retain(dou._do);</span><br><span class="line">  tq = dou._do-&gt;do_targetq;</span><br><span class="line">  _dispatch_queue_push(tq, dou._do);</span><br><span class="line">  <span class="keyword">return</span> tq;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">void</span> _dispatch_queue_wakeup_main(<span class="keyword">void</span>) &#123;</span><br><span class="line">  <span class="keyword">kern_return_t</span> kr;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// dispatch_once_f 保证只初始化一次</span></span><br><span class="line">  <span class="built_in">dispatch_once_f</span>(&amp;_dispatch_main_q_port_pred, <span class="literal">NULL</span>, _dispatch_main_q_port_init);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 唤醒主线程(核心逻辑在这里，未开源)</span></span><br><span class="line">  kr = _dispatch_send_wakeup_main_thread(main_q_port, <span class="number">0</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="built_in"><span class="keyword">switch</span></span> (kr) &#123;</span><br><span class="line">    <span class="keyword">case</span> MACH_SEND_TIMEOUT:</span><br><span class="line">    <span class="keyword">case</span> MACH_SEND_TIMED_OUT:</span><br><span class="line">    <span class="keyword">case</span> MACH_SEND_INVALID_DEST:</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">      <span class="built_in">dispatch_assume_zero</span>(kr);</span><br><span class="line">      <span class="keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  _dispatch_safe_fork = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">bool</span> _dispatch_queue_wakeup_global(<span class="keyword">dispatch_queue_t</span> dq) &#123;</span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">dispatch_once_t</span> pred;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">dispatch_root_queue_context_s</span> *<span class="title">qc</span> =</span> dq-&gt;do_ctxt;</span><br><span class="line">  <span class="keyword">pthred_workitem_handle_t</span> wh;</span><br><span class="line">  <span class="keyword">unsigned</span> <span class="keyword">int</span> gen_cnt;</span><br><span class="line">  <span class="keyword">pthread_t</span> pthr;</span><br><span class="line">  <span class="keyword">int</span> r, t_count;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">if</span> (!dq-&gt;dq_items_tail) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  _dispatch_safe_fork = <span class="literal">false</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="built_in">dispatch_debug_queue</span>(dq, __PRETTY_FUNCTION__);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 全局队列的检测，初始化和配置环境（只调用一次）</span></span><br><span class="line">  <span class="built_in">dispatch_once_f</span>(&amp;pred, <span class="literal">NULL</span>&lt; _dispatch_root_queues_init);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 如果队列的dgq_kworkqueue不为空，则</span></span><br><span class="line">  <span class="keyword">if</span> (qc-&gt;dgq_kworkqueue) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">dispatch_atomic_cmpxchg</span>(&amp;qc-&gt;dgq_pending, <span class="number">0</span>, <span class="number">1</span>)) &#123;</span><br><span class="line">      _dispatch_debug(<span class="string">&quot;requesting new worker thread&quot;</span>);</span><br><span class="line">      r = <span class="built_in">pthread_workqueue_additem_np</span>(qc-&gt;dgq_kworkqueue, _dispatch_worker_thread2, dq, &amp;wh, &amp;gen_cnt);</span><br><span class="line">      <span class="built_in">dispatch_assume_zero</span>(r);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      _dispatch_debug(<span class="string">&quot;work thread request still pending on global queue: %p&quot;</span>, dq);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 发送一个信号量，这是一种线程保活的方法</span></span><br><span class="line">  <span class="keyword">if</span> (<span class="built_in">dispatch_semaphore_signal</span>(qc-&gt;dgq_thread_mediator)) &#123;</span><br><span class="line">    <span class="keyword">goto</span> out;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>C++</category>
        <category>iOS</category>
      </categories>
      <tags>
        <tag>原创</tag>
      </tags>
  </entry>
  <entry>
    <title>Algorithm算法笔记</title>
    <url>/2021/11/25/Algorithm%E7%AE%97%E6%B3%95%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Pino的算法笔记"><a href="#Pino的算法笔记" class="headerlink" title="Pino的算法笔记"></a>Pino的算法笔记</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3>]]></content>
      <categories>
        <category>算法</category>
        <category>C++</category>
        <category>Go</category>
        <category>Swift</category>
      </categories>
      <tags>
        <tag>原创</tag>
        <tag>费脑</tag>
      </tags>
  </entry>
</search>
